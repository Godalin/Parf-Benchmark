These verification tasks are generated by the PSYCO tool [1]. PSYCO
generates interfaces for Java components using a combination of
active automata learning and symbolic execution [2]. The learning 
algorithm generates intermediate conjectures for interfaces, which
do not properly reflect the behavior of the component.

The verification tasks are generated when checking these intermediate
or the final (correct) interface against the component. For this purpose,
component and interface are translated to symbolic transition systems [3].
The verification task is then the product of these two transition systems.
Nonconformance is encoded as reachability of error labels.
Psyco improves interfaces based on the witness for a label's reachability and 
the verification tasks restarts.

[1] https://github.com/psycopaths/psyco

[2] Falk Howar, Dimitra Giannakopoulou, Zvonimir Rakamaric. Hybrid learning: 
   interface generation through static, dynamic, and symbolic analysis. 
   ISSTA 2013. 268-279, ACM, 2013.

[3] Malte Mues, Falk Howar, Temesghen Kahsai, Kasper Luckow, and Zvonimir Rakamaric. 
   Releasing the PSYCO: Using symbolic search in interface generation for Java 
   information. In JPF 2016 at FSE 2016, 2016. (to appear).