/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
typedef unsigned int uint_least8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint_least16_t;
typedef uint16_t uskew16_t;
typedef unsigned int uint32_t;
typedef uint32_t uskew32_t;
typedef uint16_t data_address_t;
typedef uint16_t code_address_t;
typedef code_address_t fptr_t;
typedef unsigned char DEBIE_mode_t;
enum __anonenum_reset_class_t_1 {
    power_up_reset_e = 0,
    watchdog_reset_e = 1,
    soft_reset_e = 2,
    warm_reset_e = 3,
    error_e = 4,
    checksum_reset_e = 5
};
typedef enum __anonenum_reset_class_t_1 reset_class_t;
enum __anonenum_memory_configuration_t_2 {
    PROM_e = 0,
    SRAM_e = 1
};
typedef enum __anonenum_memory_configuration_t_2 memory_configuration_t;
typedef uint32_t dpu_time_t;
typedef uskew32_t tm_dpu_time_t;
typedef uskew16_t tm_ushort_t;
struct __anonstruct_memory_patch_variables_t_3 {
   unsigned char *source ;
   data_address_t destination ;
   uint_least8_t data_amount ;
   unsigned char execution_command ;
};
typedef struct __anonstruct_memory_patch_variables_t_3 memory_patch_variables_t;
typedef uint_least8_t sensor_number_t;
typedef uint_least8_t sensor_index_t;
typedef uint_least8_t channel_t;
struct __anonstruct_delays_t_4 {
   unsigned short FromPlasma1Plus ;
   unsigned short FromPlasma1Minus ;
};
typedef struct __anonstruct_delays_t_4 delays_t;
struct __anonstruct_trigger_set_t_5 {
   sensor_number_t sensor_unit ;
   channel_t channel ;
   unsigned char level ;
   unsigned char execution_result ;
   unsigned int base ;
};
typedef struct __anonstruct_trigger_set_t_5 trigger_set_t;
struct __anonstruct_voltage_status_t_6 {
   unsigned char V_down_bit ;
   unsigned char HV_status ;
};
typedef struct __anonstruct_voltage_status_t_6 voltage_status_t;
struct __anonstruct_SU_settings_t_7 {
   unsigned char plus_5_voltage ;
   unsigned char minus_5_voltage ;
   unsigned char plasma_1_plus_threshold ;
   unsigned char plasma_1_minus_threshold ;
   unsigned char piezo_threshold ;
   unsigned char plasma_1_plus_classification ;
   unsigned char plasma_1_minus_classification ;
   unsigned char piezo_1_classification ;
   unsigned char piezo_2_classification ;
   unsigned char plasma_2_plus_classification ;
   unsigned char plasma_1_plus_to_minus_max_time ;
   unsigned char plasma_1_plus_to_piezo_min_time ;
   unsigned char plasma_1_plus_to_piezo_max_time ;
   unsigned char plasma_1_minus_to_piezo_min_time ;
   unsigned char plasma_1_minus_to_piezo_max_time ;
};
typedef struct __anonstruct_SU_settings_t_7 SU_settings_t;
struct __anonstruct_telemetry_data_t_8 {
   unsigned char error_status ;
   unsigned char mode_status ;
   uint16_t TC_word ;
   dpu_time_t TC_time_tag ;
   unsigned char watchdog_failures ;
   unsigned char checksum_failures ;
   unsigned char SW_version ;
   unsigned char isr_send_message_error ;
   unsigned char SU_status[4] ;
   unsigned char SU_temperature[4][2] ;
   unsigned char DPU_plus_5_digital ;
   unsigned char os_send_message_error ;
   unsigned char os_create_task_error ;
   unsigned char SU_plus_50 ;
   unsigned char SU_minus_50 ;
   unsigned char os_disable_isr_error ;
   unsigned char not_used_1 ;
   SU_settings_t sensor_unit_1 ;
   unsigned char os_wait_error ;
   SU_settings_t sensor_unit_2 ;
   unsigned char os_attach_interrupt_error ;
   SU_settings_t sensor_unit_3 ;
   unsigned char os_enable_isr_error ;
   SU_settings_t sensor_unit_4 ;
   code_address_t failed_code_address ;
   data_address_t failed_data_address ;
   uint16_t SU_hits[4] ;
   tm_dpu_time_t time ;
   unsigned char software_error ;
   unsigned char hit_budget_exceedings ;
   unsigned char coefficient[5] ;
   unsigned char not_used ;
};
typedef struct __anonstruct_telemetry_data_t_8 telemetry_data_t;
struct __anonstruct_event_record_t_9 {
   unsigned char quality_number ;
   unsigned char classification ;
   unsigned char SU_number ;
   tm_dpu_time_t hit_time ;
   unsigned char SU_temperature_1 ;
   unsigned char SU_temperature_2 ;
   tm_ushort_t plasma_1_plus ;
   tm_ushort_t plasma_1_minus ;
   tm_ushort_t piezo_1 ;
   tm_ushort_t piezo_2 ;
   tm_ushort_t plasma_2_plus ;
   unsigned char rise_time ;
   signed char delay_1 ;
   tm_ushort_t delay_2 ;
   tm_ushort_t delay_3 ;
   unsigned char checksum ;
};
typedef struct __anonstruct_event_record_t_9 event_record_t;
struct __anonstruct_science_data_file_t_10 {
   unsigned short length ;
   unsigned char event_counter[4][10] ;
   unsigned char not_used ;
   unsigned char counter_checksum ;
   event_record_t event[1261] ;
};
typedef struct __anonstruct_science_data_file_t_10 science_data_file_t;
enum __anonenum_SU_state_t_11 {
    off_e = 0,
    start_switching_e = 1,
    switching_e = 2,
    on_e = 3,
    self_test_mon_e = 4,
    self_test_e = 5,
    self_test_trigger_e = 6,
    acquisition_e = 7
};
typedef enum __anonenum_SU_state_t_11 SU_state_t;
struct __anonstruct_sensor_unit_t_12 {
   sensor_number_t SU_number ;
   SU_state_t SU_state ;
   SU_state_t expected_source_state ;
   unsigned char execution_result ;
};
typedef struct __anonstruct_sensor_unit_t_12 sensor_unit_t;
enum __anonenum_SU_test_level_t_13 {
    high_e = 0,
    low_e = 1
};
typedef enum __anonenum_SU_test_level_t_13 SU_test_level_t;
enum __anonenum_round_t_7 {
    round_0_e = 0,
    round_1_e = 1,
    round_2_e = 2,
    round_3_e = 3,
    round_4_e = 4,
    round_5_e = 5,
    round_6_e = 6,
    round_7_e = 7,
    round_8_e = 8,
    round_9_e = 9
};
struct __anonstruct_task_info_t_8 {
   unsigned char rtx_task_number ;
   void (*task_main_function)(void) ;
};
typedef struct __anonstruct_task_info_t_8 task_info_t;
enum __anonenum_TC_state_t_12 {
    TC_handling_e = 0,
    read_memory_e = 1,
    memory_dump_e = 2,
    write_memory_e = 3,
    memory_patch_e = 4,
    register_TM_e = 5,
    SC_TM_e = 6
};
typedef enum __anonenum_TC_state_t_12 TC_state_t;
struct __anonstruct_ADC_parameters_t_17 {
   channel_t ADC_channel ;
   uint_least8_t ADC_max_tries ;
   uint_least8_t conversion_max_tries ;
   unsigned int unsigned_ADC ;
   int signed_ADC ;
   unsigned char AD_execution_result ;
   sensor_number_t sensor_unit ;
};
typedef struct __anonstruct_ADC_parameters_t_17 ADC_parameters_t;
enum __anonenum_SU_index_t_18 {
    su1_e = 0,
    su2_e = 1,
    su3_e = 2,
    su4_e = 3
};
enum __anonenum_AD_channel_t_19 {
    channel_0_e = 0,
    channel_1_e = 1,
    channel_2_e = 2,
    channel_3_e = 3,
    channel_4_e = 4,
    channel_5_e = 5,
    channel_6_e = 6
};
struct __anonstruct_incoming_mail_t_11 {
   unsigned char mailbox_number ;
   unsigned char timeout ;
   uint16_t *message ;
   signed char execution_result ;
   signed char wait_result ;
   unsigned char event_selector ;
};
typedef struct __anonstruct_incoming_mail_t_11 incoming_mail_t;
struct __anonstruct_telecommand_t_18 {
   uint16_t TC_word ;
   unsigned char TC_address ;
   unsigned char TC_code ;
};
typedef struct __anonstruct_telecommand_t_18 telecommand_t;
enum __anonenum_memory_type_t_19 {
    code_e = 0,
    data_e = 1
};
typedef enum __anonenum_memory_type_t_19 memory_type_t;
struct __anonstruct_ad_limit_t_18 {
   uint16_t min ;
   uint16_t max ;
};
typedef struct __anonstruct_ad_limit_t_18 ad_limit_t;
unsigned char *Data_Pointer(uint16_t address);

unsigned short Short_Value(uskew16_t *x);

void Call_Patch(fptr_t func);

unsigned char Event_Flag(void);

void Set_Data_Byte(data_address_t addr, unsigned char value);

unsigned char Get_Data_Byte(data_address_t addr);

unsigned char Get_Code_Byte(code_address_t addr);

unsigned char Check_Current(unsigned char bits);

reset_class_t s_w_reset;

unsigned char code_not_patched;

unsigned char reference_checksum;

/*@ ghost int init_dpu_called; */
void Init_DPU(reset_class_t reset_class);

reset_class_t GetResetClass(void);

void SignalMemoryErrors(void);

void SetMemoryConfiguration(memory_configuration_t memory);

memory_configuration_t GetMemoryConfiguration(void);

void PatchCode(memory_patch_variables_t *patch_variables);

void Reboot(reset_class_t boot_type);

unsigned char TestMemBits(data_address_t address);

unsigned char TestMemData(data_address_t start, uint_least8_t bytes);

unsigned char TestMemSeq(data_address_t start, uint_least8_t bytes);

unsigned char Get_MSB_Counter(void);

unsigned char Get_LSB1_Counter(void);

unsigned char Get_LSB2_Counter(void);

unsigned char Rise_Time_Counter(void);

unsigned char Trigger_Source_0(void);

unsigned char Trigger_Source_1(void);

unsigned char V_Down(void);

void Set_SU_Self_Test_Ch(unsigned char value);

void Set_Test_Pulse_Level(unsigned char level);

unsigned char SU_ctrl_register;

void ReadDelayCounters(delays_t *delay);

unsigned char ReadRiseTimeCounter(void);

void ResetDelayCounters(void);

void ResetPeakDetector(sensor_number_t unit);

void SignalPeakDetectorReset(unsigned char low_reset_value,
                             unsigned char high_reset_value);

void SetTriggerLevel(trigger_set_t *setting);

void SetTestPulseLevel(unsigned char level);

void GetVoltageStatus(voltage_status_t *v_status);

void Switch_SU_On(sensor_number_t SU_Number, unsigned char *execution_result);

void Switch_SU_Off(sensor_number_t SU_Number, unsigned char *execution_result);

void EnableAnalogSwitch(sensor_index_t self_test_SU_index);

void DisableAnalogSwitch(sensor_index_t self_test_SU_index);

void SelectSelfTestChannel(unsigned char channel);

void SelectTriggerSwitchLevel(unsigned char test_channel_0,
                              sensor_index_t self_test_SU_index);

void SelectStartSwitchLevel(unsigned char test_channel_0,
                            sensor_index_t self_test_SU_index);

telemetry_data_t telemetry_data;

science_data_file_t science_data;

uint_least16_t max_events;

void RecordEvent(void);

void ClearEvents(void);

void InitClassification(void);

void ClassifyEvent(event_record_t *new_event);

void Init_SU_Settings(SU_settings_t *set);

unsigned char event_class[256];

SU_state_t SU_state[4];

sensor_number_t self_test_SU_number;

uint_least8_t hit_budget;

uint_least8_t hit_budget_left;

void Switch_SU_State(sensor_unit_t *SU_setting);

void Start_SU_SwitchingOn(sensor_index_t SU, unsigned char *exec_result);

void SetSensorUnitOff(sensor_index_t SU, unsigned char *exec_result);

SU_state_t ReadSensorUnit(unsigned char SU_number);

void Update_SU_State(sensor_index_t SU_index);

void (*hit_task)(void);

void (*acq_task)(void);

void InitHitTriggerTask(void);

void HandleHitTrigger(void);

void InitAcquisitionTask(void);

void HandleAcquisition(void);

unsigned char RoughLogarithm(unsigned int x)
{
  unsigned char greatest_non_zero_bit;
  unsigned int shifted;
  greatest_non_zero_bit = (unsigned char)0;
  shifted = x;
  while (shifted) {
    greatest_non_zero_bit = (unsigned char)((int)greatest_non_zero_bit + 1);
    shifted >>= 1;
  }
  return greatest_non_zero_bit;
}

float GetQualityTerm(unsigned char coeff, unsigned int amplitude)
{
  float quality;
  unsigned char tmp;
  tmp = RoughLogarithm(amplitude);
  quality = (float)((double)((float)((int)telemetry_data.coefficient[coeff] * (int)tmp)) / (
                    ((double)5 * 16.0) / (double)5));
  if ((double)quality > 5.0) quality = (float)5.0;
  return quality;
}

void CalculateQualityNumber(event_record_t *new_event)
{
  float quality;
  float tmp_0;
  unsigned short tmp;
  float tmp_2;
  unsigned short tmp_1;
  float tmp_4;
  unsigned short tmp_3;
  float tmp_6;
  unsigned short tmp_5;
  float tmp_8;
  unsigned short tmp_7;
  quality = (float)(25.0 * (double)new_event->classification);
  tmp = Short_Value(& new_event->plasma_1_plus);
  tmp_0 = GetQualityTerm((unsigned char)0,(unsigned int)tmp);
  quality += tmp_0;
  tmp_1 = Short_Value(& new_event->plasma_1_minus);
  tmp_2 = GetQualityTerm((unsigned char)1,(unsigned int)tmp_1);
  quality += tmp_2;
  tmp_3 = Short_Value(& new_event->piezo_1);
  tmp_4 = GetQualityTerm((unsigned char)2,(unsigned int)tmp_3);
  quality += tmp_4;
  tmp_5 = Short_Value(& new_event->piezo_2);
  tmp_6 = GetQualityTerm((unsigned char)3,(unsigned int)tmp_5);
  quality += tmp_6;
  tmp_7 = Short_Value(& new_event->plasma_2_plus);
  tmp_8 = GetQualityTerm((unsigned char)4,(unsigned int)tmp_7);
  quality += tmp_8;
  new_event->quality_number = (unsigned char)((double)quality + 0.5);
  return;
}

void ClassifyEvent(event_record_t *new_event)
{
  unsigned char class_index;
  SU_settings_t *limits;
  unsigned short tmp;
  unsigned short tmp_0;
  unsigned short tmp_1;
  unsigned short tmp_2;
  unsigned short tmp_3;
  unsigned short tmp_4;
  unsigned short tmp_6;
  class_index = (unsigned char)0;
  switch ((int)new_event->SU_number) {
    case 1: limits = & telemetry_data.sensor_unit_1;
    break;
    case 2: limits = & telemetry_data.sensor_unit_2;
    break;
    case 3: limits = & telemetry_data.sensor_unit_3;
    break;
    case 4: limits = & telemetry_data.sensor_unit_4;
    break;
  }
  tmp = Short_Value(& new_event->plasma_1_plus);
  ;
  if ((int)tmp >= (int)limits->plasma_1_plus_classification * 256) class_index = (unsigned char)(
                                                                   (int)class_index | 0x80);
  tmp_0 = Short_Value(& new_event->plasma_1_minus);
  ;
  if ((int)tmp_0 >= (int)limits->plasma_1_minus_classification * 256) 
    class_index = (unsigned char)((int)class_index | 0x40);
  tmp_1 = Short_Value(& new_event->piezo_1);
  ;
  if ((int)tmp_1 >= (int)limits->piezo_1_classification * 256) class_index = (unsigned char)(
                                                               (int)class_index | 0x20);
  tmp_2 = Short_Value(& new_event->piezo_2);
  ;
  if ((int)tmp_2 >= (int)limits->piezo_2_classification * 256) class_index = (unsigned char)(
                                                               (int)class_index | 0x10);
  tmp_3 = Short_Value(& new_event->plasma_2_plus);
  ;
  if ((int)tmp_3 >= (int)limits->plasma_2_plus_classification * 256) 
    class_index = (unsigned char)((int)class_index | 0x08);
  tmp_4 = Short_Value(& new_event->delay_2);
  ;
  if ((int)tmp_4 >= (int)limits->plasma_1_plus_to_piezo_min_time * 16) {
    unsigned short tmp_5;
    tmp_5 = Short_Value(& new_event->delay_2);
    ;
    if ((int)tmp_5 <= (int)limits->plasma_1_plus_to_piezo_max_time * 16) 
      class_index = (unsigned char)((int)class_index | 0x02);
  }
  tmp_6 = Short_Value(& new_event->delay_3);
  ;
  if ((int)tmp_6 >= (int)limits->plasma_1_minus_to_piezo_min_time * 16) {
    unsigned short tmp_7;
    tmp_7 = Short_Value(& new_event->delay_3);
    ;
    if ((int)tmp_7 <= (int)limits->plasma_1_minus_to_piezo_max_time * 16) 
      class_index = (unsigned char)((int)class_index | 0x01);
  }
  if ((int)new_event->delay_1 <= (int)limits->plasma_1_plus_to_minus_max_time) 
    class_index = (unsigned char)((int)class_index | 0x04);
  new_event->classification = event_class[class_index];
  if (SU_state[(int)new_event->SU_number - 1] == (unsigned int)self_test_e) 
    new_event->quality_number = (unsigned char)255;
  else CalculateQualityNumber(new_event);
  return;
}

void InitClassification(void)
{
  uint_least8_t i;
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)5) {
    telemetry_data.coefficient[i] = (unsigned char)5;
    i ++;
  }
  Init_SU_Settings(& telemetry_data.sensor_unit_1);
  Init_SU_Settings(& telemetry_data.sensor_unit_2);
  Init_SU_Settings(& telemetry_data.sensor_unit_3);
  Init_SU_Settings(& telemetry_data.sensor_unit_4);
  return;
}

void Init_SU_Settings(SU_settings_t *set)
{
  set->plasma_1_plus_threshold = (unsigned char)0x0D;
  set->plasma_1_minus_threshold = (unsigned char)0x0D;
  set->piezo_threshold = (unsigned char)0x0D;
  set->plasma_1_plus_classification = (unsigned char)0;
  set->plasma_1_minus_classification = (unsigned char)0;
  set->piezo_1_classification = (unsigned char)0;
  set->piezo_2_classification = (unsigned char)0;
  set->plasma_2_plus_classification = (unsigned char)0;
  set->plasma_1_plus_to_minus_max_time = (unsigned char)255;
  set->plasma_1_plus_to_piezo_min_time = (unsigned char)0;
  set->plasma_1_plus_to_piezo_max_time = (unsigned char)255;
  set->plasma_1_minus_to_piezo_min_time = (unsigned char)0;
  set->plasma_1_minus_to_piezo_max_time = (unsigned char)255;
  return;
}

unsigned char event_class[256] =
  {(unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)0,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)3,
   (unsigned char)3,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)4,
   (unsigned char)4,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)5,
   (unsigned char)5,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)8,
   (unsigned char)8,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)6,
   (unsigned char)6,
   (unsigned char)6,
   (unsigned char)6,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)1,
   (unsigned char)7,
   (unsigned char)7,
   (unsigned char)7,
   (unsigned char)7,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)7,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)9,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)7,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)9,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)7,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)2,
   (unsigned char)9};
unsigned char EA;

uint_least8_t health_mon_round;

uint_least8_t temp_meas_count;

uint_least8_t voltage_meas_count;

uint_least8_t checksum_count;

unsigned char code_checksum;

unsigned char confirm_hit_result;

dpu_time_t internal_time;

void SetSoftwareError(unsigned char error);

void ClearSoftwareError(void);

void SetModeStatusError(unsigned char mode_status_error);

void ClearModeStatusError(void);

void SetMode(DEBIE_mode_t mode);

DEBIE_mode_t GetMode(void);

void Clear_SU_Error(void);

void Set_SU_Error(sensor_index_t SU_index, unsigned char SU_error);

void SetErrorStatus(unsigned char error_source);

void ClearErrorStatus(void);

void Clear_RTX_Errors(void);

void Boot(void);

void InitHealthMonitoring(void);

void HandleHealthMonitoring(void);

void ShortDelay(uint_least8_t delay_loops);

void CreateTask(task_info_t *new_task);

void WaitInterval(unsigned char time);

void WaitTimeout(unsigned char time);

void SetTimeSlice(unsigned int time_slice);

void StartSystem(unsigned char task_number);

void SendTaskMail(unsigned char mailbox, uint16_t message,
                  unsigned char timeout);

unsigned char isr_send_message(unsigned char mailbox, uint16_t message);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

int main(void)
{
  int __retres;
  printf("Target Init.\n"); /* printf_va_1 */
  EA = (unsigned char)0;
  Init_DPU(s_w_reset);
  Boot();
  EA = (unsigned char)1;
  StartSystem((unsigned char)0);
  while (1) ;
  return __retres;
}

void Update_ADC_Channel_Reg(unsigned char channel);

void Start_Conversion(void);

unsigned char End_Of_ADC(void);

unsigned char Get_Result(void);

void Set_DAC_Output(unsigned char level);

unsigned char ADC_channel_register;

unsigned char code_checksum;
dpu_time_t internal_time;
unsigned char Read_TC_MSB(void);

unsigned char Read_TC_LSB(void);

void Write_TM_LSB(unsigned char value);

void Write_TM_MSB(unsigned char value);

TC_state_t TC_state;

void (*TC_task)(void);

void Set_TC_Error(void);

void TC_InterruptService(void);

void InitTelecommandTask(void);

void HandleTelecommand(void);

uint_least8_t event_queue_length;

unsigned char *telemetry_pointer;

unsigned char *telemetry_end_pointer;

unsigned int free_slot_index;

unsigned char read_memory_checksum;

event_record_t *GetFreeRecord(void);

void ResetEventQueueLength(void);

void TM_InterruptService(void);

void Enable_Hit_Trigger(void);

void Disable_Hit_Trigger(void);

unsigned char Hit_Trigger_Flag(void);

unsigned char TC_Timer_Overflow_Flag(void);

void Clear_TC_Timer_Overflow_Flag(void);

void Set_TC_Timer_Overflow_Flag(void);

void AttachInterrupt(unsigned char ISR_VectorNumber);

void EnableInterrupt(unsigned char ISR_VectorNumber);

void DisableInterrupt(unsigned char ISR_VectorNumber);

signed char SetInterruptMask(unsigned char ISR_MaskNumber);

signed char ResetInterruptMask(unsigned char ISR_MaskNumber);

void WaitInterrupt(unsigned char ISR_VectorNumber, unsigned char timer);

uint_least8_t temp_meas_count = (uint_least8_t)5;
uint_least8_t voltage_meas_count = (uint_least8_t)17;
uint_least8_t checksum_count = (uint_least8_t)59;
unsigned char self_test_flag = (unsigned char)0;
unsigned char ADC_channel_register = (unsigned char)0x80;
void DelayAwhile(unsigned short duration);

void Read_AD_Channel(ADC_parameters_t *ADC_parameters);

void DAC_SelfTest(unsigned char DAC_output,
                  ADC_parameters_t *ADC_test_parameters);

void Monitor(uint_least8_t health_mon_round_0);

void UpdateTime(void);

void MeasureTemperature(sensor_index_t SU_index);

void HighVoltageCurrent(sensor_index_t SU_index);

void LowVoltageCurrent(void);

void MeasureVoltage(uint_least8_t channel_selector);

void InitSystem(void);

void CalculateChecksum(uint_least8_t checksum_count_0);

void UpdatePeriodCounter(uint_least8_t *counter,
                         uint_least8_t full_counter_value);

void Convert_AD(ADC_parameters_t *ADC_parameters);

void TemperatureFailure(sensor_index_t SU_index);

void VoltageFailure(channel_t ADC_channel);

void SelfTest_SU(sensor_index_t self_test_SU_index);

void Monitor_DPU_Voltage(void);

void Monitor_SU_Voltage(sensor_index_t self_test_SU_index);

unsigned char ExceedsLimit(unsigned char value, unsigned char lower_limit,
                           unsigned char upper_limit);

void RestoreSettings(sensor_index_t self_test_SU_index);

void SelfTestChannel(sensor_index_t self_test_SU_index);

void ExecuteChannelTest(sensor_index_t self_test_SU_index,
                        unsigned char test_channel_0,
                        unsigned char test_pulse_level);

void Set_SU_TriggerLevels(sensor_number_t sensor_unit,
                          SU_settings_t *settings);

void Clear_RTX_Errors(void)
{
  telemetry_data.isr_send_message_error = (unsigned char)0xFF;
  telemetry_data.os_send_message_error = (unsigned char)0xFF;
  telemetry_data.os_create_task_error = (unsigned char)0xFF;
  telemetry_data.os_wait_error = (unsigned char)0xFF;
  telemetry_data.os_attach_interrupt_error = (unsigned char)0xFF;
  telemetry_data.os_enable_isr_error = (unsigned char)0xFF;
  telemetry_data.os_disable_isr_error = (unsigned char)0xFF;
  return;
}

void SetSoftwareError(unsigned char error)
{
  telemetry_data.software_error = (unsigned char)((int)telemetry_data.software_error | (int)error);
  return;
}

void ClearSoftwareError(void)
{
  telemetry_data.software_error = (unsigned char)0;
  return;
}

void SetModeStatusError(unsigned char mode_status_error)
{
  telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status | (
                                               (int)mode_status_error & ~ 3));
  return;
}

void ClearModeStatusError(void)
{
  telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status & 3);
  return;
}

void SetMode(DEBIE_mode_t mode)
{
  telemetry_data.mode_status = (unsigned char)(((int)telemetry_data.mode_status & ~ 3) | (
                                               (int)mode & 3));
  return;
}

DEBIE_mode_t GetMode(void)
{
  DEBIE_mode_t __retres;
  __retres = (DEBIE_mode_t)((int)telemetry_data.mode_status & 3);
  return __retres;
}

void Clear_SU_Error(void)
{
  sensor_index_t i;
  i = (sensor_index_t)0;
  while (i < (sensor_index_t)4) {
    telemetry_data.SU_status[i] = (unsigned char)((int)telemetry_data.SU_status[i] & 0x03);
    i ++;
  }
  return;
}

void Set_SU_Error(sensor_index_t SU_index, unsigned char SU_error)
{
  telemetry_data.SU_status[SU_index] = (unsigned char)((int)telemetry_data.SU_status[SU_index] | (
                                                       (int)SU_error & ~ 0x03));
  SetErrorStatus((unsigned char)(0x10 << SU_index));
  return;
}

void Set_SU_TriggerLevels(sensor_number_t sensor_unit,
                          SU_settings_t *settings)
{
  trigger_set_t trigger;
  trigger.sensor_unit = sensor_unit;
  trigger.level = settings->plasma_1_plus_threshold;
  trigger.channel = (channel_t)0;
  SetTriggerLevel(& trigger);
  trigger.level = settings->plasma_1_minus_threshold;
  trigger.channel = (channel_t)1;
  SetTriggerLevel(& trigger);
  trigger.level = settings->piezo_threshold;
  trigger.channel = (channel_t)5;
  SetTriggerLevel(& trigger);
  return;
}

void SetErrorStatus(unsigned char error_source)
{
  telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | (
                                                (int)error_source & ~ 1));
  return;
}

void ClearErrorStatus(void)
{
  telemetry_data.error_status = (unsigned char)0;
  return;
}

void DPU_SelfTest(void)
{
  Monitor_DPU_Voltage();
  return;
}

/*@ requires init_dpu_called ≡ 1; */
void Boot(void)
{
  unsigned char execution_result;
  unsigned char *fill_pointer;
  reset_class_t reset_class;
  unsigned int i;
  SU_ctrl_register = (unsigned char)((int)SU_ctrl_register | 0x0F);
  Set_Data_Byte((data_address_t)0xFFD0,SU_ctrl_register);
  max_events = (uint_least16_t)1261;
  ResetDelayCounters();
  SetSensorUnitOff((sensor_index_t)su1_e,& execution_result);
  SetSensorUnitOff((sensor_index_t)su2_e,& execution_result);
  SetSensorUnitOff((sensor_index_t)su3_e,& execution_result);
  SetSensorUnitOff((sensor_index_t)su4_e,& execution_result);
  ADC_channel_register = (unsigned char)((int)ADC_channel_register | 0x80);
  Update_ADC_Channel_Reg(ADC_channel_register);
  reset_class = GetResetClass();
  if (reset_class != (unsigned int)warm_reset_e) reference_checksum = (unsigned char)0;
  if (reset_class == (unsigned int)power_up_reset_e) {
    internal_time = (dpu_time_t)0;
    fill_pointer = (unsigned char *)(& telemetry_data);
    i = (unsigned int)0;
    while (i < sizeof(telemetry_data)) {
      *fill_pointer = (unsigned char)0;
      fill_pointer ++;
      i ++;
    }
    ResetEventQueueLength();
    ClearEvents();
    InitClassification();
    Clear_RTX_Errors();
  }
  else 
    if (reset_class == (unsigned int)watchdog_reset_e) {
      telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 0x04);
      if ((int)telemetry_data.watchdog_failures < 255) telemetry_data.watchdog_failures = (unsigned char)(
                                                       (int)telemetry_data.watchdog_failures + 1);
    }
    else 
      if (reset_class == (unsigned int)checksum_reset_e) {
        telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 0x08);
        if ((int)telemetry_data.checksum_failures < 255) telemetry_data.checksum_failures = (unsigned char)(
                                                         (int)telemetry_data.checksum_failures + 1);
      }
      else {
        ClearErrorStatus();
        Clear_SU_Error();
        Clear_RTX_Errors();
        ClearSoftwareError();
        telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status & 3);
        telemetry_data.watchdog_failures = (unsigned char)0;
        telemetry_data.checksum_failures = (unsigned char)0;
        telemetry_data.TC_word = (uint16_t)0;
        ResetEventQueueLength();
        ClearEvents();
        InitClassification();
        self_test_SU_number = (sensor_number_t)0;
      }
  telemetry_data.mode_status = (unsigned char)(((int)telemetry_data.mode_status & ~ 3) | 0);
  telemetry_data.SW_version = (unsigned char)24;
  SignalMemoryErrors();
  SetTestPulseLevel((unsigned char)0x00);
  Set_SU_TriggerLevels((sensor_number_t)1,& telemetry_data.sensor_unit_1);
  Set_SU_TriggerLevels((sensor_number_t)2,& telemetry_data.sensor_unit_2);
  Set_SU_TriggerLevels((sensor_number_t)3,& telemetry_data.sensor_unit_3);
  Set_SU_TriggerLevels((sensor_number_t)4,& telemetry_data.sensor_unit_4);
  return;
}

uint_least8_t health_mon_round = (uint_least8_t)9;
void InitHealthMonitoring(void)
{
  InitSystem();
  DPU_SelfTest();
  SetMode((DEBIE_mode_t)1);
  return;
}

void HandleHealthMonitoring(void)
{
  Update_SU_State((sensor_index_t)0);
  Update_SU_State((sensor_index_t)1);
  Update_SU_State((sensor_index_t)2);
  Update_SU_State((sensor_index_t)3);
  UpdateTime();
  Monitor(health_mon_round);
  UpdatePeriodCounter(& health_mon_round,(uint_least8_t)9);
  WaitInterval((unsigned char)100);
  return;
}

void HealthMonitoringTask(void)
{
  InitHealthMonitoring();
  while (1) HandleHealthMonitoring();
  return;
}

void Monitor(uint_least8_t health_mon_round_0)
{
  CalculateChecksum(checksum_count);
  UpdatePeriodCounter(& checksum_count,(uint_least8_t)59);
  switch (health_mon_round_0) {
    unsigned char tmp;
    case (uint_least8_t)round_0_e: HighVoltageCurrent(health_mon_round_0);
    UpdatePeriodCounter(& temp_meas_count,(uint_least8_t)5);
    UpdatePeriodCounter(& voltage_meas_count,(uint_least8_t)17);
    hit_budget_left = hit_budget;
    tmp = Hit_Trigger_Flag();
    if ((int)tmp == 0) {
      ResetPeakDetector((sensor_number_t)1);
      ResetPeakDetector((sensor_number_t)2);
      ResetPeakDetector((sensor_number_t)3);
      ResetPeakDetector((sensor_number_t)4);
      WaitTimeout((unsigned char)1);
      Enable_Hit_Trigger();
      ResetDelayCounters();
    }
    break;
    case (uint_least8_t)round_1_e: HighVoltageCurrent(health_mon_round_0);
    break;
    case (uint_least8_t)round_2_e: HighVoltageCurrent(health_mon_round_0);
    break;
    case (uint_least8_t)round_3_e: HighVoltageCurrent(health_mon_round_0);
    break;
    case (uint_least8_t)round_4_e: LowVoltageCurrent();
    break;
    case (uint_least8_t)round_5_e: ;
    if (voltage_meas_count < (uint_least8_t)7) MeasureVoltage(voltage_meas_count);
    break;
    case (uint_least8_t)round_6_e: ;
    if (self_test_SU_number != (sensor_number_t)0) 
      if (SU_state[self_test_SU_number - (sensor_number_t)1] == (unsigned int)self_test_e) {
        SelfTestChannel(self_test_SU_number - (sensor_number_t)1);
        self_test_SU_number = (sensor_number_t)0;
      }
    break;
    case (uint_least8_t)round_7_e: ;
    if (self_test_SU_number != (sensor_number_t)0) {
      self_test_flag = (unsigned char)1;
      SelfTest_SU(self_test_SU_number - (sensor_number_t)1);
      if (self_test_SU_number != (sensor_number_t)0) SU_state[self_test_SU_number - (sensor_number_t)1] = self_test_e;
    }
    break;
    case (uint_least8_t)round_8_e: ;
    break;
    case (uint_least8_t)round_9_e: ;
    if (temp_meas_count < (uint_least8_t)4) MeasureTemperature(temp_meas_count);
    break;
  }
  return;
}

void UpdateTime(void)
{
  internal_time ++;
  return;
}

void MeasureTemperature(sensor_index_t SU_index)
{
  ADC_parameters_t AD_temperature_parameters;
  unsigned char temp_limit_value;
  uint_least8_t j;
  j = (uint_least8_t)0;
  while (j < (uint_least8_t)2) {
    AD_temperature_parameters.ADC_channel = (((unsigned int)5 + (SU_index & (unsigned int)1) * (unsigned int)8) + 
                                             (SU_index & (unsigned int)2) * (unsigned int)12) + j;
    AD_temperature_parameters.ADC_max_tries = (uint_least8_t)255;
    AD_temperature_parameters.conversion_max_tries = (uint_least8_t)255;
    Read_AD_Channel(& AD_temperature_parameters);
    if (AD_temperature_parameters.unsigned_ADC & (unsigned int)0x8000) 
      telemetry_data.SU_temperature[SU_index][j] = (unsigned char)((AD_temperature_parameters.unsigned_ADC & (unsigned int)0x7FFF) >> 7);
    else telemetry_data.SU_temperature[SU_index][j] = (unsigned char)0;
    if (j == (uint_least8_t)0) temp_limit_value = (unsigned char)0xFA;
    else temp_limit_value = (unsigned char)0xF4;
    if ((int)telemetry_data.SU_temperature[SU_index][j] > (int)temp_limit_value) 
      TemperatureFailure(SU_index);
    if ((int)AD_temperature_parameters.AD_execution_result != 1) {
      SetSoftwareError((unsigned char)0x01);
      TemperatureFailure(SU_index);
    }
    j ++;
  }
  return;
}

void HighVoltageCurrent(sensor_index_t SU_index)
{
  unsigned char tmp;
  unsigned char SU_current_mask[4] =
    {(unsigned char)3,
     (unsigned char)12,
     (unsigned char)48,
     (unsigned char)192};
  unsigned char valid_value[4] =
    {(unsigned char)1, (unsigned char)4, (unsigned char)16, (unsigned char)64};
  tmp = Check_Current(SU_current_mask[SU_index]);
  ;
  if ((int)tmp != (int)valid_value[SU_index]) {
    SetErrorStatus((unsigned char)(0x10 << SU_index));
    Set_SU_Error(SU_index,(unsigned char)0x80);
  }
  return;
}

void LowVoltageCurrent(void)
{
  sensor_index_t i;
  unsigned char exec_result;
  unsigned char tmp;
  tmp = V_Down();
  if ((int)tmp == 0) {
    i = (sensor_index_t)0;
    while (i < (sensor_index_t)4) {
      SetSensorUnitOff(i,& exec_result);
      Set_SU_Error(i,(unsigned char)0x40);
      i ++;
    }
    SetErrorStatus((unsigned char)0xF0);
  }
  return;
}

void MeasureVoltage(uint_least8_t channel_selector)
{
  ADC_parameters_t AD_voltage_parameters;
  unsigned char voltage_channel[7] =
    {(unsigned char)0x10,
     (unsigned char)0x11,
     (unsigned char)0x12,
     (unsigned char)0x13,
     (unsigned char)0x54,
     (unsigned char)0x55,
     (unsigned char)0x56};
  AD_voltage_parameters.ADC_channel = (channel_t)voltage_channel[channel_selector];
  AD_voltage_parameters.ADC_max_tries = (uint_least8_t)255;
  AD_voltage_parameters.conversion_max_tries = (uint_least8_t)255;
  Read_AD_Channel(& AD_voltage_parameters);
  if ((int)AD_voltage_parameters.AD_execution_result != 1) SetSoftwareError
                                                           ((unsigned char)0x01);
  else 
    switch (channel_selector) {
      case (uint_least8_t)channel_0_e:
      telemetry_data.sensor_unit_1.plus_5_voltage = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      telemetry_data.sensor_unit_2.plus_5_voltage = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_1_e:
      telemetry_data.sensor_unit_3.plus_5_voltage = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      telemetry_data.sensor_unit_4.plus_5_voltage = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_2_e:
      telemetry_data.SU_plus_50 = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_3_e:
      telemetry_data.DPU_plus_5_digital = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_4_e:
      telemetry_data.sensor_unit_1.minus_5_voltage = (unsigned char)(
      AD_voltage_parameters.unsigned_ADC >> 8);
      telemetry_data.sensor_unit_2.minus_5_voltage = (unsigned char)(
      AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_5_e:
      telemetry_data.sensor_unit_3.minus_5_voltage = (unsigned char)(
      AD_voltage_parameters.unsigned_ADC >> 8);
      telemetry_data.sensor_unit_4.minus_5_voltage = (unsigned char)(
      AD_voltage_parameters.unsigned_ADC >> 8);
      break;
      case (uint_least8_t)channel_6_e:
      telemetry_data.SU_minus_50 = (unsigned char)(AD_voltage_parameters.unsigned_ADC >> 8);
      break;
    }
  return;
}

void InitSystem(void)
{
  task_info_t new_task;
  SetTimeSlice((unsigned int)9198);
  WaitInterval((unsigned char)55);
  new_task.rtx_task_number = (unsigned char)1;
  new_task.task_main_function = TC_task;
  CreateTask(& new_task);
  new_task.rtx_task_number = (unsigned char)2;
  new_task.task_main_function = acq_task;
  CreateTask(& new_task);
  new_task.rtx_task_number = (unsigned char)3;
  new_task.task_main_function = hit_task;
  CreateTask(& new_task);
  return;
}

void CalculateChecksum(uint_least8_t checksum_count_0)
{
  code_address_t i;
  code_address_t check_start;
  code_address_t check_end;
  check_start = (code_address_t)(checksum_count_0 * (uint_least8_t)547);
  if (checksum_count_0 == (uint_least8_t)59) check_end = (code_address_t)0x7FFF;
  else check_end = (code_address_t)((int)check_start + (547 - 1));
  if (checksum_count_0 == (uint_least8_t)59) {
    code_checksum = (unsigned char)0;
    code_not_patched = (unsigned char)1;
  }
  i = check_start;
  while ((int)i <= (int)check_end) {
    {
      unsigned char tmp;
      tmp = Get_Code_Byte(i);
      code_checksum = (unsigned char)((int)code_checksum ^ (int)tmp);
    }
    i = (code_address_t)((int)i + 1);
  }
  if (checksum_count_0 == (uint_least8_t)0) 
    if ((int)code_checksum != (int)reference_checksum) 
      if (code_not_patched) Reboot(checksum_reset_e);
  return;
}

void UpdatePeriodCounter(uint_least8_t *counter,
                         uint_least8_t full_counter_value)
{
  if (*counter) (*counter) --; else *counter = full_counter_value;
  return;
}

void Convert_AD(ADC_parameters_t *ADC_parameters)
{
  unsigned char conversion_count;
  unsigned char msb;
  unsigned char lsb;
  unsigned int word;
  Start_Conversion();
  conversion_count = (unsigned char)0;
  /*@ loop unroll ADC_parameters->conversion_max_tries; */
  while (1) {
    if ((uint_least8_t)conversion_count < ADC_parameters->conversion_max_tries) {
      unsigned char tmp;
      tmp = End_Of_ADC();
      if (! ((int)tmp != 0)) break;
    }
    else break;
    conversion_count = (unsigned char)((int)conversion_count + 1);
  }
  if ((uint_least8_t)conversion_count < ADC_parameters->conversion_max_tries) {
    msb = Get_Result();
    lsb = Get_Result();
    word = (unsigned int)msb * (unsigned int)256 + (unsigned int)lsb;
    ADC_parameters->signed_ADC = (int)((short)(word ^ (unsigned int)0x8000));
    ADC_parameters->unsigned_ADC = word;
    ADC_parameters->AD_execution_result = (unsigned char)1;
  }
  else {
    ADC_parameters->unsigned_ADC = (unsigned int)0;
    ADC_parameters->signed_ADC = 0;
    ADC_parameters->AD_execution_result = (unsigned char)0;
  }
  return;
}

void VoltageFailure(channel_t ADC_channel)
{
  unsigned char i;
  unsigned char SU_action[4] =
    {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0};
  if (ADC_channel == (channel_t)0x10) goto _LOR_1;
  else 
    if (ADC_channel == (channel_t)0x54) {
      _LOR_1:
      {
        SU_action[su1_e] = (unsigned char)1;
        SU_action[su2_e] = (unsigned char)1;
        SetModeStatusError((unsigned char)0x80);
      }
    }
    else 
      if (ADC_channel == (channel_t)0x11) goto _LOR_0;
      else 
        if (ADC_channel == (channel_t)0x55) {
          _LOR_0:
          {
            SU_action[su3_e] = (unsigned char)1;
            SU_action[su4_e] = (unsigned char)1;
          }
        }
        else 
          if (ADC_channel == (channel_t)0x12) goto _LOR;
          else 
            if (ADC_channel == (channel_t)0x56) {
              _LOR:
              {
                SU_action[su1_e] = (unsigned char)1;
                SU_action[su2_e] = (unsigned char)1;
                SU_action[su3_e] = (unsigned char)1;
                SU_action[su4_e] = (unsigned char)1;
              }
            }
            else 
              if (ADC_channel == (channel_t)0x13) SetModeStatusError((unsigned char)0x80);
  i = (unsigned char)0;
  while ((int)i < 4) {
    if (SU_action[i]) {
      SetErrorStatus((unsigned char)(0x10 << (int)i));
      if (ADC_channel == (channel_t)0x12) goto _LOR_2;
      else 
        if (ADC_channel == (channel_t)0x56) _LOR_2:
                                            Set_SU_Error((sensor_index_t)i,
                                                         (unsigned char)0x80);
      if (ADC_channel == (channel_t)0x10) goto _LOR_3;
      else 
        if (ADC_channel == (channel_t)0x11) goto _LOR_3;
        else 
          if (ADC_channel == (channel_t)0x54) goto _LOR_3;
          else 
            if (ADC_channel == (channel_t)0x55) _LOR_3:
                                                Set_SU_Error((sensor_index_t)i,
                                                             (unsigned char)0x40);
    }
    i = (unsigned char)((int)i + 1);
  }
  return;
}

void TemperatureFailure(sensor_index_t SU_index)
{
  unsigned char exec_result;
  SetSensorUnitOff(SU_index,& exec_result);
  SetErrorStatus((unsigned char)(0x10 << SU_index));
  Set_SU_Error(SU_index,(unsigned char)0x20);
  return;
}

void DelayAwhile(unsigned short duration)
{
  while ((int)duration > 255) {
    ShortDelay((uint_least8_t)255);
    duration = (unsigned short)((int)duration - 255);
  }
  if ((int)duration > 0) ShortDelay((uint_least8_t)((unsigned char)duration));
  return;
}

void Read_AD_Channel(ADC_parameters_t *ADC_parameters)
{
  unsigned char tries_left;
  unsigned short delay_limit;
  delay_limit = (unsigned short)(((double)2000 / 1.085 - (double)4) / (double)2);
  tries_left = (unsigned char)ADC_parameters->ADC_max_tries;
  /*@ loop unroll 1; */
  while ((int)tries_left > 0) {
    confirm_hit_result = (unsigned char)0;
    ADC_channel_register = (unsigned char)((unsigned int)((int)ADC_channel_register & 0x80) | ADC_parameters->ADC_channel);
    Update_ADC_Channel_Reg(ADC_channel_register);
    Start_Conversion();
    DelayAwhile(delay_limit);
    Convert_AD(ADC_parameters);
    tries_left = (unsigned char)((int)tries_left - 1);
    if ((int)confirm_hit_result == 0) tries_left = (unsigned char)0;
  }
  if ((int)confirm_hit_result != 0) {
    ADC_parameters->unsigned_ADC = (unsigned int)0;
    ADC_parameters->signed_ADC = 0;
    ADC_parameters->AD_execution_result = (unsigned char)2;
  }
  else 
    if ((int)ADC_parameters->AD_execution_result == 0) 
      if ((int)confirm_hit_result == 0) SetModeStatusError((unsigned char)0x04);
  return;
}

void DAC_SelfTest(unsigned char DAC_output,
                  ADC_parameters_t *ADC_test_parameters)
{
  Set_DAC_Output(DAC_output);
  Read_AD_Channel(ADC_test_parameters);
  if ((int)ADC_test_parameters->AD_execution_result != 1) {
    Set_SU_Error(ADC_test_parameters->sensor_unit - (sensor_number_t)1,
                 (unsigned char)0x10);
    SetSoftwareError((unsigned char)0x01);
  }
  return;
}

void Monitor_DPU_Voltage(void)
{
  unsigned char tmp;
  unsigned char tmp_0;
  unsigned char tmp_1;
  MeasureVoltage((uint_least8_t)3);
  MeasureVoltage((uint_least8_t)0);
  MeasureVoltage((uint_least8_t)4);
  tmp = ExceedsLimit(telemetry_data.sensor_unit_1.plus_5_voltage,
                     (unsigned char)0xBA,(unsigned char)0xE4);
  if (tmp) SetModeStatusError((unsigned char)0x80);
  tmp_0 = ExceedsLimit(telemetry_data.sensor_unit_1.minus_5_voltage,
                       (unsigned char)0x0D,(unsigned char)0x22);
  if (tmp_0) SetModeStatusError((unsigned char)0x80);
  tmp_1 = ExceedsLimit(telemetry_data.DPU_plus_5_digital,(unsigned char)0xBA,
                       (unsigned char)0xE4);
  if (tmp_1) SetModeStatusError((unsigned char)0x80);
  return;
}

void Monitor_SU_Voltage(sensor_index_t self_test_SU_index)
{
  unsigned char tmp_3;
  unsigned char tmp_4;
  switch (self_test_SU_index) {
    unsigned char tmp;
    unsigned char tmp_0;
    unsigned char tmp_1;
    unsigned char tmp_2;
    case (sensor_index_t)su1_e: case (sensor_index_t)su2_e:
    tmp = ExceedsLimit(telemetry_data.sensor_unit_1.plus_5_voltage,
                       (unsigned char)0xBA,(unsigned char)0xE4);
    if (tmp) Set_SU_Error(self_test_SU_index,(unsigned char)0x04);
    tmp_0 = ExceedsLimit(telemetry_data.sensor_unit_1.minus_5_voltage,
                         (unsigned char)0x0D,(unsigned char)0x22);
    if (tmp_0) Set_SU_Error(self_test_SU_index,(unsigned char)0x04);
    break;
    case (sensor_index_t)su3_e: case (sensor_index_t)su4_e:
    tmp_1 = ExceedsLimit(telemetry_data.sensor_unit_3.plus_5_voltage,
                         (unsigned char)0xBA,(unsigned char)0xE4);
    if (tmp_1) Set_SU_Error(self_test_SU_index,(unsigned char)0x04);
    tmp_2 = ExceedsLimit(telemetry_data.sensor_unit_3.minus_5_voltage,
                         (unsigned char)0x0D,(unsigned char)0x22);
    if (tmp_2) Set_SU_Error(self_test_SU_index,(unsigned char)0x04);
    break;
  }
  tmp_3 = ExceedsLimit(telemetry_data.SU_plus_50,(unsigned char)0xA8,
                       (unsigned char)0xE3);
  if (tmp_3) Set_SU_Error(self_test_SU_index,(unsigned char)0x08);
  tmp_4 = ExceedsLimit(telemetry_data.SU_minus_50,(unsigned char)0x0E,
                       (unsigned char)0x2C);
  if (tmp_4) Set_SU_Error(self_test_SU_index,(unsigned char)0x08);
  return;
}

void SelfTest_SU(sensor_index_t self_test_SU_index)
{
  uint_least8_t i;
  LowVoltageCurrent();
  HighVoltageCurrent(self_test_SU_index);
  i = (uint_least8_t)channel_0_e;
  while (i <= (uint_least8_t)channel_6_e) {
    MeasureVoltage(i);
    i ++;
  }
  Monitor_SU_Voltage(self_test_SU_index);
  MeasureTemperature(self_test_SU_index);
  return;
}

unsigned char ExceedsLimit(unsigned char value, unsigned char lower_limit,
                           unsigned char upper_limit)
{
  unsigned char __retres;
  int tmp;
  if ((int)value < (int)lower_limit) tmp = 1;
  else 
    if ((int)value > (int)upper_limit) tmp = 1; else tmp = 0;
  __retres = (unsigned char)tmp;
  return __retres;
}

void SelfTestChannel(sensor_index_t self_test_SU_index)
{
  trigger_set_t test_threshold;
  Disable_Hit_Trigger();
  test_threshold.sensor_unit = self_test_SU_number;
  test_threshold.level = (unsigned char)0xFF;
  test_threshold.channel = (channel_t)0;
  SetTriggerLevel(& test_threshold);
  test_threshold.channel = (channel_t)1;
  SetTriggerLevel(& test_threshold);
  test_threshold.channel = (channel_t)4;
  SetTriggerLevel(& test_threshold);
  test_threshold.level = (unsigned char)0xFF;
  test_threshold.channel = (channel_t)5;
  SetTriggerLevel(& test_threshold);
  SetTestPulseLevel((unsigned char)0);
  test_threshold.channel = (channel_t)0;
  test_threshold.level = (unsigned char)0xAB;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)0,(unsigned char)0x5A);
  test_threshold.channel = (channel_t)1;
  test_threshold.level = (unsigned char)0x80;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)1,(unsigned char)0x2A);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)4,(unsigned char)0x50);
  test_threshold.channel = (channel_t)5;
  test_threshold.level = (unsigned char)0x2B;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)2,(unsigned char)0xF6);
  test_threshold.channel = (channel_t)5;
  test_threshold.level = (unsigned char)0x2B;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)3,(unsigned char)0xE8);
  test_threshold.channel = (channel_t)0;
  test_threshold.level = (unsigned char)0x15;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)0,(unsigned char)0x13);
  test_threshold.channel = (channel_t)1;
  test_threshold.level = (unsigned char)0x15;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)1,(unsigned char)0x08);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)4,(unsigned char)0x10);
  test_threshold.channel = (channel_t)5;
  test_threshold.level = (unsigned char)0x0D;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)2,(unsigned char)0x36);
  test_threshold.channel = (channel_t)5;
  test_threshold.level = (unsigned char)0x0D;
  SetTriggerLevel(& test_threshold);
  ExecuteChannelTest(self_test_SU_index,(unsigned char)3,(unsigned char)0x36);
  Enable_Hit_Trigger();
  RestoreSettings(self_test_SU_index);
  return;
}

void ExecuteChannelTest(sensor_index_t self_test_SU_index,
                        unsigned char test_channel_0,
                        unsigned char test_pulse_level)
{
  unsigned short delay_limit;
  trigger_set_t test_threshold;
  if ((int)test_channel_0 == 0) goto _LOR;
  else 
    if ((int)test_channel_0 == 1) goto _LOR;
    else 
      if ((int)test_channel_0 == 4) {
        _LOR:
        {
          SelectSelfTestChannel(test_channel_0);
          EnableAnalogSwitch(self_test_SU_index);
          WaitTimeout((unsigned char)1);
          ResetPeakDetector(self_test_SU_index + (sensor_index_t)1);
          WaitTimeout((unsigned char)1);
          ResetPeakDetector(self_test_SU_index + (sensor_index_t)1);
          WaitTimeout((unsigned char)1);
          ResetDelayCounters();
          SU_state[self_test_SU_index] = self_test_trigger_e;
          Enable_Hit_Trigger();
          SetTestPulseLevel(test_pulse_level);
          delay_limit = (unsigned short)(((double)1000 / 1.085 - (double)4) / (double)2);
          DelayAwhile(delay_limit);
          if ((int)test_channel_0 == 1) 
            if (SU_state[self_test_SU_index] == (unsigned int)self_test_trigger_e) {
              Set_SU_Error(self_test_SU_index,(unsigned char)0x10);
              SU_state[self_test_SU_index] = self_test_e;
            }
          delay_limit = (unsigned short)(((double)2000 / 1.085 - (double)4) / (double)2);
          DelayAwhile(delay_limit);
          SetTestPulseLevel((unsigned char)0);
          if ((int)test_channel_0 == 4) ;
          if ((int)test_channel_0 != 1) {
            delay_limit = (unsigned short)(((double)1000 / 1.085 - (double)4) / (double)2);
            DelayAwhile(delay_limit);
          }
          Disable_Hit_Trigger();
          if ((int)test_channel_0 != 4) {
            test_threshold.sensor_unit = self_test_SU_index + (sensor_index_t)1;
            test_threshold.channel = (channel_t)test_channel_0;
            test_threshold.level = (unsigned char)0xFF;
            SetTriggerLevel(& test_threshold);
          }
          DisableAnalogSwitch(self_test_SU_index);
        }
      }
      else {
        SelectSelfTestChannel(test_channel_0);
        SetTestPulseLevel(test_pulse_level);
        WaitTimeout((unsigned char)1);
        ResetPeakDetector(self_test_SU_index + (sensor_index_t)1);
        WaitTimeout((unsigned char)1);
        ResetPeakDetector(self_test_SU_index + (sensor_index_t)1);
        WaitTimeout((unsigned char)1);
        ResetDelayCounters();
        SU_state[self_test_SU_index] = self_test_trigger_e;
        Enable_Hit_Trigger();
        EnableAnalogSwitch(self_test_SU_index);
        delay_limit = (unsigned short)(((double)1000 / 1.085 - (double)4) / (double)2);
        DelayAwhile(delay_limit);
        Disable_Hit_Trigger();
        SetTestPulseLevel((unsigned char)0);
        DisableAnalogSwitch(self_test_SU_index);
        test_threshold.sensor_unit = self_test_SU_index + (sensor_index_t)1;
        test_threshold.level = (unsigned char)0xFF;
        test_threshold.channel = (channel_t)5;
        SetTriggerLevel(& test_threshold);
      }
  if (SU_state[self_test_SU_index] == (unsigned int)self_test_trigger_e) {
    Set_SU_Error(self_test_SU_index,(unsigned char)0x10);
    SU_state[self_test_SU_index] = self_test_e;
  }
  return;
}

void RestoreSettings(sensor_index_t self_test_SU_index)
{
  SU_settings_t *SU_setting;
  sensor_unit_t SU_switch;
  trigger_set_t threshold;
  SU_settings_t * const setting_map_c[4] =
    {& telemetry_data.sensor_unit_1,
     & telemetry_data.sensor_unit_2,
     & telemetry_data.sensor_unit_3,
     & telemetry_data.sensor_unit_4};
  SU_setting = setting_map_c[self_test_SU_index];
  threshold.sensor_unit = self_test_SU_number;
  threshold.level = SU_setting->plasma_1_plus_threshold;
  threshold.channel = (channel_t)0;
  SetTriggerLevel(& threshold);
  threshold.level = SU_setting->plasma_1_minus_threshold;
  threshold.channel = (channel_t)1;
  SetTriggerLevel(& threshold);
  threshold.level = SU_setting->piezo_threshold;
  threshold.channel = (channel_t)5;
  SetTriggerLevel(& threshold);
  SU_switch.SU_number = self_test_SU_number;
  SU_switch.SU_state = on_e;
  SU_switch.expected_source_state = self_test_e;
  Switch_SU_State(& SU_switch);
  return;
}

reset_class_t s_w_reset;
unsigned char code_not_patched;
unsigned char reference_checksum;
unsigned char SU_ctrl_register = (unsigned char)0;
unsigned char SU_self_test_channel = (unsigned char)0;
unsigned char forbidden_area[256];
code_address_t failed_code_address;
data_address_t failed_data_address;
memory_configuration_t memory_mode;
unsigned char const checksum_nullifier = (unsigned char)0x9F;
unsigned char analog_switch_bit[4] =
  {(unsigned char)0x10,
   (unsigned char)0x20,
   (unsigned char)0x40,
   (unsigned char)0x80};
void CopyProgramCode(void);

unsigned short InitCode_RAM(reset_class_t reset_class);

void InitData_RAM(reset_class_t reset_class, code_address_t code_address);

unsigned short Check_RAM(data_address_t start_address,
                         data_address_t end_address)
{
  unsigned short __retres;
  data_address_t start;
  uint_least16_t range;
  uint_least8_t bytes;
  uint_least8_t bytes_left;
  unsigned char tmp;
  start = start_address;
  tmp = TestMemBits(start);
  if ((int)tmp != 0) {
    __retres = start;
    goto return_label;
  }
  while ((int)start <= (int)end_address) {
    unsigned char tmp_0;
    range = (uint_least16_t)((int)end_address - (int)start);
    if (range < (uint_least16_t)255) bytes = range + (uint_least16_t)1;
    else bytes = (uint_least8_t)255;
    tmp_0 = TestMemSeq(start,bytes);
    bytes_left = (uint_least8_t)tmp_0;
    if (bytes_left == (uint_least8_t)0) {
      unsigned char tmp_1;
      tmp_1 = TestMemData(start,bytes);
      bytes_left = (uint_least8_t)tmp_1;
    }
    if (bytes_left > (uint_least8_t)0) {
      __retres = (unsigned short)((bytes - bytes_left) + (uint_least8_t)start);
      goto return_label;
    }
    start = (data_address_t)((uint_least8_t)start + bytes);
  }
  __retres = (unsigned short)0xFFFF;
  return_label: return __retres;
}

void Init_DPU(reset_class_t reset_class)
{
  reset_class_t volatile safe_reset_class;
  code_address_t code_address;
  /*@ ghost init_dpu_called = 1; */
  safe_reset_class = reset_class;
  Set_TC_Timer_Overflow_Flag();
  code_address = InitCode_RAM(safe_reset_class);
  InitData_RAM(safe_reset_class,code_address);
  s_w_reset = safe_reset_class;
  code_not_patched = (unsigned char)1;
  failed_code_address = code_address;
  if ((int)code_address == 0xFFFF) memory_mode = SRAM_e;
  else memory_mode = PROM_e;
  return;
}

unsigned short InitCode_RAM(reset_class_t reset_class)
{
  code_address_t code_address;
  if (reset_class == (unsigned int)warm_reset_e) code_address = failed_code_address;
  else {
    code_address = Check_RAM((data_address_t)0x1000,(data_address_t)0x7FFF);
    if ((int)code_address == 0xFFFF) CopyProgramCode();
  }
  if ((int)code_address == 0xFFFF) ;
  return code_address;
}

void InitData_RAM(reset_class_t reset_class, code_address_t code_address)
{
  if (reset_class == (unsigned int)power_up_reset_e) 
    if ((int)code_address == 0xFFFF) failed_data_address = Check_RAM((data_address_t)0x0000,
                                                                    (data_address_t)0xFEFF);
    else failed_data_address = Check_RAM((data_address_t)0x8000,
                                         (data_address_t)0xFEFF);
  return;
}

void CopyProgramCode(void)
{
  code_address_t i;
  unsigned char code_byte;
  i = (code_address_t)0x1000;
  while ((int)i < 0x8000) {
    code_byte = Get_Code_Byte(i);
    Set_Data_Byte(i,code_byte);
    i = (code_address_t)((int)i + 1);
  }
  return;
}

reset_class_t GetResetClass(void)
{
  register reset_class_t occurred_reset;
  occurred_reset = s_w_reset;
  s_w_reset = error_e;
  return occurred_reset;
}

/*@ requires init_dpu_called ≡ 1; */
void SignalMemoryErrors(void)
{
  if ((int)failed_code_address == 0xFFFF) {
    telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status & ~ 0x20);
    telemetry_data.failed_code_address = (code_address_t)0x0000;
  }
  else {
    telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status | 0x20);
    telemetry_data.failed_code_address = failed_code_address;
  }
  if ((int)failed_data_address == 0xFFFF) {
    telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status & ~ 0x40);
    telemetry_data.failed_data_address = (data_address_t)0x0000;
  }
  else {
    telemetry_data.mode_status = (unsigned char)((int)telemetry_data.mode_status | 0x40);
    telemetry_data.failed_data_address = failed_data_address;
  }
  return;
}

void SetMemoryConfiguration(memory_configuration_t memory)
{
  switch (memory) {
    case PROM_e: ;
    break;
    case SRAM_e: ;
    break;
  }
  memory_mode = memory;
  return;
}

void PatchCode(memory_patch_variables_t *patch_variables)
{
  fptr_t patch_function;
  unsigned char old_checksum;
  unsigned char new_checksum;
  unsigned char patch_value;
  unsigned char temp_configuration;
  uint_least8_t i;
  memory_configuration_t tmp;
  tmp = GetMemoryConfiguration();
  temp_configuration = (unsigned char)tmp;
  SetMemoryConfiguration(PROM_e);
  new_checksum = (unsigned char)0;
  old_checksum = (unsigned char)0;
  i = (uint_least8_t)0;
  while (i < patch_variables->data_amount) {
    {
      unsigned char tmp_0;
      tmp_0 = Get_Data_Byte((data_address_t)((uint_least8_t)patch_variables->destination + i));
      old_checksum = (unsigned char)((int)old_checksum ^ (int)tmp_0);
      patch_value = *(patch_variables->source + i);
      new_checksum = (unsigned char)((int)new_checksum ^ (int)patch_value);
      Set_Data_Byte((data_address_t)((uint_least8_t)patch_variables->destination + i),
                    patch_value);
    }
    i ++;
  }
  reference_checksum = (unsigned char)((int)reference_checksum ^ ((int)old_checksum ^ (int)new_checksum));
  SetMemoryConfiguration((memory_configuration_t)temp_configuration);
  switch ((int)patch_variables->execution_command) {
    case 0: break;
    case 0x09: Reboot(soft_reset_e);
    break;
    case 0x37: Reboot(warm_reset_e);
    break;
    case 0x5A: patch_function = patch_variables->destination;
    Call_Patch(patch_function);
    break;
  }
  return;
}

memory_configuration_t GetMemoryConfiguration(void)
{
  return memory_mode;
}

void Switch_SU_On(sensor_number_t SU_Number, unsigned char *execution_result)
{
  switch (SU_Number) {
    case (sensor_number_t)1:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register | 0x10);
    *execution_result = (unsigned char)1;
    break;
    case (sensor_number_t)2:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register | 0x20);
    *execution_result = (unsigned char)2;
    break;
    case (sensor_number_t)3:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register | 0x40);
    *execution_result = (unsigned char)3;
    break;
    case (sensor_number_t)4:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register | 0x80);
    *execution_result = (unsigned char)4;
    break;
    default: *execution_result = (unsigned char)0;
    break;
  }
  Set_Data_Byte((data_address_t)0xFFD0,SU_ctrl_register);
  telemetry_data.SU_status[SU_Number - (sensor_number_t)1] = (unsigned char)(
  (int)telemetry_data.SU_status[SU_Number - (sensor_number_t)1] | 3);
  return;
}

void Switch_SU_Off(sensor_number_t SU_Number, unsigned char *execution_result)
{
  switch (SU_Number) {
    case (sensor_number_t)1:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register & ~ 0x10);
    *execution_result = (unsigned char)1;
    break;
    case (sensor_number_t)2:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register & ~ 0x20);
    *execution_result = (unsigned char)2;
    break;
    case (sensor_number_t)3:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register & ~ 0x40);
    *execution_result = (unsigned char)3;
    break;
    case (sensor_number_t)4:
    SU_ctrl_register = (unsigned char)((int)SU_ctrl_register & ~ 0x80);
    *execution_result = (unsigned char)4;
    break;
    default: *execution_result = (unsigned char)0;
    break;
  }
  Set_Data_Byte((data_address_t)0xFFD0,SU_ctrl_register);
  telemetry_data.SU_status[SU_Number - (sensor_number_t)1] = (unsigned char)(
  (int)telemetry_data.SU_status[SU_Number - (sensor_number_t)1] & ~ 3);
  return;
}

void EnableAnalogSwitch(sensor_index_t self_test_SU_index)
{
  SU_self_test_channel = (unsigned char)((int)SU_self_test_channel | (int)analog_switch_bit[self_test_SU_index]);
  Set_SU_Self_Test_Ch(SU_self_test_channel);
  return;
}

void DisableAnalogSwitch(sensor_index_t self_test_SU_index)
{
  SU_self_test_channel = (unsigned char)((int)SU_self_test_channel & ~ ((int)analog_switch_bit[self_test_SU_index]));
  Set_SU_Self_Test_Ch(SU_self_test_channel);
  return;
}

void SelectSelfTestChannel(unsigned char channel)
{
  unsigned char channel_selector_value[5];
  channel_selector_value[0] = (unsigned char)0x00;
  channel_selector_value[1] = (unsigned char)0x01;
  channel_selector_value[2] = (unsigned char)0x02;
  channel_selector_value[3] = (unsigned char)0x03;
  channel_selector_value[4] = (unsigned char)0x04;
  SU_self_test_channel = (unsigned char)(((int)SU_self_test_channel & 0xF8) | (int)channel_selector_value[channel]);
  Set_SU_Self_Test_Ch(SU_self_test_channel);
  return;
}

void ReadDelayCounters(delays_t *delay)
{
  unsigned char msb;
  unsigned char lsb;
  unsigned char tmp;
  unsigned char tmp_0;
  tmp = Get_MSB_Counter();
  msb = (unsigned char)((int)tmp & 0x0F);
  lsb = Get_LSB1_Counter();
  delay->FromPlasma1Plus = (unsigned short)(((int)msb << 8) | (int)lsb);
  tmp_0 = Get_MSB_Counter();
  msb = (unsigned char)((int)tmp_0 >> 4);
  lsb = Get_LSB2_Counter();
  delay->FromPlasma1Minus = (unsigned short)(((int)msb << 8) | (int)lsb);
  return;
}

unsigned char ReadRiseTimeCounter(void)
{
  unsigned char tmp_0;
  unsigned char tmp;
  tmp = Rise_Time_Counter();
  tmp_0 = Get_Data_Byte((data_address_t)tmp);
  return tmp_0;
}

void ResetDelayCounters(void)
{
  return;
}

void SetTriggerLevel(trigger_set_t *setting)
{
  setting->execution_result = (unsigned char)1;
  switch (setting->sensor_unit) {
    case (sensor_number_t)1: {
                               setting->base = (unsigned int)0xFFB0;
                               break;
                             }
    case (sensor_number_t)2: {
                               setting->base = (unsigned int)0xFFB3;
                               break;
                             }
    case (sensor_number_t)3: {
                               setting->base = (unsigned int)0xFFC0;
                               break;
                             }
    case (sensor_number_t)4: {
                               setting->base = (unsigned int)0xFFC3;
                               break;
                             }
    default: {
               setting->execution_result = (unsigned char)6;
               break;
             }
  }
  if ((int)setting->execution_result != 6) 
    switch (setting->channel) {
      case (channel_t)0:
      {
        Set_Data_Byte((data_address_t)(setting->base + (unsigned int)0),
                      setting->level);
        break;
      }
      case (channel_t)1:
      {
        Set_Data_Byte((data_address_t)(setting->base + (unsigned int)1),
                      setting->level);
        break;
      }
      case (channel_t)5:
      {
        Set_Data_Byte((data_address_t)(setting->base + (unsigned int)2),
                      setting->level);
        break;
      }
      default: {
                 setting->execution_result = (unsigned char)5;
                 break;
               }
    }
  return;
}

void SetTestPulseLevel(unsigned char level)
{
  Set_Test_Pulse_Level(level);
  return;
}

void GetVoltageStatus(voltage_status_t *v_status)
{
  v_status->V_down_bit = V_Down();
  v_status->HV_status = Get_Data_Byte((data_address_t)0xFF70);
  return;
}

void ResetPeakDetector(sensor_number_t unit)
{
  SignalPeakDetectorReset((unsigned char)((int)SU_ctrl_register & ~ (
                                          1 << (unit - (sensor_number_t)1))),
                          SU_ctrl_register);
  return;
}

void SelectStartSwitchLevel(unsigned char test_channel_0,
                            sensor_index_t self_test_SU_index)
{
  if ((int)test_channel_0 == 0) goto _LOR;
  else 
    if ((int)test_channel_0 == 4) _LOR:
                                  EnableAnalogSwitch(self_test_SU_index);
    else DisableAnalogSwitch(self_test_SU_index);
  return;
}

void SelectTriggerSwitchLevel(unsigned char test_channel_0,
                              sensor_index_t self_test_SU_index)
{
  if ((int)test_channel_0 == 0) DisableAnalogSwitch(self_test_SU_index);
  else 
    if ((int)test_channel_0 == 4) {
      DisableAnalogSwitch(self_test_SU_index);
      Set_SU_Self_Test_Ch(SU_self_test_channel);
    }
    else EnableAnalogSwitch(self_test_SU_index);
  return;
}

void WaitMail(incoming_mail_t *message);

unsigned char confirm_hit_result;
sensor_number_t self_test_SU_number = (sensor_number_t)0;
unsigned char test_channel;
SU_test_level_t test_level;
SU_state_t SU_state[4] = {off_e, off_e, off_e, off_e};
unsigned short ADC_result[5];
uint_least8_t hit_budget = (uint_least8_t)20;
uint_least8_t hit_budget_left = (uint_least8_t)20;
void InitHitTriggerTask(void)
{
  AttachInterrupt((unsigned char)5);
  Enable_Hit_Trigger();
  return;
}

void HandleHitTrigger(void)
{
  unsigned char initial_delay;
  unsigned char delay_limit;
  sensor_number_t trigger;
  channel_t CH_base;
  uint_least8_t i;
  unsigned char lsb;
  unsigned char msb;
  uint_least8_t conversion_try_count;
  initial_delay = (unsigned char)((uint_least8_t)((unsigned short)(((double)100 / 1.085 - (double)4) / (double)2)));
  delay_limit = (unsigned char)((uint_least8_t)((unsigned short)(((double)100 / 1.085 - (double)4) / (double)2)));
  WaitInterrupt((unsigned char)5,(unsigned char)255);
  if (hit_budget_left == (uint_least8_t)0) {
    if ((int)telemetry_data.hit_budget_exceedings < 255) telemetry_data.hit_budget_exceedings = (unsigned char)(
                                                         (int)telemetry_data.hit_budget_exceedings + 1);
    Disable_Hit_Trigger();
  }
  else {
    hit_budget_left --;
    confirm_hit_result = (unsigned char)1;
    ADC_channel_register = (unsigned char)((int)ADC_channel_register & 0xBF);
    Update_ADC_Channel_Reg(ADC_channel_register);
    Start_Conversion();
    conversion_try_count = (uint_least8_t)0;
    while (1) {
      if (conversion_try_count < (uint_least8_t)25) {
        unsigned char tmp;
        tmp = End_Of_ADC();
        if (! ((int)tmp != 0)) break;
      }
      else break;
      conversion_try_count ++;
    }
    if (self_test_SU_number != (sensor_number_t)0) {
      trigger = self_test_SU_number;
      if (SU_state[self_test_SU_number - (sensor_number_t)1] == (unsigned int)self_test_e) 
        trigger |= (unsigned int)0x40;
      else 
        if (SU_state[self_test_SU_number - (sensor_number_t)1] == (unsigned int)self_test_trigger_e) 
          SU_state[self_test_SU_number - (sensor_number_t)1] = self_test_e;
    }
    else {
      unsigned char tmp_0;
      unsigned char tmp_1;
      tmp_0 = Trigger_Source_0();
      tmp_1 = Trigger_Source_1();
      trigger = (sensor_number_t)(((int)tmp_0 + 2 * (int)tmp_1) + 1);
    }
    CH_base = (channel_t)(((int)(trigger - (sensor_number_t)1) & 2) * 12 + 
                          ((int)(trigger - (sensor_number_t)1) & 1) * 8);
    ShortDelay((uint_least8_t)initial_delay);
    ADC_channel_register = (unsigned char)((unsigned int)((int)ADC_channel_register & 0xC0) | CH_base);
    Update_ADC_Channel_Reg(ADC_channel_register);
    ShortDelay((uint_least8_t)delay_limit);
    i = (uint_least8_t)0;
    while (i < (uint_least8_t)5) {
      ShortDelay((uint_least8_t)delay_limit);
      Start_Conversion();
      ADC_channel_register = (unsigned char)((unsigned int)((int)ADC_channel_register & 0xC0) | (
                                             (CH_base + i) + (channel_t)1));
      Update_ADC_Channel_Reg(ADC_channel_register);
      conversion_try_count = (uint_least8_t)0;
      while (1) {
        if (conversion_try_count < (uint_least8_t)25) {
          unsigned char tmp_2;
          tmp_2 = End_Of_ADC();
          if (! ((int)tmp_2 != 0)) break;
        }
        else break;
        conversion_try_count ++;
      }
      if (conversion_try_count < (uint_least8_t)25) {
        msb = Get_Result();
        lsb = Get_Result();
        ADC_result[i] = (unsigned short)(((unsigned int)msb << 8) | (unsigned int)lsb);
      }
      else {
        trigger |= (unsigned int)0x80;
        ADC_result[i] = (unsigned short)0;
      }
      i ++;
    }
    SendTaskMail((unsigned char)1,(uint16_t)trigger,(unsigned char)0);
  }
  return;
}

void HitTriggerTask(void)
{
  InitHitTriggerTask();
  while (1) HandleHitTrigger();
  return;
}

static incoming_mail_t ACQ_mail;
static uint16_t trigger_unit;
void InitAcquisitionTask(void)
{
  ACQ_mail.mailbox_number = (unsigned char)1;
  ACQ_mail.message = & trigger_unit;
  ACQ_mail.timeout = (unsigned char)0;
  return;
}

void HandleAcquisition(void)
{
  unsigned char *checksum_pointer;
  unsigned char event_checksum;
  uint_least8_t i;
  event_record_t *event;
  delays_t delay_counters;
  int time_delay;
  SU_state_t state = off_e;
  WaitMail(& ACQ_mail);
  if ((int)trigger_unit & 0x80) SetModeStatusError((unsigned char)0x04);
  if ((int)trigger_unit == 1) goto _LOR_0;
  else 
    if ((int)trigger_unit == 2) goto _LOR_0;
    else 
      if ((int)trigger_unit == 3) goto _LOR_0;
      else 
        if ((int)trigger_unit == 4) {
          _LOR_0:
          {
            state = SU_state[(int)trigger_unit - 1];
            if (state == (unsigned int)self_test_e) goto _LOR;
            else 
              if (state == (unsigned int)acquisition_e) {
                unsigned char tmp;
                _LOR: tmp = Event_Flag();
                if ((int)tmp == 1) {
                  /*@ split event_queue_length; */ ;
                  event = GetFreeRecord();
                  event->SU_number = (unsigned char)((int)trigger_unit & 0xFF);
                  memcpy((void *)(& event->plasma_1_plus),
                         (void const *)(ADC_result),
                         sizeof(event->plasma_1_plus));
                  memcpy((void *)(& event->plasma_1_minus),
                         (void const *)(& ADC_result[1]),
                         sizeof(event->plasma_1_minus));
                  memcpy((void *)(& event->piezo_1),
                         (void const *)(& ADC_result[2]),
                         sizeof(event->piezo_1));
                  memcpy((void *)(& event->piezo_2),
                         (void const *)(& ADC_result[3]),
                         sizeof(event->piezo_2));
                  memcpy((void *)(& event->plasma_2_plus),
                         (void const *)(& ADC_result[4]),
                         sizeof(event->plasma_2_plus));
                  event->rise_time = ReadRiseTimeCounter();
                  ReadDelayCounters(& delay_counters);
                  memcpy((void *)(& event->delay_2),
                         (void const *)(& delay_counters.FromPlasma1Plus),
                         sizeof(event->delay_2));
                  memcpy((void *)(& event->delay_3),
                         (void const *)(& delay_counters.FromPlasma1Minus),
                         sizeof(event->delay_3));
                  time_delay = (int)delay_counters.FromPlasma1Plus - (int)delay_counters.FromPlasma1Minus;
                  if (time_delay > 127) event->delay_1 = (signed char)127;
                  else 
                    if (time_delay < -128) event->delay_1 = (signed char)(-128);
                    else event->delay_1 = (signed char)time_delay;
                  memcpy((void *)(& event->hit_time),
                         (void const *)(& internal_time),
                         sizeof(event->hit_time));
                  event->SU_temperature_1 = telemetry_data.SU_temperature[
                  (int)trigger_unit - 1][0];
                  event->SU_temperature_2 = telemetry_data.SU_temperature[
                  (int)trigger_unit - 1][1];
                  ClassifyEvent(event);
                  /*@ merge event_queue_length; */ ;
                  checksum_pointer = (unsigned char *)event;
                  event_checksum = (unsigned char)0;
                  i = (uint_least8_t)1;
                  while (i < sizeof(event_record_t)) {
                    event_checksum = (unsigned char)((int)event_checksum ^ (int)*checksum_pointer);
                    checksum_pointer ++;
                    i ++;
                  }
                  event->checksum = event_checksum;
                  RecordEvent();
                }
              }
          }
        }
  trigger_unit = (uint16_t)((int)trigger_unit & 0x07);
  WaitTimeout((unsigned char)1);
  ResetPeakDetector((sensor_number_t)trigger_unit);
  WaitTimeout((unsigned char)1);
  ResetPeakDetector((sensor_number_t)trigger_unit);
  WaitTimeout((unsigned char)1);
  ResetDelayCounters();
  return;
}

void AcquisitionTask(void)
{
  InitAcquisitionTask();
  while (1) HandleAcquisition();
  return;
}

void (*hit_task)(void) = & HitTriggerTask;
void (*acq_task)(void) = & AcquisitionTask;
void Switch_SU_State(sensor_unit_t *SU_setting)
{
  if (SU_state[SU_setting->SU_number - (sensor_number_t)1] != SU_setting->expected_source_state) 
    SU_setting->execution_result = (unsigned char)0;
  else 
    if (SU_setting->SU_state == (unsigned int)self_test_mon_e) {
      if (self_test_SU_number != (sensor_number_t)0) SU_setting->execution_result = (unsigned char)0;
      else goto _LAND;
    }
    else {
      _LAND:
      {
        if (SU_setting->SU_state == (unsigned int)self_test_mon_e) self_test_SU_number = SU_setting->SU_number;
        else 
          if (SU_setting->SU_number == self_test_SU_number) self_test_SU_number = (sensor_number_t)0;
        SU_state[SU_setting->SU_number - (sensor_number_t)1] = SU_setting->SU_state;
        SU_setting->execution_result = (unsigned char)1;
      }
    }
  return;
}

void Start_SU_SwitchingOn(sensor_index_t SU, unsigned char *exec_result)
{
  *exec_result = (unsigned char)1;
  if (SU_state[SU] != (unsigned int)off_e) *exec_result = (unsigned char)0;
  else {
    Switch_SU_On(SU + (sensor_index_t)1,exec_result);
    if ((sensor_index_t)*exec_result == SU + (sensor_index_t)1) SU_state[SU] = start_switching_e;
    else *exec_result = (unsigned char)0;
  }
  return;
}

static sensor_unit_t SetSensorUnitOff_SU_setting;
void SetSensorUnitOff(sensor_index_t SU, unsigned char *exec_result)
{
  Switch_SU_Off(SU + (sensor_index_t)1,exec_result);
  if ((sensor_index_t)*exec_result == SU + (sensor_index_t)1) {
    SetSensorUnitOff_SU_setting.SU_number = SU + (sensor_index_t)1;
    SetSensorUnitOff_SU_setting.expected_source_state = SU_state[SU];
    SetSensorUnitOff_SU_setting.SU_state = off_e;
    Switch_SU_State(& SetSensorUnitOff_SU_setting);
    *exec_result = (unsigned char)1;
  }
  else *exec_result = (unsigned char)0;
  return;
}

SU_state_t ReadSensorUnit(unsigned char SU_number)
{
  SU_state_t __retres;
  __retres = SU_state[(int)SU_number - 1];
  return __retres;
}

void Update_SU_State(sensor_index_t SU_index)
{
  if (SU_state[SU_index] == (unsigned int)start_switching_e) SU_state[SU_index] = switching_e;
  else 
    if (SU_state[SU_index] == (unsigned int)switching_e) {
      ResetPeakDetector(SU_index + (sensor_index_t)1);
      WaitTimeout((unsigned char)1);
      ResetPeakDetector(SU_index + (sensor_index_t)1);
      SU_state[SU_index] = on_e;
    }
  return;
}

TC_state_t TC_state;
SU_settings_t *SU_config[4] =
  {& telemetry_data.sensor_unit_1,
   & telemetry_data.sensor_unit_2,
   & telemetry_data.sensor_unit_3,
   & telemetry_data.sensor_unit_4};
telecommand_t previous_TC;
unsigned char TC_timeout = (unsigned char)0;
unsigned char TC_look_up[128];
memory_type_t memory_type;
unsigned char memory_transfer_buffer[32];
unsigned char address_MSB;
unsigned char address_LSB;
uint_least8_t memory_buffer_index = (uint_least8_t)0;
unsigned char write_checksum;
void InitTC_LookUp(void)
{
  uint_least8_t i;
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)128) {
    TC_look_up[i] = (unsigned char)0;
    i ++;
  }
  TC_look_up[0x01] = (unsigned char)2;
  TC_look_up[0x02] = (unsigned char)2;
  TC_look_up[0x03] = (unsigned char)2;
  TC_look_up[0x05] = (unsigned char)4;
  TC_look_up[0x06] = (unsigned char)2;
  TC_look_up[0x0C] = (unsigned char)1;
  TC_look_up[0x0D] = (unsigned char)1;
  TC_look_up[0x0E] = (unsigned char)1;
  TC_look_up[0x0F] = (unsigned char)1;
  TC_look_up[0x09] = (unsigned char)2;
  TC_look_up[0x0A] = (unsigned char)2;
  TC_look_up[0x0B] = (unsigned char)2;
  TC_look_up[0x10] = (unsigned char)1;
  TC_look_up[0x6F] = (unsigned char)1;
  TC_look_up[0x15] = (unsigned char)1;
  TC_look_up[0x6A] = (unsigned char)1;
  TC_look_up[0x1F] = (unsigned char)1;
  TC_look_up[0x60] = (unsigned char)1;
  TC_look_up[0x20] = (unsigned char)3;
  TC_look_up[0x30] = (unsigned char)3;
  TC_look_up[0x40] = (unsigned char)3;
  TC_look_up[0x50] = (unsigned char)3;
  TC_look_up[0x21] = (unsigned char)1;
  TC_look_up[0x31] = (unsigned char)1;
  TC_look_up[0x41] = (unsigned char)1;
  TC_look_up[0x51] = (unsigned char)1;
  TC_look_up[0x22] = (unsigned char)1;
  TC_look_up[0x32] = (unsigned char)1;
  TC_look_up[0x42] = (unsigned char)1;
  TC_look_up[0x52] = (unsigned char)1;
  TC_look_up[0x23] = (unsigned char)1;
  TC_look_up[0x33] = (unsigned char)1;
  TC_look_up[0x43] = (unsigned char)1;
  TC_look_up[0x53] = (unsigned char)1;
  TC_look_up[0x24] = (unsigned char)1;
  TC_look_up[0x34] = (unsigned char)1;
  TC_look_up[0x44] = (unsigned char)1;
  TC_look_up[0x54] = (unsigned char)1;
  TC_look_up[0x25] = (unsigned char)1;
  TC_look_up[0x35] = (unsigned char)1;
  TC_look_up[0x45] = (unsigned char)1;
  TC_look_up[0x55] = (unsigned char)1;
  TC_look_up[0x28] = (unsigned char)1;
  TC_look_up[0x38] = (unsigned char)1;
  TC_look_up[0x48] = (unsigned char)1;
  TC_look_up[0x58] = (unsigned char)1;
  TC_look_up[0x26] = (unsigned char)1;
  TC_look_up[0x36] = (unsigned char)1;
  TC_look_up[0x46] = (unsigned char)1;
  TC_look_up[0x56] = (unsigned char)1;
  TC_look_up[0x27] = (unsigned char)1;
  TC_look_up[0x37] = (unsigned char)1;
  TC_look_up[0x47] = (unsigned char)1;
  TC_look_up[0x57] = (unsigned char)1;
  TC_look_up[0x29] = (unsigned char)1;
  TC_look_up[0x39] = (unsigned char)1;
  TC_look_up[0x49] = (unsigned char)1;
  TC_look_up[0x59] = (unsigned char)1;
  TC_look_up[0x2A] = (unsigned char)1;
  TC_look_up[0x3A] = (unsigned char)1;
  TC_look_up[0x4A] = (unsigned char)1;
  TC_look_up[0x5A] = (unsigned char)1;
  TC_look_up[0x2B] = (unsigned char)1;
  TC_look_up[0x3B] = (unsigned char)1;
  TC_look_up[0x4B] = (unsigned char)1;
  TC_look_up[0x5B] = (unsigned char)1;
  TC_look_up[0x2C] = (unsigned char)1;
  TC_look_up[0x3C] = (unsigned char)1;
  TC_look_up[0x4C] = (unsigned char)1;
  TC_look_up[0x5C] = (unsigned char)1;
  TC_look_up[0x2D] = (unsigned char)1;
  TC_look_up[0x3D] = (unsigned char)1;
  TC_look_up[0x4D] = (unsigned char)1;
  TC_look_up[0x5D] = (unsigned char)1;
  TC_look_up[0x70] = (unsigned char)1;
  TC_look_up[0x71] = (unsigned char)1;
  TC_look_up[0x72] = (unsigned char)1;
  TC_look_up[0x73] = (unsigned char)1;
  TC_look_up[0x74] = (unsigned char)1;
  return;
}

void TC_InterruptService(void)
{
  unsigned char TC_address;
  unsigned char TC_code;
  uint16_t TC_word;
  unsigned char par8;
  unsigned char par4;
  unsigned char par2;
  unsigned char par1;
  unsigned char tmp_error_status;
  unsigned char tmp;
  tmp = TC_Timer_Overflow_Flag();
  if (! tmp) {
    telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 1);
    goto return_label;
  }
  if (TC_state == (unsigned int)SC_TM_e) goto _LOR;
  else 
    if (TC_state == (unsigned int)memory_dump_e) _LOR: goto return_label;
  Clear_TC_Timer_Overflow_Flag();
  TC_address = Read_TC_MSB();
  TC_code = Read_TC_LSB();
  TC_word = (uint16_t)((int)TC_address * 256 + (int)TC_code);
  if (TC_state == (unsigned int)memory_patch_e) {
    unsigned char tmp_0;
    tmp_0 = isr_send_message((unsigned char)0,TC_word);
    if ((int)tmp_0 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
    goto return_label;
  }
  if (TC_state == (unsigned int)register_TM_e) {
    TC_state = TC_handling_e;
    ResetInterruptMask((unsigned char)0x04);
  }
  par8 = (unsigned char)((int)TC_address ^ (int)TC_code);
  par4 = (unsigned char)(((int)par8 & 0x0F) ^ ((int)par8 >> 4));
  par2 = (unsigned char)(((int)par4 & 0x03) ^ ((int)par4 >> 2));
  par1 = (unsigned char)(((int)par2 & 0x01) ^ ((int)par2 >> 1));
  TC_address = (unsigned char)((int)TC_address >> 1);
  tmp_error_status = (unsigned char)0;
  if (par1) tmp_error_status = (unsigned char)((int)tmp_error_status | 2);
  else 
    switch ((int)TC_look_up[TC_address]) {
      unsigned char tmp_1;
      case 0: tmp_error_status = (unsigned char)((int)tmp_error_status | 1);
      break;
      case 1: tmp_1 = isr_send_message((unsigned char)0,TC_word);
      if ((int)tmp_1 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
      break;
      case 2: ;
      if ((int)TC_address != (int)TC_code) tmp_error_status = (unsigned char)(
                                           (int)tmp_error_status | 1);
      else {
        unsigned char tmp_2;
        tmp_2 = isr_send_message((unsigned char)0,TC_word);
        if ((int)tmp_2 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
      }
      break;
      case 3: ;
      if ((int)TC_code != 0x55) {
        if ((int)TC_code != 0x73) {
          if ((int)TC_code != 0x99) tmp_error_status = (unsigned char)(
                                    (int)tmp_error_status | 1);
          else goto _LAND_0;
        }
        else goto _LAND_0;
      }
      else {
        _LAND_0:
        {
          unsigned char tmp_3;
          tmp_3 = isr_send_message((unsigned char)0,TC_word);
          if ((int)tmp_3 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
        }
      }
      break;
      case 4: ;
      if ((int)TC_code & 1) goto _LOR_0;
      else 
        if ((int)TC_code > 0x74) _LOR_0:
                                 tmp_error_status = (unsigned char)((int)tmp_error_status | 1);
        else {
          unsigned char tmp_4;
          tmp_4 = isr_send_message((unsigned char)0,TC_word);
          if ((int)tmp_4 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
        }
      break;
    }
  if ((int)TC_address != 0x05) goto _LOR_1;
  else 
    if (tmp_error_status) {
      _LOR_1: ;
      if (((int)telemetry_data.error_status & (1 + 2)) == 0) {
        telemetry_data.TC_word = TC_word;
        memcpy((void *)(& telemetry_data.TC_time_tag),
               (void const *)(& internal_time),
               sizeof(telemetry_data.TC_time_tag));
      }
    }
  if (tmp_error_status) {
    telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | (int)tmp_error_status);
    Write_TM_MSB(telemetry_data.error_status);
    Write_TM_LSB(telemetry_data.mode_status);
    goto return_label;
  }
  if ((int)TC_address == 0x05) {
    memcpy((void *)(& telemetry_data.time),(void const *)(& internal_time),
           sizeof(telemetry_data.time));
    telemetry_pointer = (unsigned char *)(& telemetry_data) + (int)TC_code;
    telemetry_end_pointer = ((unsigned char *)(& telemetry_data) + 0x74) + 1;
    Write_TM_MSB(*telemetry_pointer);
    telemetry_pointer ++;
    Write_TM_LSB(*telemetry_pointer);
    telemetry_pointer ++;
    TC_state = register_TM_e;
    SetInterruptMask((unsigned char)0x04);
    if (telemetry_pointer > telemetry_end_pointer) telemetry_pointer = (unsigned char *)(& telemetry_data);
  }
  else 
    if ((int)TC_address == 0x06) 
      if (((int)telemetry_data.mode_status & 3) == 0) {
        telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 1);
        Write_TM_MSB(telemetry_data.error_status);
        Write_TM_LSB(telemetry_data.mode_status);
      }
      else {
        telemetry_pointer = (unsigned char *)(& science_data);
        telemetry_end_pointer = (unsigned char *)(& science_data.event[free_slot_index]) - 1;
        science_data.length = (unsigned short)((int)((unsigned short)(
                                               (telemetry_end_pointer - telemetry_pointer) + 1)) / 2);
        Write_TM_MSB(*telemetry_pointer);
        telemetry_pointer ++;
        Write_TM_LSB(*telemetry_pointer);
        telemetry_pointer ++;
        TC_state = SC_TM_e;
        SetInterruptMask((unsigned char)0x04);
      }
    else 
      if ((int)TC_address == 0x60) {
        if (TC_state != (unsigned int)read_memory_e) goto _LOR_2;
        else 
          if (((unsigned int)address_MSB << 8) + (unsigned int)TC_code > (unsigned int)(
              (0xFEFF - 32) + 1)) {
            _LOR_2:
            {
              telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 1);
              Write_TM_MSB(telemetry_data.error_status);
              Write_TM_LSB(telemetry_data.mode_status);
              TC_state = TC_handling_e;
            }
          }
          else {
            telemetry_pointer = Data_Pointer((uint16_t)((int)address_MSB * 256 + (int)TC_code));
            telemetry_end_pointer = telemetry_pointer + 32;
            Write_TM_MSB(telemetry_data.error_status);
            Write_TM_LSB(telemetry_data.mode_status);
            read_memory_checksum = (unsigned char)((int)tmp_error_status ^ (int)telemetry_data.mode_status);
            TC_state = memory_dump_e;
            SetInterruptMask((unsigned char)0x04);
          }
      }
      else {
        Write_TM_MSB(telemetry_data.error_status);
        Write_TM_LSB(telemetry_data.mode_status);
      }
  return_label: return;
}

unsigned char PatchExecCommandOk(unsigned char execution_command)
{
  unsigned char __retres;
  switch ((int)execution_command) {
    case 0: case 0x09: case 0x37: case 0x5A: __retres = (unsigned char)1;
    goto return_label;
  }
  __retres = (unsigned char)0;
  return_label: return __retres;
}

void MemoryPatch(telecommand_t *command)
{
  memory_patch_variables_t patch_info;
  data_address_t address;
  uint_least8_t i;
  unsigned char TC_msb;
  TC_msb = (unsigned char)((int)command->TC_word >> 8);
  write_checksum = (unsigned char)((int)write_checksum ^ (int)TC_msb);
  if (memory_buffer_index < (uint_least8_t)32) {
    write_checksum = (unsigned char)((int)write_checksum ^ (int)command->TC_code);
    memory_transfer_buffer[memory_buffer_index] = TC_msb;
    memory_buffer_index ++;
    memory_transfer_buffer[memory_buffer_index] = command->TC_code;
    memory_buffer_index ++;
    TC_timeout = (unsigned char)100;
  }
  else {
    if ((int)write_checksum == (int)command->TC_code) {
      address = (data_address_t)((unsigned int)address_MSB * (unsigned int)256 + (unsigned int)address_LSB);
      switch (memory_type) {
        case data_e: ;
        if ((int)address <= (0xFEFF - 32) + 1) {
          i = (uint_least8_t)0;
          while (i < (uint_least8_t)32) {
            Set_Data_Byte((data_address_t)((uint_least8_t)address + i),
                          memory_transfer_buffer[i]);
            i ++;
          }
        }
        else Set_TC_Error();
        break;
        case code_e: ;
        if ((int)address >= 0x1000) {
          if ((int)address <= (0x7FFF - 32) + 1) {
            unsigned char tmp;
            tmp = PatchExecCommandOk(TC_msb);
            if (tmp) {
              code_not_patched = (unsigned char)0;
              patch_info.source = memory_transfer_buffer;
              patch_info.destination = address;
              patch_info.data_amount = (uint_least8_t)32;
              patch_info.execution_command = TC_msb;
              PatchCode(& patch_info);
            }
            else goto _LAND_0;
          }
          else goto _LAND_0;
        }
        else _LAND_0: Set_TC_Error();
        break;
      }
    }
    else SetModeStatusError((unsigned char)0x10);
    TC_state = TC_handling_e;
  }
  return;
}

void WriteMemory(telecommand_t *command)
{
  write_checksum = (unsigned char)((int)write_checksum ^ (((int)command->TC_word >> 8) ^ (int)command->TC_code));
  if ((int)command->TC_address == 0x6F) {
    if (memory_type == (unsigned int)code_e) goto _LOR; else goto _LAND_0;
  }
  else {
    _LAND_0: ;
    if ((int)command->TC_address == 0x6A) {
      if (memory_type == (unsigned int)data_e) {
        _LOR:
        {
          TC_state = memory_patch_e;
          address_LSB = command->TC_code;
          memory_buffer_index = (uint_least8_t)0;
          TC_timeout = (unsigned char)100;
        }
      }
      else goto _LAND;
    }
    else {
      _LAND: {
               TC_state = TC_handling_e;
               Set_TC_Error();
             }
    }
  }
  return;
}

void UpdateTarget(telecommand_t *command)
{
  sensor_unit_t SU_setting;
  trigger_set_t new_threshold;
  dpu_time_t new_time;
  sensor_index_t SU_index;
  SU_index = (sensor_index_t)(((int)command->TC_address >> 4) - 2);
  switch ((int)command->TC_address) {
    DEBIE_mode_t tmp;
    case 0x70: case 0x71: case 0x72: case 0x73: case 0x74:
    telemetry_data.coefficient[(int)command->TC_address & 0x07] = command->TC_code;
    break;
    case 0x29: case 0x39: case 0x49: case 0x59:
    (SU_config[SU_index])->plasma_1_plus_to_minus_max_time = command->TC_code;
    break;
    case 0x2A: case 0x3A: case 0x4A: case 0x5A:
    (SU_config[SU_index])->plasma_1_plus_to_piezo_min_time = command->TC_code;
    break;
    case 0x2B: case 0x3B: case 0x4B: case 0x5B:
    (SU_config[SU_index])->plasma_1_plus_to_piezo_max_time = command->TC_code;
    break;
    case 0x2C: case 0x3C: case 0x4C: case 0x5C:
    (SU_config[SU_index])->plasma_1_minus_to_piezo_min_time = command->TC_code;
    break;
    case 0x2D: case 0x3D: case 0x4D: case 0x5D:
    (SU_config[SU_index])->plasma_1_minus_to_piezo_max_time = command->TC_code;
    break;
    case 0x24: case 0x34: case 0x44: case 0x54:
    (SU_config[SU_index])->plasma_1_plus_classification = command->TC_code;
    break;
    case 0x25: case 0x35: case 0x45: case 0x55:
    (SU_config[SU_index])->plasma_1_minus_classification = command->TC_code;
    break;
    case 0x28: case 0x38: case 0x48: case 0x58:
    (SU_config[SU_index])->plasma_2_plus_classification = command->TC_code;
    break;
    case 0x26: case 0x36: case 0x46: case 0x56:
    (SU_config[SU_index])->piezo_1_classification = command->TC_code;
    break;
    case 0x27: case 0x37: case 0x47: case 0x57:
    (SU_config[SU_index])->piezo_2_classification = command->TC_code;
    break;
    case 0x03: ClearErrorStatus();
    Clear_RTX_Errors();
    ClearSoftwareError();
    ClearModeStatusError();
    Clear_SU_Error();
    break;
    case 0x0F: new_time = (dpu_time_t)command->TC_code << 24;
    memcpy((void *)(& internal_time),(void const *)(& new_time),
           sizeof(internal_time));
    TC_timeout = (unsigned char)100;
    break;
    case 0x0E: ;
    if ((int)previous_TC.TC_address == 0x0F) {
      memcpy((void *)(& new_time),(void const *)(& internal_time),
             sizeof(new_time));
      new_time &= 0xFF000000;
      new_time |= (dpu_time_t)command->TC_code << 16;
      memcpy((void *)(& internal_time),(void const *)(& new_time),
             sizeof(internal_time));
      TC_timeout = (unsigned char)100;
    }
    else Set_TC_Error();
    break;
    case 0x0D: ;
    if ((int)previous_TC.TC_address == 0x0E) {
      memcpy((void *)(& new_time),(void const *)(& internal_time),
             sizeof(new_time));
      new_time &= 0xFFFF0000;
      new_time |= (dpu_time_t)command->TC_code << 8;
      memcpy((void *)(& internal_time),(void const *)(& new_time),
             sizeof(internal_time));
      TC_timeout = (unsigned char)100;
    }
    else Set_TC_Error();
    break;
    case 0x0C: ;
    if ((int)previous_TC.TC_address == 0x0D) {
      memcpy((void *)(& new_time),(void const *)(& internal_time),
             sizeof(new_time));
      new_time &= 0xFFFFFF00;
      new_time |= (dpu_time_t)command->TC_code;
      memcpy((void *)(& internal_time),(void const *)(& new_time),
             sizeof(internal_time));
    }
    else Set_TC_Error();
    break;
    case 0x0A: telemetry_data.watchdog_failures = (unsigned char)0;
    break;
    case 0x0B: telemetry_data.checksum_failures = (unsigned char)0;
    break;
    case 0x20: case 0x30: case 0x40: case 0x50: tmp = GetMode();
    if ((int)tmp != 2) {
      SU_setting.SU_number = SU_index + (sensor_index_t)1;
      switch ((int)command->TC_code) {
        case 0x55:
        Start_SU_SwitchingOn(SU_index,& SU_setting.execution_result);
        break;
        case 0x73: SetSensorUnitOff(SU_index,& SU_setting.execution_result);
        break;
        case 0x99: SU_setting.SU_state = self_test_mon_e;
        SU_setting.expected_source_state = on_e;
        Switch_SU_State(& SU_setting);
        break;
      }
      if ((int)SU_setting.execution_result == 0) Set_TC_Error();
    }
    else Set_TC_Error();
    break;
    case 0x21: new_threshold.sensor_unit = (sensor_number_t)1;
    new_threshold.channel = (channel_t)0;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_1.plasma_1_plus_threshold = command->TC_code;
    break;
    case 0x31: new_threshold.sensor_unit = (sensor_number_t)2;
    new_threshold.channel = (channel_t)0;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_2.plasma_1_plus_threshold = command->TC_code;
    break;
    case 0x41: new_threshold.sensor_unit = (sensor_number_t)3;
    new_threshold.channel = (channel_t)0;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_3.plasma_1_plus_threshold = command->TC_code;
    break;
    case 0x51: new_threshold.sensor_unit = (sensor_number_t)4;
    new_threshold.channel = (channel_t)0;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_4.plasma_1_plus_threshold = command->TC_code;
    break;
    case 0x22: new_threshold.sensor_unit = (sensor_number_t)1;
    new_threshold.channel = (channel_t)1;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_1.plasma_1_minus_threshold = command->TC_code;
    break;
    case 0x32: new_threshold.sensor_unit = (sensor_number_t)2;
    new_threshold.channel = (channel_t)1;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_2.plasma_1_minus_threshold = command->TC_code;
    break;
    case 0x42: new_threshold.sensor_unit = (sensor_number_t)3;
    new_threshold.channel = (channel_t)1;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_3.plasma_1_minus_threshold = command->TC_code;
    break;
    case 0x52: new_threshold.sensor_unit = (sensor_number_t)4;
    new_threshold.channel = (channel_t)1;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_4.plasma_1_minus_threshold = command->TC_code;
    break;
    case 0x23: new_threshold.sensor_unit = (sensor_number_t)1;
    new_threshold.channel = (channel_t)5;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_1.piezo_threshold = command->TC_code;
    break;
    case 0x33: new_threshold.sensor_unit = (sensor_number_t)2;
    new_threshold.channel = (channel_t)5;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_2.piezo_threshold = command->TC_code;
    break;
    case 0x43: new_threshold.sensor_unit = (sensor_number_t)3;
    new_threshold.channel = (channel_t)5;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_3.piezo_threshold = command->TC_code;
    break;
    case 0x53: new_threshold.sensor_unit = (sensor_number_t)4;
    new_threshold.channel = (channel_t)5;
    new_threshold.level = command->TC_code;
    SetTriggerLevel(& new_threshold);
    telemetry_data.sensor_unit_4.piezo_threshold = command->TC_code;
    break;
    default: break;
  }
  return;
}

void ExecuteCommand(telecommand_t *command)
{
  sensor_unit_t SU_setting;
  unsigned char error_flag;
  sensor_number_t i;
  switch ((int)command->TC_address) {
    DEBIE_mode_t tmp;
    DEBIE_mode_t tmp_0;
    DEBIE_mode_t tmp_3;
    DEBIE_mode_t tmp_4;
    case 0x06: break;
    case 0x05: break;
    case 0x1F: address_MSB = command->TC_code;
    TC_state = read_memory_e;
    break;
    case 0x10: tmp = GetMode();
    if ((int)tmp == 1) {
      address_MSB = command->TC_code;
      memory_type = code_e;
      TC_timeout = (unsigned char)100;
      write_checksum = (unsigned char)(((int)command->TC_word >> 8) ^ (int)command->TC_code);
      TC_state = write_memory_e;
    }
    else Set_TC_Error();
    break;
    case 0x15: tmp_0 = GetMode();
    if ((int)tmp_0 == 1) {
      address_MSB = command->TC_code;
      memory_type = data_e;
      TC_timeout = (unsigned char)100;
      write_checksum = (unsigned char)(((int)command->TC_word >> 8) ^ (int)command->TC_code);
      TC_state = write_memory_e;
    }
    else Set_TC_Error();
    break;
    case 0x60: break;
    case 0x6F: case 0x6A: ;
    if (TC_state != (unsigned int)write_memory_e) Set_TC_Error();
    break;
    case 0x09: Reboot(soft_reset_e);
    break;
    case 0x01: error_flag = (unsigned char)0;
    i = (sensor_number_t)1;
    while (i <= (sensor_number_t)4) {
      {
        SU_state_t tmp_1;
        tmp_1 = ReadSensorUnit((unsigned char)i);
        if (tmp_1 == (unsigned int)start_switching_e) goto _LOR;
        else {
          SU_state_t tmp_2;
          tmp_2 = ReadSensorUnit((unsigned char)i);
          if (tmp_2 == (unsigned int)switching_e) _LOR:
                                                  error_flag = (unsigned char)1;
        }
      }
      i ++;
    }
    tmp_3 = GetMode();
    if ((int)tmp_3 == 1) {
      if ((int)error_flag == 0) {
        SU_setting.SU_state = acquisition_e;
        SU_setting.expected_source_state = on_e;
        SU_setting.SU_number = (sensor_number_t)1;
        Switch_SU_State(& SU_setting);
        SU_setting.SU_number = (sensor_number_t)2;
        Switch_SU_State(& SU_setting);
        SU_setting.SU_number = (sensor_number_t)3;
        Switch_SU_State(& SU_setting);
        SU_setting.SU_number = (sensor_number_t)4;
        Switch_SU_State(& SU_setting);
        ResetDelayCounters();
        SetMode((DEBIE_mode_t)2);
      }
      else goto _LAND;
    }
    else _LAND: Set_TC_Error();
    break;
    case 0x02: tmp_4 = GetMode();
    if ((int)tmp_4 == 2) {
      SU_setting.SU_state = on_e;
      SU_setting.expected_source_state = acquisition_e;
      SU_setting.SU_number = (sensor_number_t)1;
      Switch_SU_State(& SU_setting);
      SU_setting.SU_number = (sensor_number_t)2;
      Switch_SU_State(& SU_setting);
      SU_setting.SU_number = (sensor_number_t)3;
      Switch_SU_State(& SU_setting);
      SU_setting.SU_number = (sensor_number_t)4;
      Switch_SU_State(& SU_setting);
      SetMode((DEBIE_mode_t)1);
    }
    else Set_TC_Error();
    break;
    default: UpdateTarget(command);
  }
  return;
}

static incoming_mail_t TC_mail;
static telecommand_t received_command;
void InitTelecommandTask(void)
{
  InitTC_LookUp();
  TC_state = TC_handling_e;
  TC_mail.mailbox_number = (unsigned char)0;
  TC_mail.message = & received_command.TC_word;
  previous_TC.TC_word = (uint16_t)0;
  previous_TC.TC_address = (unsigned char)0x00;
  previous_TC.TC_code = (unsigned char)0;
  DisableInterrupt((unsigned char)2);
  EnableInterrupt((unsigned char)0);
  return;
}

void HandleTelecommand(void)
{
  TC_mail.timeout = TC_timeout;
  WaitMail(& TC_mail);
  TC_timeout = (unsigned char)0;
  if ((int)TC_mail.execution_result == 4) {
    previous_TC.TC_word = (uint16_t)0;
    previous_TC.TC_address = (unsigned char)0x00;
    previous_TC.TC_code = (unsigned char)0;
    if (TC_state != (unsigned int)TC_handling_e) Set_TC_Error();
    TC_state = TC_handling_e;
  }
  else 
    if ((int)TC_mail.execution_result == 1) {
      received_command.TC_address = (unsigned char)((int)received_command.TC_word >> 9);
      received_command.TC_code = (unsigned char)((int)received_command.TC_word & 255);
      if (TC_state == (unsigned int)SC_TM_e) goto _LOR;
      else 
        if (TC_state == (unsigned int)memory_dump_e) {
          _LOR: ;
          if ((int)received_command.TC_word == 0xFFFF) {
            DisableInterrupt((unsigned char)2);
            if (TC_state == (unsigned int)SC_TM_e) ClearEvents();
            TC_state = TC_handling_e;
          }
          else goto _LAND;
        }
        else 
          _LAND:
          switch (TC_state) {
            case read_memory_e: ;
            if ((int)received_command.TC_address != 0x60) {
              Set_TC_Error();
              TC_state = TC_handling_e;
            }
            break;
            case write_memory_e: WriteMemory(& received_command);
            break;
            case memory_patch_e: MemoryPatch(& received_command);
            break;
            case TC_handling_e: ExecuteCommand(& received_command);
            break;
          }
      previous_TC = received_command;
    }
  return;
}

void TelecommandExecutionTask(void)
{
  InitTelecommandTask();
  while (1) HandleTelecommand();
  return;
}

void Set_TC_Error(void)
{
  telemetry_data.error_status = (unsigned char)((int)telemetry_data.error_status | 1);
  return;
}

void (*TC_task)(void) = & TelecommandExecutionTask;
telemetry_data_t telemetry_data;
science_data_file_t science_data;
uint_least16_t max_events;
uint_least8_t event_queue_length;
unsigned char *telemetry_pointer;
unsigned char *telemetry_end_pointer;
unsigned int free_slot_index;
unsigned char read_memory_checksum;
event_record_t event_queue[10];
event_record_t *GetFreeRecord(void)
{
  event_record_t *__retres;
  if (event_queue_length < (uint_least8_t)10) {
    __retres = & event_queue[event_queue_length];
    goto return_label;
  }
  else {
    __retres = & event_queue[10 - 1];
    goto return_label;
  }
  return_label: return __retres;
}

void TM_InterruptService(void)
{
  unsigned char tm_byte;
  if (telemetry_pointer == (unsigned char *)(& telemetry_data.time)) 
    memcpy((void *)(& telemetry_data.time),(void const *)(& internal_time),
           sizeof(telemetry_data.time));
  if (telemetry_pointer < telemetry_end_pointer) {
    tm_byte = *telemetry_pointer;
    Write_TM_MSB(tm_byte);
    read_memory_checksum = (unsigned char)((int)read_memory_checksum ^ (int)tm_byte);
    telemetry_pointer ++;
    tm_byte = *telemetry_pointer;
    Write_TM_LSB(tm_byte);
    read_memory_checksum = (unsigned char)((int)read_memory_checksum ^ (int)tm_byte);
    telemetry_pointer ++;
  }
  else 
    if (TC_state == (unsigned int)register_TM_e) {
      telemetry_pointer = (unsigned char *)(& telemetry_data);
      Write_TM_MSB(*telemetry_pointer);
      telemetry_pointer ++;
      Write_TM_LSB(*telemetry_pointer);
      telemetry_pointer ++;
    }
    else 
      if (TC_state == (unsigned int)memory_dump_e) {
        unsigned char tmp;
        Write_TM_MSB((unsigned char)0);
        Write_TM_LSB(read_memory_checksum);
        tmp = isr_send_message((unsigned char)0,(uint16_t)0xFFFF);
        if ((int)tmp == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
      }
      else {
        unsigned char tmp_0;
        tmp_0 = isr_send_message((unsigned char)0,(uint16_t)0xFFFF);
        if ((int)tmp_0 == 9) telemetry_data.isr_send_message_error = (unsigned char)0;
      }
  return;
}

dpu_time_t GetElapsedTime(unsigned int event_number)
{
  dpu_time_t hit_time;
  memcpy((void *)(& hit_time),
         (void const *)(& science_data.event[event_number].hit_time),
         sizeof(hit_time));
  return hit_time;
}

unsigned int FindMinQualityRecord(void)
{
  unsigned int min_quality_number;
  unsigned int min_quality_location;
  dpu_time_t min_time;
  dpu_time_t time;
  uint_least16_t i;
  min_time = GetElapsedTime((unsigned int)0);
  min_quality_number = (unsigned int)science_data.event[0].quality_number;
  min_quality_location = (unsigned int)0;
  i = (uint_least16_t)1;
  while (i < max_events) {
    time = GetElapsedTime(i);
    if ((unsigned int)science_data.event[i].quality_number < min_quality_number) {
      min_time = time;
      min_quality_number = (unsigned int)science_data.event[i].quality_number;
      min_quality_location = i;
    }
    else 
      if ((unsigned int)science_data.event[i].quality_number == min_quality_number) 
        if (time < min_time) {
          min_time = time;
          min_quality_location = i;
        }
    i ++;
  }
  return min_quality_location;
}

void IncrementCounters(sensor_index_t sensor_unit,
                       unsigned char classification)
{
  unsigned char counter;
  unsigned char new_checksum;
  if ((int)telemetry_data.SU_hits[sensor_unit] < 0xFFFF) telemetry_data.SU_hits[sensor_unit] = (uint16_t)(
                                                         (int)telemetry_data.SU_hits[sensor_unit] + 1);
  if ((int)science_data.event_counter[sensor_unit][classification] < 0xFF) {
    counter = science_data.event_counter[sensor_unit][classification];
    new_checksum = (unsigned char)((int)science_data.counter_checksum ^ (int)counter);
    counter = (unsigned char)((int)counter + 1);
    new_checksum = (unsigned char)((int)new_checksum ^ (int)counter);
    science_data.event_counter[sensor_unit][classification] = counter;
    science_data.counter_checksum = new_checksum;
  }
  return;
}

void RecordEvent(void)
{
  uint_least16_t record_index;
  record_index = free_slot_index;
  if (record_index >= max_events) 
    if (TC_state != (unsigned int)SC_TM_e) record_index = FindMinQualityRecord
                                           ();
  if (TC_state == (unsigned int)SC_TM_e) {
    if (event_queue_length < (uint_least8_t)10) event_queue_length ++;
  }
  else {
    /*@ widen_hints global:free_slot_index, 1261; */
    if (free_slot_index < max_events) {
      record_index = free_slot_index;
      science_data.event[record_index].quality_number = (unsigned char)0;
      free_slot_index ++;
    }
    IncrementCounters((sensor_index_t)((int)event_queue[0].SU_number - 1),
                      event_queue[0].classification);
    if ((int)event_queue[0].quality_number >= (int)science_data.event[record_index].quality_number) 
      science_data.event[record_index] = event_queue[0];
  }
  return;
}

void ClearEvents(void)
{
  uint_least8_t i;
  uint_least8_t j;
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)4) {
    telemetry_data.SU_hits[i] = (uint16_t)0;
    j = (uint_least8_t)0;
    while (j < (uint_least8_t)10) {
      science_data.event_counter[i][j] = (unsigned char)0;
      j ++;
    }
    i ++;
  }
  i = (uint_least8_t)0;
  while (i < event_queue_length) {
    science_data.event[i] = event_queue[i];
    IncrementCounters((sensor_index_t)((int)event_queue[i].SU_number - 1),
                      event_queue[i].classification);
    i ++;
  }
  free_slot_index = event_queue_length;
  event_queue_length = (uint_least8_t)0;
  science_data.counter_checksum = (unsigned char)0;
  science_data.not_used = (unsigned char)0;
  return;
}

void ResetEventQueueLength(void)
{
  event_queue_length = (uint_least8_t)0;
  return;
}

unsigned char EA;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format);

void CreateTask(task_info_t *new_task)
{
  printf("CreateTask %d\n",(int)new_task->rtx_task_number); /* printf_va_2 */
  switch ((int)new_task->rtx_task_number) {
    case 1: InitTelecommandTask();
    break;
    case 2: InitAcquisitionTask();
    break;
    case 3: InitHitTriggerTask();
    break;
    default: printf("CreateTask: unknown task number\n"); /* printf_va_3 */
    break;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, int param0);

void WaitInterval(unsigned char time)
{
  printf("WaitInterval %d\n",(int)time); /* printf_va_4 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

void WaitTimeout(unsigned char time)
{
  printf("WaitTimeout %d\n",(int)time); /* printf_va_5 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_6(char const * restrict format, unsigned int param0);

void SetTimeSlice(unsigned int time_slice)
{
  printf("SetTimeSlice %u\n",time_slice); /* printf_va_6 */
  return;
}

static unsigned int ad_converting = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, unsigned int param0);

void ShortDelay(uint_least8_t delay_loops)
{
  printf("ShortDelay %u\n",delay_loops); /* printf_va_7 */
  ad_converting = (unsigned int)0;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_8(char const * restrict format, int param0, int param1,
                int param2);

unsigned char isr_send_message(unsigned char mailbox, uint16_t message)
{
  unsigned char __retres;
  printf("isr_send_message to %hhu, message %hu = 0x%hx\n",(int)mailbox,
         (int)message,(int)message); /* printf_va_8 */
  SendTaskMail(mailbox,message,(unsigned char)0);
  __retres = (unsigned char)8;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, int param0);

void AttachInterrupt(unsigned char ISR_VectorNumber)
{
  printf("AttachInterrupt %d\n",(int)ISR_VectorNumber); /* printf_va_9 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, int param0);

void EnableInterrupt(unsigned char ISR_VectorNumber)
{
  printf("EnableInterrupt %d\n",(int)ISR_VectorNumber); /* printf_va_10 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, int param0);

void DisableInterrupt(unsigned char ISR_VectorNumber)
{
  printf("DisableInterrupt %d\n",(int)ISR_VectorNumber); /* printf_va_11 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_12(char const * restrict format, int param0);

signed char SetInterruptMask(unsigned char ISR_MaskNumber)
{
  signed char __retres;
  printf("SetInterruptMask 0x%hhx\n",(int)ISR_MaskNumber); /* printf_va_12 */
  __retres = (signed char)0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_13(char const * restrict format, int param0);

signed char ResetInterruptMask(unsigned char ISR_MaskNumber)
{
  signed char __retres;
  printf("ResetInterruptMask 0x%hhx\n",(int)ISR_MaskNumber); /* printf_va_13 */
  __retres = (signed char)0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_14(char const * restrict format, int param0, int param1);

void WaitInterrupt(unsigned char ISR_VectorNumber, unsigned char timer)
{
  printf("WaitInterrupt %d, time %d\n",(int)ISR_VectorNumber,(int)timer); /* printf_va_14 */
  return;
}

static uint16_t mail_message[8];
static int mail_count[8] = {0, 0, 0, 0, 0, 0, 0, 0};
static int mail_overflows = 0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_15(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_16(char const * restrict format, int param0, int param1);

void SendTaskMail(unsigned char mailbox, uint16_t message,
                  unsigned char timeout)
{
  printf("SendTaskMail to %d, message %d, timeout %d\n",(int)mailbox,
         (int)message,(int)timeout); /* printf_va_15 */
  if (mail_count[mailbox] == 0) mail_message[mailbox] = message;
  else {
    printf("Overflow on mailbox %d, already %d message(s)\n",(int)mailbox,
           mail_count[mailbox]); /* printf_va_16 */
    mail_overflows ++;
  }
  (mail_count[mailbox]) ++;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_17(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_18(char const * restrict format, int param0, int param1,
                 int param2);

void WaitMail(incoming_mail_t *message)
{
  printf("WaitMail from %d, timeout %d\n",(int)message->mailbox_number,
         (int)message->timeout); /* printf_va_17 */
  if (mail_count[message->mailbox_number] > 0) {
    message->wait_result = (signed char)1;
    message->execution_result = (signed char)1;
    *(message->message) = mail_message[message->mailbox_number];
    printf("Message from %d is %d = 0x%hhx\n",(int)message->mailbox_number,
           (int)*(message->message),(int)*(message->message)); /* printf_va_18 */
    (mail_count[message->mailbox_number]) --;
  }
  else {
    message->wait_result = (signed char)4;
    message->execution_result = (signed char)4;
    *(message->message) = (uint16_t)0;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_19(char const * restrict format, int param0, int param1);

static void FlushMail(unsigned char mailbox)
{
  printf("FlushMail from box %d, which had %d messages.\n",(int)mailbox,
         mail_count[mailbox]); /* printf_va_19 */
  mail_count[mailbox] = 0;
  return;
}

static unsigned int check_current_errors = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_20(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_21(char const * restrict format);

unsigned char Check_Current(unsigned char bits)
{
  unsigned char val;
  printf("Check_Current 0x%hhx\n",(int)bits); /* printf_va_20 */
  switch ((int)bits) {
    case 3: val = (unsigned char)1;
    break;
    case 12: val = (unsigned char)4;
    break;
    case 48: val = (unsigned char)16;
    break;
    case 192: val = (unsigned char)64;
    break;
    default: val = (unsigned char)0;
    printf("Check_Current param error\n"); /* printf_va_21 */
    break;
  }
  if (check_current_errors > (unsigned int)0) {
    val = (unsigned char)(~ ((int)val));
    check_current_errors --;
  }
  return val;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_22(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_23(char const * restrict format);

void Reboot(reset_class_t boot_type)
{
  printf("Reboot %u\n",boot_type); /* printf_va_22 */
  if (boot_type == (unsigned int)checksum_reset_e) reference_checksum = code_checksum;
  printf("Target Reboot.\n"); /* printf_va_23 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_24(char const * restrict format, int param0);

unsigned char TestMemBits(data_address_t address)
{
  unsigned char __retres;
  printf("TestMemBits 0x%hhx\n",(int)address); /* printf_va_24 */
  __retres = (unsigned char)0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_25(char const * restrict format, int param0,
                 unsigned int param1);

unsigned char TestMemData(data_address_t start, uint_least8_t bytes)
{
  unsigned char __retres;
  printf("TestMemData start 0x%hhx, bytes %u\n",(int)start,bytes); /* printf_va_25 */
  __retres = (unsigned char)0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_26(char const * restrict format, int param0,
                 unsigned int param1);

unsigned char TestMemSeq(data_address_t start, uint_least8_t bytes)
{
  unsigned char __retres;
  printf("TestMemSeq start 0x%hhx, bytes %u\n",(int)start,bytes); /* printf_va_26 */
  __retres = (unsigned char)0;
  return __retres;
}

static unsigned char tc_msb;
static unsigned char tc_lsb;
static uint16_t tc_word;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_27(char const * restrict format);

unsigned char Read_TC_MSB(void)
{
  printf("Read_TC_MSB\n"); /* printf_va_27 */
  return tc_msb;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_28(char const * restrict format);

unsigned char Read_TC_LSB(void)
{
  printf("Read_TC_LSB\n"); /* printf_va_28 */
  return tc_lsb;
}

static unsigned char tm_msb;
static unsigned char tm_lsb;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_29(char const * restrict format, int param0, int param1);

void Write_TM_LSB(unsigned char value)
{
  printf("Write_TM_LSB %d = 0x%hhx\n",(int)value,(int)value); /* printf_va_29 */
  tm_lsb = value;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_30(char const * restrict format, int param0, int param1);

void Write_TM_MSB(unsigned char value)
{
  printf("Write_TM_MSB %d = 0x%hhx\n",(int)value,(int)value); /* printf_va_30 */
  tm_msb = value;
  return;
}

static unsigned char tc_timer_overflow = (unsigned char)1;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_31(char const * restrict format);

unsigned char TC_Timer_Overflow_Flag(void)
{
  printf("TC_Timer_Overflow_Flag\n"); /* printf_va_31 */
  return tc_timer_overflow;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_32(char const * restrict format);

void Clear_TC_Timer_Overflow_Flag(void)
{
  printf("Clear_TC_Timer_Overflow_Flag\n"); /* printf_va_32 */
  tc_timer_overflow = (unsigned char)0;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_33(char const * restrict format);

void Set_TC_Timer_Overflow_Flag(void)
{
  printf("Set_TC_Timer_Overflow_Flag\n"); /* printf_va_33 */
  tc_timer_overflow = (unsigned char)1;
  return;
}

static ad_limit_t ad_limit[0x28] =
  {{.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff},
   {.min = (uint16_t)0, .max = (uint16_t)0xffff}};
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_34(char const * restrict format);

void Set_AD_Unlimited(void)
{
  uint_least8_t c;
  printf("Set AD Unlimited\n"); /* printf_va_34 */
  c = (uint_least8_t)0;
  while (c < (uint_least8_t)0x28) {
    ad_limit[c].min = (uint16_t)0;
    ad_limit[c].max = (uint16_t)0xffff;
    c ++;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_35(char const * restrict format);

void Set_AD_Nominal(void)
{
  printf("Set AD Nominal\n"); /* printf_va_35 */
  ad_limit[16].min = (uint16_t)0xba00;
  ad_limit[16].max = (uint16_t)0xe4ff;
  ad_limit[17].min = (uint16_t)0xba00;
  ad_limit[17].max = (uint16_t)0xe4ff;
  ad_limit[20].min = (uint16_t)0x0d00;
  ad_limit[20].max = (uint16_t)0x22ff;
  ad_limit[21].min = (uint16_t)0x0d00;
  ad_limit[21].max = (uint16_t)0x22ff;
  ad_limit[18].min = (uint16_t)0xa800;
  ad_limit[18].max = (uint16_t)0xe3ff;
  ad_limit[22].min = (uint16_t)0x0e00;
  ad_limit[22].max = (uint16_t)0x2cff;
  ad_limit[19].min = (uint16_t)0xba00;
  ad_limit[19].max = (uint16_t)0xe4ff;
  ad_limit[5].min = (uint16_t)0x0000;
  ad_limit[5].max = (uint16_t)0xfaff;
  ad_limit[6].min = (uint16_t)0x0000;
  ad_limit[6].max = (uint16_t)0xf4ff;
  ad_limit[13].min = (uint16_t)0x0000;
  ad_limit[13].max = (uint16_t)0xfaff;
  ad_limit[14].min = (uint16_t)0x0000;
  ad_limit[14].max = (uint16_t)0xf4ff;
  ad_limit[29].min = (uint16_t)0x0000;
  ad_limit[29].max = (uint16_t)0xfaff;
  ad_limit[30].min = (uint16_t)0x0000;
  ad_limit[30].max = (uint16_t)0xf4ff;
  ad_limit[37].min = (uint16_t)0x0000;
  ad_limit[37].max = (uint16_t)0xfaff;
  ad_limit[38].min = (uint16_t)0x0000;
  ad_limit[38].max = (uint16_t)0xf4ff;
  return;
}

static int ad_conv_timer;
static int ad_conv_delay[6];
static unsigned int ad_conv_num = (unsigned int)0;
static unsigned char ad_random[319] =
  {(unsigned char)0x6a,
   (unsigned char)0xde,
   (unsigned char)0xba,
   (unsigned char)0x90,
   (unsigned char)0xf2,
   (unsigned char)0x18,
   (unsigned char)0x48,
   (unsigned char)0xf3,
   (unsigned char)0x9e,
   (unsigned char)0x2b,
   (unsigned char)0x31,
   (unsigned char)0xdb,
   (unsigned char)0xe0,
   (unsigned char)0x7e,
   (unsigned char)0xc6,
   (unsigned char)0x18,
   (unsigned char)0x43,
   (unsigned char)0xd0,
   (unsigned char)0xd7,
   (unsigned char)0x6e,
   (unsigned char)0xbc,
   (unsigned char)0xee,
   (unsigned char)0x93,
   (unsigned char)0x9a,
   (unsigned char)0x06,
   (unsigned char)0xb2,
   (unsigned char)0x3d,
   (unsigned char)0x1f,
   (unsigned char)0xc1,
   (unsigned char)0x51,
   (unsigned char)0x66,
   (unsigned char)0x69,
   (unsigned char)0xbf,
   (unsigned char)0x1c,
   (unsigned char)0x9c,
   (unsigned char)0xfc,
   (unsigned char)0x9b,
   (unsigned char)0xf7,
   (unsigned char)0xf2,
   (unsigned char)0xd0,
   (unsigned char)0xf4,
   (unsigned char)0x26,
   (unsigned char)0x60,
   (unsigned char)0x69,
   (unsigned char)0xc4,
   (unsigned char)0xd9,
   (unsigned char)0xdb,
   (unsigned char)0xd4,
   (unsigned char)0xe7,
   (unsigned char)0x2b,
   (unsigned char)0x8a,
   (unsigned char)0xea,
   (unsigned char)0x9f,
   (unsigned char)0xab,
   (unsigned char)0x40,
   (unsigned char)0x3e,
   (unsigned char)0xc3,
   (unsigned char)0xd8,
   (unsigned char)0x21,
   (unsigned char)0x61,
   (unsigned char)0x3b,
   (unsigned char)0x0f,
   (unsigned char)0xc1,
   (unsigned char)0x49,
   (unsigned char)0xd3,
   (unsigned char)0x09,
   (unsigned char)0x9a,
   (unsigned char)0x4d,
   (unsigned char)0x33,
   (unsigned char)0x52,
   (unsigned char)0x7b,
   (unsigned char)0x8e,
   (unsigned char)0x7e,
   (unsigned char)0x7b,
   (unsigned char)0x6a,
   (unsigned char)0x88,
   (unsigned char)0x4f,
   (unsigned char)0x84,
   (unsigned char)0xa2,
   (unsigned char)0xb4,
   (unsigned char)0x83,
   (unsigned char)0xd9,
   (unsigned char)0xba,
   (unsigned char)0x79,
   (unsigned char)0x7d,
   (unsigned char)0x8f,
   (unsigned char)0xdf,
   (unsigned char)0xb2,
   (unsigned char)0x8c,
   (unsigned char)0x86,
   (unsigned char)0x77,
   (unsigned char)0x4f,
   (unsigned char)0x29,
   (unsigned char)0x86,
   (unsigned char)0xd4,
   (unsigned char)0x8b,
   (unsigned char)0x11,
   (unsigned char)0x65,
   (unsigned char)0x55,
   (unsigned char)0x74,
   (unsigned char)0xf4,
   (unsigned char)0x76,
   (unsigned char)0x83,
   (unsigned char)0x88,
   (unsigned char)0xd6,
   (unsigned char)0xa6,
   (unsigned char)0xa7,
   (unsigned char)0x33,
   (unsigned char)0x22,
   (unsigned char)0xa3,
   (unsigned char)0x2e,
   (unsigned char)0x88,
   (unsigned char)0x06,
   (unsigned char)0x54,
   (unsigned char)0x90,
   (unsigned char)0x37,
   (unsigned char)0xd5,
   (unsigned char)0xdb,
   (unsigned char)0xce,
   (unsigned char)0x7c,
   (unsigned char)0x0b,
   (unsigned char)0xd1,
   (unsigned char)0xe1,
   (unsigned char)0xc0,
   (unsigned char)0x7d,
   (unsigned char)0xa5,
   (unsigned char)0x0b,
   (unsigned char)0xc9,
   (unsigned char)0xaf,
   (unsigned char)0xe3,
   (unsigned char)0x75,
   (unsigned char)0xc5,
   (unsigned char)0xf5,
   (unsigned char)0xaf,
   (unsigned char)0xaa,
   (unsigned char)0xe2,
   (unsigned char)0x2a,
   (unsigned char)0xff,
   (unsigned char)0x6e,
   (unsigned char)0x84,
   (unsigned char)0x0e,
   (unsigned char)0x04,
   (unsigned char)0x10,
   (unsigned char)0xf0,
   (unsigned char)0x78,
   (unsigned char)0xdc,
   (unsigned char)0x96,
   (unsigned char)0x3d,
   (unsigned char)0x22,
   (unsigned char)0x96,
   (unsigned char)0x64,
   (unsigned char)0x5b,
   (unsigned char)0x7b,
   (unsigned char)0x9e,
   (unsigned char)0x83,
   (unsigned char)0x45,
   (unsigned char)0xba,
   (unsigned char)0xb8,
   (unsigned char)0xe1,
   (unsigned char)0x31,
   (unsigned char)0xc7,
   (unsigned char)0x0a,
   (unsigned char)0xe0,
   (unsigned char)0x31,
   (unsigned char)0xce,
   (unsigned char)0x29,
   (unsigned char)0x3d,
   (unsigned char)0x01,
   (unsigned char)0xb8,
   (unsigned char)0xfc,
   (unsigned char)0x79,
   (unsigned char)0x83,
   (unsigned char)0x3d,
   (unsigned char)0xd1,
   (unsigned char)0x40,
   (unsigned char)0xe1,
   (unsigned char)0x46,
   (unsigned char)0xfa,
   (unsigned char)0xe7,
   (unsigned char)0xc5,
   (unsigned char)0xdc,
   (unsigned char)0xc4,
   (unsigned char)0x1c,
   (unsigned char)0x24,
   (unsigned char)0x29,
   (unsigned char)0x5a,
   (unsigned char)0xef,
   (unsigned char)0xeb,
   (unsigned char)0x92,
   (unsigned char)0x57,
   (unsigned char)0xba,
   (unsigned char)0x06,
   (unsigned char)0x13,
   (unsigned char)0x1d,
   (unsigned char)0x35,
   (unsigned char)0xef,
   (unsigned char)0xb0,
   (unsigned char)0x2d,
   (unsigned char)0x69,
   (unsigned char)0x20,
   (unsigned char)0x92,
   (unsigned char)0xb1,
   (unsigned char)0x82,
   (unsigned char)0x00,
   (unsigned char)0x8e,
   (unsigned char)0x3b,
   (unsigned char)0x12,
   (unsigned char)0xb3,
   (unsigned char)0x78,
   (unsigned char)0xd7,
   (unsigned char)0x18,
   (unsigned char)0xb3,
   (unsigned char)0x54,
   (unsigned char)0x0f,
   (unsigned char)0xd1,
   (unsigned char)0x8e,
   (unsigned char)0x88,
   (unsigned char)0x5d,
   (unsigned char)0x4e,
   (unsigned char)0x2b,
   (unsigned char)0x30,
   (unsigned char)0x30,
   (unsigned char)0x2d,
   (unsigned char)0x85,
   (unsigned char)0xaa,
   (unsigned char)0x21,
   (unsigned char)0x01,
   (unsigned char)0xe1,
   (unsigned char)0x2c,
   (unsigned char)0x35,
   (unsigned char)0xa1,
   (unsigned char)0xee,
   (unsigned char)0xa2,
   (unsigned char)0x17,
   (unsigned char)0xed,
   (unsigned char)0x60,
   (unsigned char)0x1b,
   (unsigned char)0x98,
   (unsigned char)0xea,
   (unsigned char)0x12,
   (unsigned char)0x85,
   (unsigned char)0x21,
   (unsigned char)0xde,
   (unsigned char)0x45,
   (unsigned char)0x26,
   (unsigned char)0xef,
   (unsigned char)0x12,
   (unsigned char)0x3c,
   (unsigned char)0x02,
   (unsigned char)0x8c,
   (unsigned char)0xd7,
   (unsigned char)0x49,
   (unsigned char)0xbd,
   (unsigned char)0x02,
   (unsigned char)0xa7,
   (unsigned char)0x7d,
   (unsigned char)0xe7,
   (unsigned char)0x1c,
   (unsigned char)0x15,
   (unsigned char)0xf9,
   (unsigned char)0xaa,
   (unsigned char)0x44,
   (unsigned char)0x15,
   (unsigned char)0xb1,
   (unsigned char)0xaa,
   (unsigned char)0x76,
   (unsigned char)0x5e,
   (unsigned char)0xf2,
   (unsigned char)0xb4,
   (unsigned char)0xfb,
   (unsigned char)0x85,
   (unsigned char)0x77,
   (unsigned char)0xb9,
   (unsigned char)0x32,
   (unsigned char)0xb4,
   (unsigned char)0xc9,
   (unsigned char)0x70,
   (unsigned char)0xe1,
   (unsigned char)0xdb,
   (unsigned char)0x44,
   (unsigned char)0x9f,
   (unsigned char)0x5b,
   (unsigned char)0x87,
   (unsigned char)0xca,
   (unsigned char)0xaa,
   (unsigned char)0xcb,
   (unsigned char)0x43,
   (unsigned char)0x53,
   (unsigned char)0x7e,
   (unsigned char)0x49,
   (unsigned char)0xec,
   (unsigned char)0x1a,
   (unsigned char)0x13,
   (unsigned char)0x1d,
   (unsigned char)0xe1,
   (unsigned char)0x1b,
   (unsigned char)0x13,
   (unsigned char)0xc3,
   (unsigned char)0x34,
   (unsigned char)0x95,
   (unsigned char)0x5d,
   (unsigned char)0x5a,
   (unsigned char)0xc3,
   (unsigned char)0xd0,
   (unsigned char)0x33,
   (unsigned char)0x05,
   (unsigned char)0x82,
   (unsigned char)0x4a,
   (unsigned char)0x2e,
   (unsigned char)0x6d,
   (unsigned char)0x39,
   (unsigned char)0xeb,
   (unsigned char)0x9c,
   (unsigned char)0x65,
   (unsigned char)0x81,
   (unsigned char)0x7f,
   (unsigned char)0xa1,
   (unsigned char)0x62,
   (unsigned char)0x11};
void Next(unsigned int *index_0)
{
  (*index_0) ++;
  if (*index_0 >= (unsigned int)319) *index_0 = (unsigned int)0;
  return;
}

unsigned char Next_Rand(unsigned int *index_0)
{
  unsigned char __retres;
  Next(index_0);
  __retres = ad_random[*index_0];
  return __retres;
}

void Set_AD_Delay(int delay)
{
  int i;
  i = 0;
  while (i < 6) {
    ad_conv_delay[i] = delay;
    i ++;
  }
  return;
}

static unsigned int ad_delay_rand = (unsigned int)0;
void Random_AD_Delay(void)
{
  int i;
  i = 0;
  while (i < 6) {
    unsigned char tmp;
    tmp = Next_Rand(& ad_delay_rand);
    ad_conv_delay[i] = (int)tmp % (25 + 10);
    i ++;
  }
  return;
}

static unsigned int ad_rand_index = (unsigned int)0;
static unsigned int max_adc_hits = (unsigned int)0;
static unsigned int ad_hit_rand_index = (unsigned int)0;
static unsigned int total_adc_hits = (unsigned int)0;
static unsigned int ad_random_failures = (unsigned int)0;
static unsigned int ad_fail_index = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_36(char const * restrict format, int param0);

void Update_ADC_Channel_Reg(unsigned char channel)
{
  printf("Update_ADC_Channel_Reg %hhx\n",(int)channel); /* printf_va_36 */
  return;
}

static unsigned int start_conversion_count = (unsigned int)0;
static uint16_t ad_value = (uint16_t)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_37(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_38(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_39(char const * restrict format);

void Start_Conversion(void)
{
  uint_least8_t channel;
  unsigned char tmp;
  unsigned char tmp_0;
  channel = (uint_least8_t)((int)ADC_channel_register & 0x3f);
  printf("Start_Conversion on channel %u\n",channel); /* printf_va_37 */
  if (ad_converting != (unsigned int)0) printf("- previous conversion did not end.\n"); /* printf_va_38 */
  tmp = Next_Rand(& ad_rand_index);
  ad_value = (uint16_t)((int)((uint16_t)tmp) << 8);
  tmp_0 = Next_Rand(& ad_rand_index);
  ad_value = (uint16_t)((int)ad_value | (int)((uint16_t)tmp_0));
  if ((int)ad_value < (int)ad_limit[channel].min) ad_value = ad_limit[channel].min;
  else 
    if ((int)ad_value > (int)ad_limit[channel].max) ad_value = ad_limit[channel].max;
  start_conversion_count ++;
  ad_conv_timer = 0;
  ad_conv_num ++;
  if (ad_conv_num >= (unsigned int)6) ad_conv_num = (unsigned int)0;
  if (ad_random_failures > (unsigned int)0) {
    unsigned char tmp_1;
    tmp_1 = Next_Rand(& ad_fail_index);
    if ((int)tmp_1 > 0x3f) {
      printf("Start_Conversion starts a failing A/D conversion.\n"); /* printf_va_39 */
      ad_conv_timer = -5000;
      ad_random_failures --;
    }
  }
  ad_converting = (unsigned int)1;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_40(char const * restrict format, unsigned int param0,
                 int param1);

void Report_Start_Conversion_Count(int problem)
{
  printf("Called Start_Conversion %u times in problem %d.\n",
         start_conversion_count,problem); /* printf_va_40 */
  start_conversion_count = (unsigned int)0;
  return;
}

static unsigned int end_of_adc_count = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_41(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_42(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_43(char const * restrict format);

unsigned char End_Of_ADC(void)
{
  unsigned char __retres;
  printf("End_Of_ADC\n"); /* printf_va_41 */
  if (ad_converting == (unsigned int)0) printf("- conversion not going on.\n"); /* printf_va_42 */
  end_of_adc_count ++;
  ad_conv_timer ++;
  if (ad_conv_timer >= ad_conv_delay[ad_conv_num]) {
    ad_converting = (unsigned int)0;
    __retres = (unsigned char)0;
    goto return_label;
  }
  else {
    if (max_adc_hits > (unsigned int)0) {
      unsigned char tmp;
      tmp = Next_Rand(& ad_hit_rand_index);
      if ((int)tmp > 0x7f) {
        printf("Hit during A/D\n"); /* printf_va_43 */
        confirm_hit_result = (unsigned char)1;
        total_adc_hits ++;
        max_adc_hits --;
        ad_converting = (unsigned int)0;
        __retres = (unsigned char)0;
        goto return_label;
      }
    }
    __retres = (unsigned char)1;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_44(char const * restrict format, unsigned int param0,
                 int param1);

void Report_End_Of_ADC_Count(int problem)
{
  printf("Called End_Of_ADC %u times in problem %d.\n",end_of_adc_count,
         problem); /* printf_va_44 */
  end_of_adc_count = (unsigned int)0;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_45(char const * restrict format, int param0, int param1);

unsigned char Get_Result(void)
{
  unsigned char value;
  value = (unsigned char)(((int)ad_value >> 8) & 0xff);
  printf("Get_Result %hhu = 0x%hhx\n",(int)value,(int)value); /* printf_va_45 */
  ad_value = (uint16_t)((int)ad_value << 8);
  return value;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_46(char const * restrict format, int param0);

void Set_DAC_Output(unsigned char level)
{
  printf("Set_DAC_Output %d\n",(int)level); /* printf_va_46 */
  return;
}

static unsigned char hit_enabled = (unsigned char)0;
static unsigned char trigger_flag = (unsigned char)1;
static unsigned char event_flag = (unsigned char)1;
static unsigned char trigger_source_0 = (unsigned char)0;
static unsigned char trigger_source_1 = (unsigned char)0;
static unsigned char msb_counter = (unsigned char)134;
static unsigned char lsb1_counter = (unsigned char)77;
static unsigned char lsb2_counter = (unsigned char)88;
static unsigned char rise_time_counter = (unsigned char)102;
static unsigned char sim_self_test = (unsigned char)0;
static unsigned char self_test_pulse = (unsigned char)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_47(char const * restrict format);

void Sim_Self_Test_Trigger(void)
{
  if ((int)sim_self_test == 1) 
    if ((int)hit_enabled == 1) 
      if ((int)self_test_pulse > 0) 
        if (self_test_SU_number != (sensor_number_t)0) 
          if (SU_state[self_test_SU_number - (sensor_number_t)1] == (unsigned int)self_test_trigger_e) {
            printf("SU Self Test trigger!\n"); /* printf_va_47 */
            SU_state[self_test_SU_number - (sensor_number_t)1] = self_test_e;
          }
  return;
}

static unsigned int event_rand_index = (unsigned int)0;
void Random_Event(void)
{
  unsigned char val;
  val = Next_Rand(& event_rand_index);
  trigger_flag = (unsigned char)(((int)val >> 7) & 1);
  event_flag = (unsigned char)(((int)val >> 6) & 1);
  trigger_source_0 = (unsigned char)(((int)val >> 5) & 1);
  trigger_source_1 = (unsigned char)(((int)val >> 4) & 1);
  msb_counter = Next_Rand(& event_rand_index);
  lsb1_counter = Next_Rand(& event_rand_index);
  lsb2_counter = Next_Rand(& event_rand_index);
  rise_time_counter = Next_Rand(& event_rand_index);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_48(char const * restrict format, unsigned int param0);

static void Set_Trigger_SU(sensor_index_t SU)
{
  printf("Set Trigger SU index %u\n",SU); /* printf_va_48 */
  trigger_source_0 = (unsigned char)(SU & (unsigned int)1);
  trigger_source_1 = (unsigned char)((SU >> 1) & (unsigned int)1);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_49(char const * restrict format);

void Enable_Hit_Trigger(void)
{
  printf("Enable_Hit_Trigger\n"); /* printf_va_49 */
  hit_enabled = (unsigned char)1;
  Sim_Self_Test_Trigger();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_50(char const * restrict format);

void Disable_Hit_Trigger(void)
{
  printf("Disable_Hit_Trigger\n"); /* printf_va_50 */
  hit_enabled = (unsigned char)0;
  Sim_Self_Test_Trigger();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_51(char const * restrict format);

unsigned char Hit_Trigger_Flag(void)
{
  printf("Hit_Trigger_Flag\n"); /* printf_va_51 */
  return trigger_flag;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_52(char const * restrict format);

unsigned char Event_Flag(void)
{
  printf("Event_Flag \n"); /* printf_va_52 */
  return event_flag;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_53(char const * restrict format);

unsigned char Get_MSB_Counter(void)
{
  printf("Get_MSB_Counter\n"); /* printf_va_53 */
  return msb_counter;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_54(char const * restrict format);

unsigned char Get_LSB1_Counter(void)
{
  printf("Get_LSB1_Counter\n"); /* printf_va_54 */
  return lsb1_counter;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_55(char const * restrict format);

unsigned char Get_LSB2_Counter(void)
{
  printf("Get_LSB2_Counter\n"); /* printf_va_55 */
  return lsb2_counter;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_56(char const * restrict format);

unsigned char Rise_Time_Counter(void)
{
  printf("Rise_Time_Counter\n"); /* printf_va_56 */
  return rise_time_counter;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_57(char const * restrict format);

unsigned char Trigger_Source_0(void)
{
  printf("Trigger_Source_0\n"); /* printf_va_57 */
  return trigger_source_0;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_58(char const * restrict format);

unsigned char Trigger_Source_1(void)
{
  printf("Trigger_Source_1\n"); /* printf_va_58 */
  return trigger_source_1;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_59(char const * restrict format, int param0);

void Set_SU_Self_Test_Ch(unsigned char value)
{
  printf("Set SU Self-Test Channel %hhx\n",(int)value); /* printf_va_59 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_60(char const * restrict format, int param0);

void Set_Test_Pulse_Level(unsigned char level)
{
  printf("Set SU Self-Test Pulse Level %hhu\n",(int)level); /* printf_va_60 */
  self_test_pulse = level;
  Sim_Self_Test_Trigger();
  return;
}

static unsigned int v_down_errors = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_61(char const * restrict format, int param0);

unsigned char V_Down(void)
{
  unsigned char result;
  if (v_down_errors > (unsigned int)0) {
    result = (unsigned char)0;
    v_down_errors --;
  }
  else result = (unsigned char)1;
  printf("V_Down %d\n",(int)result); /* printf_va_61 */
  return result;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_62(char const * restrict format, int param0, int param1);

void SignalPeakDetectorReset(unsigned char low_reset_value,
                             unsigned char high_reset_value)
{
  printf("SignalPeakDetectorReset low %hhu, high %hhu\n",
         (int)low_reset_value,(int)high_reset_value); /* printf_va_62 */
  return;
}

unsigned short Short_Value(uskew16_t *x)
{
  unsigned short val;
  memcpy((void *)(& val),(void const *)x,sizeof(val));
  return val;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_63(char const * restrict format, int param0);

void Call_Patch(fptr_t func)
{
  printf("Call_Patch 0x%hx\n",(int)func); /* printf_va_63 */
  return;
}

static uint_least8_t volatile tsize_s;
static uint_least16_t volatile tsize_l;
void Check_Type_Size(void)
{
  tsize_s = sizeof(char);
  tsize_s = sizeof(short);
  tsize_s = sizeof(int);
  tsize_s = sizeof(long);
  tsize_s = sizeof(tm_ushort_t);
  tsize_s = sizeof(dpu_time_t);
  tsize_s = sizeof(tm_dpu_time_t);
  tsize_s = sizeof(SU_settings_t);
  tsize_s = sizeof(telemetry_data_t);
  tsize_s = sizeof(event_record_t);
  tsize_l = sizeof(science_data_file_t);
  return;
}

static unsigned int checks = (unsigned int)0;
static unsigned int check_errors = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_64(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_65(char const * restrict format, unsigned int param0,
                 unsigned int param1);

static void Report_Checks(void)
{
  printf("Target Mark.\n"); /* printf_va_64 */
  printf("Total checks done %u, failed %u\n",checks,check_errors); /* printf_va_65 */
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_66(char const * restrict format, char *param0,
                 unsigned int param1);

static void Fail_Check(char *message)
{
  check_errors ++;
  printf("%s: FAILED (#%u)\n",message,check_errors); /* printf_va_66 */
  return;
}

static void Check_Zero(int cond)
{
  checks ++;
  if (cond) Fail_Check((char *)"Check_Zero");
  return;
}

static void Check_Nonzero(int cond)
{
  checks ++;
  if (cond == 0) Fail_Check((char *)"Check_Nonzero");
  return;
}

static void Check_No_Errors(void)
{
  Check_Zero((int)telemetry_data.error_status);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_67(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_68(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_69(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_70(char const * restrict format, int param0);

static void TC_Interrupt(void)
{
  printf("RPT_Ipoint %d\n",3); /* printf_va_67 */
  printf("RPT_Ipoint %d\n",10); /* printf_va_68 */
  TC_InterruptService();
  printf("RPT_Ipoint %d\n",3); /* printf_va_69 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_70 */
  return;
}

static void Send_TC(unsigned char address, unsigned char code)
{
  unsigned char par;
  tc_msb = (unsigned char)((int)address << 1);
  tc_lsb = code;
  par = (unsigned char)((int)tc_msb ^ (int)tc_lsb);
  par = (unsigned char)(((int)par & 0x0F) ^ ((int)par >> 4));
  par = (unsigned char)(((int)par & 0x03) ^ ((int)par >> 2));
  par = (unsigned char)(((int)par & 0x01) ^ ((int)par >> 1));
  tc_msb = (unsigned char)((int)tc_msb | (int)par);
  tc_word = (uint16_t)(((int)tc_msb << 8) | (int)tc_lsb);
  tc_timer_overflow = (unsigned char)1;
  TC_Interrupt();
  return;
}

static void Send_TC_Word(uint_least16_t word)
{
  tc_msb = (unsigned char)((word >> 8) & (unsigned int)0xff);
  tc_lsb = (unsigned char)(word & (unsigned int)0xff);
  tc_word = (uint16_t)(((int)tc_msb << 8) | (int)tc_lsb);
  tc_timer_overflow = (unsigned char)1;
  TC_Interrupt();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_71(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_72(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_73(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_74(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_75(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_76(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_77(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_78(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_79(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_80(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_81(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_82(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_83(char const * restrict format, char *param0);

static void TC_ISR_Tests(void)
{
  printf("\nTC_ISR_Tests\n"); /* printf_va_71 */
  printf("\nCASE: %s:\n\n",
         (char *)"TC rejected because timer overflow is not set"); /* printf_va_72 */
  tc_timer_overflow = (unsigned char)0;
  TC_Interrupt();
  printf("\nCASE: %s:\n\n",(char *)"TC rejected because TC_state is SC_TM_e"); /* printf_va_73 */
  TC_state = SC_TM_e;
  Send_TC((unsigned char)0,(unsigned char)0);
  printf("\nCASE: %s:\n\n",
         (char *)"TC rejected because TC_state is memory_dump_e"); /* printf_va_74 */
  TC_state = memory_dump_e;
  Send_TC((unsigned char)0,(unsigned char)0);
  printf("\nCASE: %s:\n\n",(char *)"TC in TC_state = memory_patch_e"); /* printf_va_75 */
  TC_state = memory_patch_e;
  Send_TC((unsigned char)0,(unsigned char)0);
  Check_Nonzero(mail_count[0] == 1);
  FlushMail((unsigned char)0);
  printf("\nCASE: %s:\n\n",(char *)"TC with parity error"); /* printf_va_76 */
  TC_state = TC_handling_e;
  tc_timer_overflow = (unsigned char)1;
  tc_msb = (unsigned char)0;
  tc_lsb = (unsigned char)1;
  tc_word = (uint16_t)1;
  TC_Interrupt();
  Check_Nonzero((int)telemetry_data.error_status & 2);
  printf("\nCASE: %s:\n\n",(char *)"TC = ERROR_STATUS_CLEAR, ok"); /* printf_va_77 */
  Send_TC((unsigned char)0x03,(unsigned char)0x03);
  Check_Nonzero((int)telemetry_data.error_status & 2);
  Check_Nonzero(mail_count[0] == 1);
  FlushMail((unsigned char)0);
  telemetry_data.error_status = (unsigned char)0;
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC = SEND_STATUS_REGISTER, ok"); /* printf_va_78 */
  Send_TC((unsigned char)0x05,(unsigned char)8);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)register_TM_e);
  Check_Nonzero(mail_count[0] == 1);
  FlushMail((unsigned char)0);
  printf("\nCASE: %s:\n\n",(char *)"TC type ALL_INVALID"); /* printf_va_79 */
  Send_TC((unsigned char)4,(unsigned char)4);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(mail_count[0] == 0);
  telemetry_data.error_status = (unsigned char)0;
  printf("\nCASE: %s:\n\n",(char *)"TC type ONLY_EQUAL, fail"); /* printf_va_80 */
  Send_TC((unsigned char)0x03,(unsigned char)(~ 0x03));
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(mail_count[0] == 0);
  telemetry_data.error_status = (unsigned char)0;
  printf("\nCASE: %s:\n\n",(char *)"TC type ON_OFF_TC, fail"); /* printf_va_81 */
  Send_TC((unsigned char)0x40,(unsigned char)0x3F);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(mail_count[0] == 0);
  telemetry_data.error_status = (unsigned char)0;
  printf("\nCASE: %s:\n\n",(char *)"TC type ONLY_EVEN, fail (odd)"); /* printf_va_82 */
  Send_TC((unsigned char)0x05,(unsigned char)5);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(mail_count[0] == 0);
  telemetry_data.error_status = (unsigned char)0;
  printf("\nCASE: %s:\n\n",(char *)"TC type ONLY_EVEN, fail (too large)"); /* printf_va_83 */
  Send_TC((unsigned char)0x05,(unsigned char)(0x74 + 2));
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(mail_count[0] == 0);
  telemetry_data.error_status = (unsigned char)0;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_84(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_85(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_86(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_87(char const * restrict format, int param0);

static void Handle_TC(int problem)
{
  Check_Nonzero(mail_count[0] == 1);
  printf("RPT_Ipoint %d\n",3); /* printf_va_84 */
  printf("RPT_Ipoint %d\n",problem); /* printf_va_85 */
  HandleTelecommand();
  printf("RPT_Ipoint %d\n",3); /* printf_va_86 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_87 */
  Check_Nonzero(mail_count[0] == 0);
  return;
}

static void Exec_TC(unsigned char address, unsigned char code, int problem)
{
  Send_TC(address,code);
  Handle_TC(problem);
  return;
}

static void Send_Patch_Code(uint16_t address, unsigned char *checksum)
{
  uint_least8_t i;
  unsigned char sum;
  Exec_TC((unsigned char)0x10,(unsigned char)(((int)address >> 8) & 0xff),42);
  sum = (unsigned char)(((int)tc_word >> 8) ^ ((int)tc_word & 0xff));
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)write_memory_e);
  Exec_TC((unsigned char)0x6F,(unsigned char)((int)address & 0xff),43);
  sum = (unsigned char)((int)sum ^ (((int)tc_word >> 8) ^ ((int)tc_word & 0xff)));
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)memory_patch_e);
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)16) {
    Send_TC_Word(i << 6);
    sum = (unsigned char)((int)sum ^ (((int)tc_word >> 8) ^ ((int)tc_word & 0xff)));
    Handle_TC(44);
    i ++;
  }
  *checksum = sum;
  return;
}

static void Send_Patch_Data(uint16_t address, unsigned char *checksum)
{
  uint_least8_t i;
  unsigned char sum;
  Exec_TC((unsigned char)0x15,(unsigned char)(((int)address >> 8) & 0xff),42);
  sum = (unsigned char)(((int)tc_word >> 8) ^ ((int)tc_word & 0xff));
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)write_memory_e);
  Exec_TC((unsigned char)0x6A,(unsigned char)((int)address & 0xff),43);
  sum = (unsigned char)((int)sum ^ (((int)tc_word >> 8) ^ ((int)tc_word & 0xff)));
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)memory_patch_e);
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)16) {
    Send_TC_Word(i << 6);
    sum = (unsigned char)((int)sum ^ (((int)tc_word >> 8) ^ ((int)tc_word & 0xff)));
    Handle_TC(44);
    i ++;
  }
  *checksum = sum;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_88(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_89(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_90(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_91(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_92(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_93(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_94(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_95(char const * restrict format, int param0);

static void Read_Data_Memory(uint16_t address)
{
  uint_least8_t i;
  Exec_TC((unsigned char)0x1F,(unsigned char)(((int)address >> 8) & 0xff),41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)read_memory_e);
  Exec_TC((unsigned char)0x60,(unsigned char)((int)address & 0xff),41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)memory_dump_e);
  i = (uint_least8_t)0;
  while (i < (uint_least8_t)16) {
    Check_Nonzero(telemetry_pointer < telemetry_end_pointer);
    printf("RPT_Ipoint %d\n",3); /* printf_va_88 */
    printf("RPT_Ipoint %d\n",21); /* printf_va_89 */
    TM_InterruptService();
    printf("RPT_Ipoint %d\n",3); /* printf_va_90 */
    printf("RPT_Ipoint %d\n",0); /* printf_va_91 */
    Check_Nonzero(TC_state == (unsigned int)memory_dump_e);
    i ++;
  }
  Check_Nonzero(telemetry_pointer == telemetry_end_pointer);
  printf("RPT_Ipoint %d\n",3); /* printf_va_92 */
  printf("RPT_Ipoint %d\n",23); /* printf_va_93 */
  TM_InterruptService();
  printf("RPT_Ipoint %d\n",3); /* printf_va_94 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_95 */
  Handle_TC(10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  return;
}

void Clear_Errors(void)
{
  Exec_TC((unsigned char)0x03,(unsigned char)0x03,41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_96(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_97(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_98(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_99(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_100(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_101(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_102(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_103(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_104(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_105(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_106(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_107(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_108(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_109(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_110(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_111(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_112(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_113(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_114(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_115(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_116(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_117(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_118(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_119(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_120(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_121(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_122(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_123(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_124(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_125(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_126(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_127(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_128(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_129(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_130(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_131(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_132(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_133(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_134(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_135(char const * restrict format, char *param0);

static void TC_Task_Tests(void)
{
  unsigned char chsum;
  DEBIE_mode_t tmp;
  DEBIE_mode_t tmp_0;
  printf("\nTC_Task_Tests\n"); /* printf_va_96 */
  printf("\nCASE: %s:\n\n",(char *)"TC = ERROR_STATUS_CLEAR, ok"); /* printf_va_97 */
  telemetry_data.error_status = (unsigned char)2;
  Send_TC((unsigned char)0x03,(unsigned char)0x03);
  Check_Nonzero((int)telemetry_data.error_status & 2);
  Handle_TC(41);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to set SU parameters"); /* printf_va_98 */
  Exec_TC((unsigned char)0x21,(unsigned char)23,41);
  Exec_TC((unsigned char)0x31,(unsigned char)26,41);
  Exec_TC((unsigned char)0x41,(unsigned char)32,41);
  Exec_TC((unsigned char)0x51,(unsigned char)102,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x22,(unsigned char)205,41);
  Exec_TC((unsigned char)0x32,(unsigned char)123,41);
  Exec_TC((unsigned char)0x42,(unsigned char)99,41);
  Exec_TC((unsigned char)0x52,(unsigned char)1,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x23,(unsigned char)14,41);
  Exec_TC((unsigned char)0x33,(unsigned char)54,41);
  Exec_TC((unsigned char)0x43,(unsigned char)74,41);
  Exec_TC((unsigned char)0x53,(unsigned char)104,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x24,(unsigned char)104,41);
  Exec_TC((unsigned char)0x34,(unsigned char)204,41);
  Exec_TC((unsigned char)0x44,(unsigned char)214,41);
  Exec_TC((unsigned char)0x54,(unsigned char)234,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x25,(unsigned char)104,41);
  Exec_TC((unsigned char)0x35,(unsigned char)88,41);
  Exec_TC((unsigned char)0x45,(unsigned char)66,41);
  Exec_TC((unsigned char)0x55,(unsigned char)33,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x28,(unsigned char)61,41);
  Exec_TC((unsigned char)0x38,(unsigned char)21,41);
  Exec_TC((unsigned char)0x48,(unsigned char)81,41);
  Exec_TC((unsigned char)0x58,(unsigned char)11,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x26,(unsigned char)14,41);
  Exec_TC((unsigned char)0x36,(unsigned char)24,41);
  Exec_TC((unsigned char)0x46,(unsigned char)33,41);
  Exec_TC((unsigned char)0x56,(unsigned char)77,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x27,(unsigned char)14,41);
  Exec_TC((unsigned char)0x37,(unsigned char)14,41);
  Exec_TC((unsigned char)0x47,(unsigned char)14,41);
  Exec_TC((unsigned char)0x57,(unsigned char)14,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x29,(unsigned char)191,41);
  Exec_TC((unsigned char)0x39,(unsigned char)171,41);
  Exec_TC((unsigned char)0x49,(unsigned char)161,41);
  Exec_TC((unsigned char)0x59,(unsigned char)151,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x2A,(unsigned char)11,41);
  Exec_TC((unsigned char)0x3A,(unsigned char)22,41);
  Exec_TC((unsigned char)0x4A,(unsigned char)33,41);
  Exec_TC((unsigned char)0x5A,(unsigned char)44,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x2B,(unsigned char)111,41);
  Exec_TC((unsigned char)0x3B,(unsigned char)122,41);
  Exec_TC((unsigned char)0x4B,(unsigned char)133,41);
  Exec_TC((unsigned char)0x5B,(unsigned char)144,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x2C,(unsigned char)11,41);
  Exec_TC((unsigned char)0x3C,(unsigned char)10,41);
  Exec_TC((unsigned char)0x4C,(unsigned char)9,41);
  Exec_TC((unsigned char)0x5C,(unsigned char)8,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x2D,(unsigned char)211,41);
  Exec_TC((unsigned char)0x3D,(unsigned char)210,41);
  Exec_TC((unsigned char)0x4D,(unsigned char)209,41);
  Exec_TC((unsigned char)0x5D,(unsigned char)208,41);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to set classification coefficients"); /* printf_va_99 */
  Exec_TC((unsigned char)0x70,(unsigned char)1,41);
  Exec_TC((unsigned char)0x71,(unsigned char)2,41);
  Exec_TC((unsigned char)0x72,(unsigned char)3,41);
  Exec_TC((unsigned char)0x73,(unsigned char)4,41);
  Exec_TC((unsigned char)0x74,(unsigned char)5,41);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, call patch"); /* printf_va_100 */
  Send_Patch_Code((uint16_t)0x1100,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x5A);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x5A00 | (int)chsum));
  Handle_TC(41);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, no action"); /* printf_va_101 */
  Send_Patch_Code((uint16_t)0x1300,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x00);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x0000 | (int)chsum));
  Handle_TC(41);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, soft reset"); /* printf_va_102 */
  Send_Patch_Code((uint16_t)0x1400,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x09);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x0900 | (int)chsum));
  Handle_TC(41);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, warm reset"); /* printf_va_103 */
  Send_Patch_Code((uint16_t)0x2100,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x37);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x3700 | (int)chsum));
  Handle_TC(41);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, invalid action"); /* printf_va_104 */
  Send_Patch_Code((uint16_t)0x2400,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x62);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x6200 | (int)chsum));
  Handle_TC(41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch code memory, invalid address"); /* printf_va_105 */
  Send_Patch_Code((uint16_t)0x0fff,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x00);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x0000 | (int)chsum));
  Handle_TC(41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to patch code memory, checksum error"); /* printf_va_106 */
  Send_Patch_Code((uint16_t)0x1200,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x5A);
  chsum = (unsigned char)((int)chsum ^ 0xff);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x5A00 | (int)chsum));
  Handle_TC(41);
  Check_Nonzero((int)telemetry_data.mode_status & 0x10);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch code, TC sequence error at first word"); /* printf_va_107 */
  Exec_TC((unsigned char)0x6F,(unsigned char)0x32,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch code, TC sequence error at second word"); /* printf_va_108 */
  Exec_TC((unsigned char)0x10,(unsigned char)0x32,41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)write_memory_e);
  Exec_TC((unsigned char)0x0A,(unsigned char)0x0A,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to patch data memory"); /* printf_va_109 */
  Send_Patch_Data((uint16_t)0x2200,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x11);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x1100 | (int)chsum));
  Handle_TC(41);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  printf("\nCASE: %s:\n\n",(char *)"TC to patch data memory, address error"); /* printf_va_110 */
  Send_Patch_Data((uint16_t)0xfef0,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x11);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x1100 | (int)chsum));
  Handle_TC(41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch data memory, TC sequence error at first word"); /* printf_va_111 */
  Exec_TC((unsigned char)0x6A,(unsigned char)0x32,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch data memory, TC sequence error at second word"); /* printf_va_112 */
  Exec_TC((unsigned char)0x15,(unsigned char)0x32,41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)write_memory_e);
  Exec_TC((unsigned char)0x0A,(unsigned char)0x0A,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to patch data memory, checksum error"); /* printf_va_113 */
  Send_Patch_Data((uint16_t)0x2300,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x11);
  chsum = (unsigned char)((int)chsum ^ 0xff);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Send_TC_Word((uint_least16_t)(0x1100 | (int)chsum));
  Handle_TC(41);
  Check_Nonzero((int)telemetry_data.mode_status & 0x10);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to patch data memory, time-out on TC word reception"); /* printf_va_114 */
  Send_Patch_Data((uint16_t)0x2200,& chsum);
  chsum = (unsigned char)((int)chsum ^ 0x11);
  Check_Nonzero(TC_state == (unsigned int)memory_patch_e);
  Check_Zero((int)telemetry_data.mode_status & 0x10);
  Check_Nonzero(mail_count[0] == 0);
  printf("RPT_Ipoint %d\n",3); /* printf_va_115 */
  printf("RPT_Ipoint %d\n",41); /* printf_va_116 */
  HandleTelecommand();
  printf("RPT_Ipoint %d\n",3); /* printf_va_117 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_118 */
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC timeout during TC handling, normal"); /* printf_va_119 */
  Check_Nonzero(mail_count[0] == 0);
  printf("RPT_Ipoint %d\n",3); /* printf_va_120 */
  printf("RPT_Ipoint %d\n",41); /* printf_va_121 */
  HandleTelecommand();
  printf("RPT_Ipoint %d\n",3); /* printf_va_122 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_123 */
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC to read data memory"); /* printf_va_124 */
  Read_Data_Memory((uint16_t)0x2041);
  printf("\nCASE: %s:\n\n",(char *)"TC to read data memory, address error"); /* printf_va_125 */
  Exec_TC((unsigned char)0x1F,(unsigned char)0xfe,41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)read_memory_e);
  Exec_TC((unsigned char)0x60,(unsigned char)0xf0,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to read data memory, TC sequence error at first word"); /* printf_va_126 */
  Exec_TC((unsigned char)0x60,(unsigned char)0xfe,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to read data memory, TC sequence error at second word"); /* printf_va_127 */
  Exec_TC((unsigned char)0x1F,(unsigned char)0xab,41);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)read_memory_e);
  Exec_TC((unsigned char)0x0A,(unsigned char)0x0A,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC = CLEAR_WATCHDOG_FAILURES"); /* printf_va_128 */
  telemetry_data.watchdog_failures = (unsigned char)3;
  Exec_TC((unsigned char)0x0A,(unsigned char)0x0A,41);
  Check_No_Errors();
  Check_Zero((int)telemetry_data.watchdog_failures);
  printf("\nCASE: %s:\n\n",(char *)"TC = CLEAR_CHECKSUM_FAILURES"); /* printf_va_129 */
  telemetry_data.checksum_failures = (unsigned char)9;
  Exec_TC((unsigned char)0x0B,(unsigned char)0x0B,41);
  Check_No_Errors();
  Check_Zero((int)telemetry_data.checksum_failures);
  printf("\nCASE: %s:\n\n",(char *)"TC to set DEBIE time"); /* printf_va_130 */
  Exec_TC((unsigned char)0x0F,(unsigned char)0x44,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0E,(unsigned char)0x33,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0D,(unsigned char)0x22,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0C,(unsigned char)0x11,41);
  Check_No_Errors();
  Check_Nonzero(internal_time == (dpu_time_t)0x44332211);
  printf("\nCASE: %s:\n\n",
         (char *)"TC to set DEBIE time, sequence error at byte 2"); /* printf_va_131 */
  internal_time = (dpu_time_t)0x01122334;
  Exec_TC((unsigned char)0x0F,(unsigned char)0x44,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0D,(unsigned char)0x33,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(internal_time == (dpu_time_t)0x44000000);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to set DEBIE time, sequence error at byte 1"); /* printf_va_132 */
  internal_time = (dpu_time_t)0x01122334;
  Exec_TC((unsigned char)0x0F,(unsigned char)0x44,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0E,(unsigned char)0x33,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0C,(unsigned char)0x22,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(internal_time == (dpu_time_t)0x44330000);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC to set DEBIE time, sequence error at byte 0"); /* printf_va_133 */
  internal_time = (dpu_time_t)0x01122334;
  Exec_TC((unsigned char)0x0F,(unsigned char)0x44,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0E,(unsigned char)0x33,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0D,(unsigned char)0x22,41);
  Check_No_Errors();
  Exec_TC((unsigned char)0x0E,(unsigned char)0x11,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(internal_time == (dpu_time_t)0x44332200);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC = SOFT_RESET"); /* printf_va_134 */
  Exec_TC((unsigned char)0x09,(unsigned char)0x09,41);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"TC = STOP_ACQUISITION in STAND_BY, fail"); /* printf_va_135 */
  tmp = GetMode();
  Check_Nonzero((int)tmp == 1);
  Exec_TC((unsigned char)0x02,(unsigned char)0x02,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  tmp_0 = GetMode();
  Check_Nonzero((int)tmp_0 == 1);
  Clear_Errors();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_136(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_137(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_138(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_139(char const * restrict format, int param0);

void Monitor_Health(int problem)
{
  start_conversion_count = (unsigned int)0;
  end_of_adc_count = (unsigned int)0;
  printf("RPT_Ipoint %d\n",3); /* printf_va_136 */
  printf("RPT_Ipoint %d\n",problem); /* printf_va_137 */
  HandleHealthMonitoring();
  printf("RPT_Ipoint %d\n",3); /* printf_va_138 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_139 */
  Report_Start_Conversion_Count(problem);
  Report_End_Of_ADC_Count(problem);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_140(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_141(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_142(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_143(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_144(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_145(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_146(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_147(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_148(char const * restrict format, int param0, int param1);

void Monitoring_Task_Tests(void)
{
  int sec;
  int tot_errors;
  int max_errors = 20;
  /*@ widen_hints tot_errors, 20; */
  health_mon_round = (uint_least8_t)9;
  temp_meas_count = (uint_least8_t)5;
  voltage_meas_count = (uint_least8_t)17;
  checksum_count = (uint_least8_t)59;
  Set_AD_Nominal();
  printf("\nCASE: %s:\n\n",
         (char *)"Monitoring without errors or interrupting hits"); /* printf_va_140 */
  Set_AD_Delay(2);
  Check_Nonzero(health_mon_round == (uint_least8_t)9);
  Check_Nonzero(temp_meas_count == (uint_least8_t)5);
  Check_Nonzero(voltage_meas_count == (uint_least8_t)17);
  Check_Nonzero(checksum_count == (uint_least8_t)59);
  sec = 1;
  while (sec <= 9) {
    Monitor_Health(61);
    Check_Nonzero(health_mon_round == (uint_least8_t)(9 - sec));
    Check_Nonzero(temp_meas_count == (uint_least8_t)5);
    Check_Nonzero(voltage_meas_count == (uint_least8_t)17);
    Check_Nonzero(checksum_count == (uint_least8_t)(59 - sec));
    sec ++;
  }
  Monitor_Health(61);
  Check_Nonzero(health_mon_round == (uint_least8_t)9);
  Check_Nonzero(temp_meas_count == (uint_least8_t)(5 - 1));
  Check_Nonzero(voltage_meas_count == (uint_least8_t)(17 - 1));
  Check_Nonzero(checksum_count == (uint_least8_t)(59 - 10));
  sec = 11;
  while (sec <= 180) {
    Monitor_Health(61);
    sec ++;
  }
  Check_Nonzero(health_mon_round == (uint_least8_t)9);
  Check_Nonzero(temp_meas_count == (uint_least8_t)5);
  Check_Nonzero(voltage_meas_count == (uint_least8_t)17);
  Check_Nonzero(checksum_count == (uint_least8_t)59);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"Monitoring without errors, at most one interrupting hit"); /* printf_va_141 */
  total_adc_hits = (unsigned int)0;
  sec = 1;
  while (sec <= 180) {
    max_adc_hits = (unsigned int)1;
    Monitor_Health(62);
    sec ++;
  }
  printf("Total hits %u\n",total_adc_hits); /* printf_va_142 */
  Check_Nonzero((int)total_adc_hits);
  Check_Nonzero(health_mon_round == (uint_least8_t)9);
  Check_Nonzero(temp_meas_count == (uint_least8_t)5);
  Check_Nonzero(voltage_meas_count == (uint_least8_t)17);
  Check_Nonzero(checksum_count == (uint_least8_t)59);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"Monitoring without errors, many interrupting hits"); /* printf_va_143 */
  total_adc_hits = (unsigned int)0;
  sec = 1;
  while (sec <= 180) {
    max_adc_hits = (unsigned int)20;
    Monitor_Health(63);
    sec ++;
  }
  printf("Total hits %u\n",total_adc_hits); /* printf_va_144 */
  Check_Nonzero((int)total_adc_hits);
  Check_Nonzero(health_mon_round == (uint_least8_t)9);
  Check_Nonzero(temp_meas_count == (uint_least8_t)5);
  Check_Nonzero(voltage_meas_count == (uint_least8_t)17);
  Check_Nonzero(checksum_count == (uint_least8_t)59);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"Monitoring with SU errors, no interrupting hits"); /* printf_va_145 */
  Set_AD_Unlimited();
  max_adc_hits = (unsigned int)0;
  tot_errors = 0;
  while (1) {
    if (tot_errors == 4) check_current_errors = (unsigned int)5;
    if (tot_errors == max_errors - 1) v_down_errors = (unsigned int)1;
    sec = 1;
    while (sec <= 180) {
      Monitor_Health(64);
      sec ++;
    }
    if ((int)telemetry_data.error_status != 0) {
      tot_errors ++;
      printf("Monitoring (6d) error %d, error status %hhx\n",tot_errors,
             (int)telemetry_data.error_status); /* printf_va_146 */
      Clear_Errors();
    }
    if (! (tot_errors < max_errors)) break;
  }
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"Monitoring with any kind of error and interrupting hit"); /* printf_va_147 */
  Set_AD_Unlimited();
  tot_errors = 0;
  while (1) {
    if (tot_errors == 4) check_current_errors = (unsigned int)5;
    if (tot_errors == max_errors - 1) v_down_errors = (unsigned int)1;
    sec = 1;
    while (sec <= 180) {
      max_adc_hits = (unsigned int)20;
      if (sec > 2 * tot_errors) ad_random_failures = (unsigned int)2;
      Monitor_Health(65);
      sec ++;
    }
    if ((int)telemetry_data.error_status != 0) {
      tot_errors ++;
      printf("Monitoring (6e) error %d, error status %hhx\n",tot_errors,
             (int)telemetry_data.error_status); /* printf_va_148 */
      Clear_Errors();
    }
    if (! (tot_errors < max_errors)) break;
  }
  Check_No_Errors();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_149(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_150(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_151(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_152(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_153(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_154(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_155(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_156(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_157(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_158(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_159(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_160(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_161(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_162(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_163(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_164(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_165(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_166(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_167(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_168(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_169(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_170(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_171(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_172(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_173(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_174(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_175(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_176(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_177(char const * restrict format, int param0);

void TM_Tests(void)
{
  int octets;
  printf("\nTM_ISR_Tests\n"); /* printf_va_149 */
  printf("\nCASE: %s:\n\n",(char *)"One whole round of register TM"); /* printf_va_150 */
  Send_TC((unsigned char)0x05,(unsigned char)0);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)register_TM_e);
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)register_TM_e);
  octets = 0;
  while ((unsigned int)octets < sizeof(telemetry_data_t)) {
    if (telemetry_pointer != (unsigned char *)(& telemetry_data.time)) {
      printf("RPT_Ipoint %d\n",3); /* printf_va_151 */
      printf("RPT_Ipoint %d\n",21); /* printf_va_152 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_153 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_154 */
    }
    else {
      printf("RPT_Ipoint %d\n",3); /* printf_va_155 */
      printf("RPT_Ipoint %d\n",22); /* printf_va_156 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_157 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_158 */
    }
    Check_Nonzero(TC_state == (unsigned int)register_TM_e);
    octets += 2;
  }
  printf("\nCASE: %s:\n\n",(char *)"Partial register TM, stop by TC"); /* printf_va_159 */
  Send_TC((unsigned char)0x05,(unsigned char)22);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)register_TM_e);
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)register_TM_e);
  octets = 0;
  while (octets < 40) {
    if (telemetry_pointer != (unsigned char *)(& telemetry_data.time)) {
      printf("RPT_Ipoint %d\n",3); /* printf_va_160 */
      printf("RPT_Ipoint %d\n",21); /* printf_va_161 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_162 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_163 */
    }
    else {
      printf("RPT_Ipoint %d\n",3); /* printf_va_164 */
      printf("RPT_Ipoint %d\n",22); /* printf_va_165 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_166 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_167 */
    }
    Check_Nonzero(TC_state == (unsigned int)register_TM_e);
    octets += 2;
  }
  Send_TC((unsigned char)0x03,(unsigned char)0x03);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Handle_TC(41);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Science Data TM"); /* printf_va_168 */
  Send_TC((unsigned char)0x06,(unsigned char)0x06);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
  octets = 0;
  /*@ loop unroll 22; */
  while (mail_count[0] == 0) {
    if (telemetry_pointer < telemetry_end_pointer) {
      printf("RPT_Ipoint %d\n",3); /* printf_va_169 */
      printf("RPT_Ipoint %d\n",21); /* printf_va_170 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_171 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_172 */
    }
    else {
      printf("RPT_Ipoint %d\n",3); /* printf_va_173 */
      printf("RPT_Ipoint %d\n",23); /* printf_va_174 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_175 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_176 */
    }
    octets += 2;
    Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
  }
  printf("Science TM octets sent %d\n",octets); /* printf_va_177 */
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_178(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_179(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_180(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_181(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_182(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_183(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_184(char const * restrict format);

static void Trigger_Hit(int problem)
{
  Check_Nonzero(mail_count[1] == 0);
  printf("Hit!\n"); /* printf_va_178 */
  printf("RPT_Ipoint %d\n",3); /* printf_va_179 */
  printf("RPT_Ipoint %d\n",problem); /* printf_va_180 */
  HandleHitTrigger();
  printf("RPT_Ipoint %d\n",3); /* printf_va_181 */
  printf("RPT_Ipoint %d\n",0); /* printf_va_182 */
  if (mail_count[1] == 0) printf("- hit rejected\n"); /* printf_va_183 */
  else printf("- hit accepted\n"); /* printf_va_184 */
  return;
}

static void Trigger_SU_Hit(sensor_index_t SU, int problem)
{
  Set_Trigger_SU(SU);
  Trigger_Hit(problem);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_185(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_186(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_187(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_188(char const * restrict format, int param0);

static void Acquire_Hit(int hit_problem, int acq_problem)
{
  Trigger_Hit(hit_problem);
  if (mail_count[1] > 0) {
    printf("RPT_Ipoint %d\n",3); /* printf_va_185 */
    printf("RPT_Ipoint %d\n",acq_problem); /* printf_va_186 */
    HandleAcquisition();
    printf("RPT_Ipoint %d\n",3); /* printf_va_187 */
    printf("RPT_Ipoint %d\n",0); /* printf_va_188 */
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_189(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_190(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_191(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_192(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_193(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_194(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_195(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_196(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_197(char const * restrict format, char *param0);

static void Hit_ISR_Tests(void)
{
  sensor_index_t su;
  printf("\nHit_ISR_Tests\n"); /* printf_va_189 */
  telemetry_data.hit_budget_exceedings = (unsigned char)0;
  printf("\nCASE: %s:\n\n",(char *)"Hit Trigger, budget exhausted"); /* printf_va_190 */
  Check_Nonzero((int)telemetry_data.hit_budget_exceedings == 0);
  hit_budget_left = (uint_least8_t)0;
  Trigger_SU_Hit((sensor_index_t)0,31);
  Check_Nonzero(mail_count[1] == 0);
  Check_Nonzero((int)telemetry_data.hit_budget_exceedings == 1);
  Trigger_SU_Hit((sensor_index_t)1,31);
  Check_Nonzero(mail_count[1] == 0);
  Check_Nonzero((int)telemetry_data.hit_budget_exceedings == 2);
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget exhausted for the 255th and 256th time"); /* printf_va_191 */
  telemetry_data.hit_budget_exceedings = (unsigned char)254;
  hit_budget_left = (uint_least8_t)0;
  Trigger_SU_Hit((sensor_index_t)3,31);
  Check_Nonzero(mail_count[1] == 0);
  Check_Nonzero((int)telemetry_data.hit_budget_exceedings == 255);
  Trigger_SU_Hit((sensor_index_t)1,31);
  Check_Nonzero(mail_count[1] == 0);
  Check_Nonzero((int)telemetry_data.hit_budget_exceedings == 255);
  printf("\nCASE: %s:\n\n",(char *)"Hit Trigger, budget left, no A/D errors"); /* printf_va_192 */
  hit_budget_left = (uint_least8_t)15;
  Set_AD_Delay(2);
  ad_conv_num = (unsigned int)0;
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    Trigger_SU_Hit(su,31);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_index_t)mail_message[1] == su + (sensor_index_t)1);
    FlushMail((unsigned char)1);
    su ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget left, no A/D errors, SU self test ok"); /* printf_va_193 */
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    self_test_SU_number = su + (sensor_index_t)1;
    SU_state[su] = self_test_trigger_e;
    Trigger_SU_Hit(su,31);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_number_t)mail_message[1] == self_test_SU_number);
    Check_Nonzero(SU_state[su] == (unsigned int)self_test_e);
    FlushMail((unsigned char)1);
    su ++;
  }
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget left, no A/D errors, SU self test wrong"); /* printf_va_194 */
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    self_test_SU_number = su + (sensor_index_t)1;
    SU_state[su] = self_test_e;
    Trigger_SU_Hit(su,31);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((unsigned int)mail_message[1] == (self_test_SU_number | (unsigned int)0x40));
    Check_Nonzero(SU_state[su] == (unsigned int)self_test_e);
    FlushMail((unsigned char)1);
    su ++;
  }
  self_test_SU_number = (sensor_number_t)0;
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    SU_state[su] = off_e;
    su ++;
  }
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget left, all A/D delays at limit but ok"); /* printf_va_195 */
  hit_budget_left = (uint_least8_t)15;
  Set_AD_Delay(25);
  ad_conv_num = (unsigned int)0;
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    Trigger_SU_Hit(su,32);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_index_t)mail_message[1] == su + (sensor_index_t)1);
    FlushMail((unsigned char)1);
    su ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget left, one A/D failure, others at limit"); /* printf_va_196 */
  hit_budget_left = (uint_least8_t)15;
  ad_conv_delay[0] = 25 + 1;
  su = (sensor_index_t)0;
  while (su < (sensor_index_t)4) {
    ad_conv_num = su;
    Trigger_SU_Hit(su,32);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((unsigned int)mail_message[1] == ((su + (sensor_index_t)1) | (unsigned int)0x80));
    FlushMail((unsigned char)1);
    su ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, budget left, any number of A/D failures"); /* printf_va_197 */
  hit_budget_left = (uint_least8_t)80;
  su = (sensor_index_t)(4 - 1);
  while (hit_budget_left > (uint_least8_t)0) {
    Random_AD_Delay();
    Trigger_SU_Hit(su,33);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_index_t)((int)mail_message[1] & 0x07) == su + (sensor_index_t)1);
    FlushMail((unsigned char)1);
    if (su > (sensor_index_t)0) su --; else su = (sensor_index_t)(4 - 1);
  }
  return;
}

unsigned char switch_su_cmd[4] =
  {(unsigned char)0x20,
   (unsigned char)0x30,
   (unsigned char)0x40,
   (unsigned char)0x50};
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_198(char const * restrict format, unsigned int param0,
                  int param1, int param2);

void Report_Event_Histo(void)
{
  sensor_index_t sen;
  int class;
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    class = 0;
    while (class < 10) {
      printf("Events from SU %u, class %d: %d\n",sen,class,
             (int)science_data.event_counter[sen][class]); /* printf_va_198 */
      class ++;
    }
    sen ++;
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_199(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_200(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_201(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_202(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_203(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_204(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_205(char const * restrict format, unsigned int param0,
                  unsigned int param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_206(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_207(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_208(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_209(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_210(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_211(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_212(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_213(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_214(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_215(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_216(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_217(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_218(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_219(char const * restrict format, char *param0);

static void Acquisition_Tests(void)
{
  sensor_index_t sen;
  unsigned int hits;
  int octets;
  DEBIE_mode_t tmp;
  DEBIE_mode_t tmp_0;
  printf("\nCASE: %s:\n\n",(char *)"Turn Sensor Units ON"); /* printf_va_199 */
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)off_e);
    Exec_TC(switch_su_cmd[sen],(unsigned char)0x55,41);
    Check_No_Errors();
    Check_Nonzero(SU_state[sen] == (unsigned int)start_switching_e);
    sen ++;
  }
  Set_AD_Nominal();
  max_adc_hits = (unsigned int)0;
  ad_random_failures = (unsigned int)0;
  check_current_errors = (unsigned int)0;
  v_down_errors = (unsigned int)0;
  Monitor_Health(61);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)switching_e);
    sen ++;
  }
  Monitor_Health(61);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)on_e);
    sen ++;
  }
  printf("\nCASE: %s:\n\n",(char *)"SWITCH_SU_ON when already ON, fail"); /* printf_va_200 */
  Exec_TC((unsigned char)0x30,(unsigned char)0x55,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Check_Nonzero(SU_state[1] == (unsigned int)on_e);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Start Acquisition"); /* printf_va_201 */
  Check_Nonzero(((int)telemetry_data.mode_status & 3) == 1);
  Exec_TC((unsigned char)0x01,(unsigned char)0x01,41);
  Check_No_Errors();
  Check_Nonzero(((int)telemetry_data.mode_status & 3) == 2);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)acquisition_e);
    sen ++;
  }
  printf("\nCASE: %s:\n\n",(char *)"TC = SWITCH_SU in ACQUISITION, fail"); /* printf_va_202 */
  Exec_TC((unsigned char)0x20,(unsigned char)0x55,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"TC = START_ACQUISITION in ACQUISITION, fail"); /* printf_va_203 */
  Exec_TC((unsigned char)0x01,(unsigned char)0x01,41);
  Check_Nonzero((int)telemetry_data.error_status == 1);
  tmp = GetMode();
  Check_Nonzero((int)tmp == 2);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Hits with Science Data not full"); /* printf_va_204 */
  Set_AD_Delay(2);
  hits = (unsigned int)0;
  while (free_slot_index < max_events) {
    hits ++;
    internal_time ++;
    hit_budget_left = (uint_least8_t)10;
    Random_Event();
    Acquire_Hit(31,51);
  }
  printf("Science Data filled with %u events after %u hits.\n",max_events,
         hits); /* printf_va_205 */
  Report_Event_Histo();
  printf("\nCASE: %s:\n\n",(char *)"Hits with Science Data full"); /* printf_va_206 */
  while (hits > (unsigned int)0) {
    hits --;
    internal_time ++;
    hit_budget_left = (uint_least8_t)10;
    Random_Event();
    Acquire_Hit(31,52);
  }
  Report_Event_Histo();
  printf("\nCASE: %s:\n\n",
         (char *)"Science Data TM, full Science Data, some hits during TM"); /* printf_va_207 */
  Send_TC((unsigned char)0x06,(unsigned char)0x06);
  Check_No_Errors();
  Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
  hits = (unsigned int)0;
  hit_budget_left = (uint_least8_t)(10 + 2);
  Check_Zero((int)event_queue_length);
  octets = 0;
  /*@ loop unroll 17676; */
  while (mail_count[0] == 0) {
    if (telemetry_pointer < telemetry_end_pointer) {
      printf("RPT_Ipoint %d\n",3); /* printf_va_208 */
      printf("RPT_Ipoint %d\n",21); /* printf_va_209 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_210 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_211 */
    }
    else {
      printf("RPT_Ipoint %d\n",3); /* printf_va_212 */
      printf("RPT_Ipoint %d\n",23); /* printf_va_213 */
      TM_InterruptService();
      printf("RPT_Ipoint %d\n",3); /* printf_va_214 */
      printf("RPT_Ipoint %d\n",0); /* printf_va_215 */
    }
    octets += 2;
    Check_Nonzero(TC_state == (unsigned int)SC_TM_e);
    if (hits < (unsigned int)(10 + 4)) {
      internal_time ++;
      Random_Event();
      event_flag = (unsigned char)1;
      Acquire_Hit(31,52);
      hits ++;
      if (hits <= (unsigned int)10) Check_Nonzero(event_queue_length == hits);
      else Check_Nonzero(event_queue_length == (uint_least8_t)10);
    }
  }
  printf("Science TM octets sent %d\n",octets); /* printf_va_216 */
  Check_Zero((int)hit_budget_left);
  Check_Nonzero(hits == (unsigned int)(10 + 4));
  Handle_TC(41);
  Check_Nonzero(TC_state == (unsigned int)TC_handling_e);
  Check_Zero((int)event_queue_length);
  Check_Nonzero(free_slot_index == (unsigned int)10);
  printf("\nCASE: %s:\n\n",
         (char *)"Switch to Self Test in Acquisition mode, fail"); /* printf_va_217 */
  tmp_0 = GetMode();
  Check_Nonzero((int)tmp_0 == 2);
  Check_Zero((int)telemetry_data.error_status & 1);
  Exec_TC((unsigned char)0x30,(unsigned char)0x99,41);
  Check_Nonzero((int)telemetry_data.error_status & 1);
  Exec_TC((unsigned char)0x03,(unsigned char)0x03,41);
  Check_Zero((int)telemetry_data.error_status & 1);
  printf("\nCASE: %s:\n\n",(char *)"Stop acquisition"); /* printf_va_218 */
  Exec_TC((unsigned char)0x02,(unsigned char)0x02,41);
  Check_No_Errors();
  Check_Nonzero(((int)telemetry_data.mode_status & 3) == 1);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)on_e);
    sen ++;
  }
  printf("\nCASE: %s:\n\n",(char *)"Turn Sensor Units OFF"); /* printf_va_219 */
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Exec_TC(switch_su_cmd[sen],(unsigned char)0x73,41);
    Check_No_Errors();
    Check_Nonzero(SU_state[sen] == (unsigned int)off_e);
    sen ++;
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_220(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_221(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_222(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_223(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_224(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_225(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_226(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_227(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_228(char const * restrict format, char *param0);

void SU_Self_Test_Tests(void)
{
  sensor_index_t sen;
  DEBIE_mode_t tmp;
  DEBIE_mode_t tmp_0;
  sim_self_test = (unsigned char)1;
  printf("\nCASE: %s:\n\n",(char *)"Turn Sensor Units ON for Self Test"); /* printf_va_220 */
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)off_e);
    Exec_TC(switch_su_cmd[sen],(unsigned char)0x55,41);
    Check_No_Errors();
    Check_Nonzero(SU_state[sen] == (unsigned int)start_switching_e);
    sen ++;
  }
  Set_AD_Nominal();
  max_adc_hits = (unsigned int)0;
  ad_random_failures = (unsigned int)0;
  check_current_errors = (unsigned int)0;
  v_down_errors = (unsigned int)0;
  Monitor_Health(61);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)switching_e);
    sen ++;
  }
  Monitor_Health(61);
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Check_Nonzero(SU_state[sen] == (unsigned int)on_e);
    sen ++;
  }
  printf("\nCASE: %s:\n\n",(char *)"Switch SU2 to Self Test in Standby mode"); /* printf_va_221 */
  tmp = GetMode();
  Check_Nonzero((int)tmp == 1);
  Check_No_Errors();
  Exec_TC((unsigned char)0x30,(unsigned char)0x99,41);
  Check_No_Errors();
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_mon_e);
  printf("\nCASE: %s:\n\n",(char *)"Switch SU3 (also) to Self Test, fail"); /* printf_va_222 */
  Exec_TC((unsigned char)0x40,(unsigned char)0x99,41);
  Check_Nonzero((int)telemetry_data.error_status & 1);
  Exec_TC((unsigned char)0x03,(unsigned char)0x03,41);
  Check_Zero((int)telemetry_data.error_status & 1);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Run Self Test for SU2"); /* printf_va_223 */
  /*@ loop unroll 10; */
  while (health_mon_round != (uint_least8_t)round_7_e) Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_mon_e);
  Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_e);
  Check_Nonzero(health_mon_round == (uint_least8_t)round_6_e);
  Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)0);
  Check_Nonzero(SU_state[1] == (unsigned int)on_e);
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Run Self Test for SU2, fail"); /* printf_va_224 */
  tmp_0 = GetMode();
  Check_Nonzero((int)tmp_0 == 1);
  Check_No_Errors();
  Exec_TC((unsigned char)0x30,(unsigned char)0x99,41);
  Check_No_Errors();
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_mon_e);
  sim_self_test = (unsigned char)0;
  /*@ loop unroll 10; */
  while (health_mon_round != (uint_least8_t)round_7_e) Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_mon_e);
  Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)2);
  Check_Nonzero(SU_state[1] == (unsigned int)self_test_e);
  Check_Nonzero(health_mon_round == (uint_least8_t)round_6_e);
  Monitor_Health(61);
  Check_Nonzero(self_test_SU_number == (sensor_number_t)0);
  Check_Nonzero(SU_state[1] == (unsigned int)on_e);
  Check_Nonzero((int)telemetry_data.SU_status[1] & 0x10);
  Check_Nonzero((int)telemetry_data.error_status == 0x20);
  Clear_Errors();
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, SU Self Test, correct pulse"); /* printf_va_225 */
  hit_budget_left = (uint_least8_t)15;
  Set_AD_Delay(2);
  ad_conv_num = (unsigned int)0;
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    self_test_SU_number = sen + (sensor_index_t)1;
    SU_state[sen] = self_test_trigger_e;
    Trigger_SU_Hit(sen,31);
    Check_Nonzero(SU_state[sen] == (unsigned int)self_test_e);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_index_t)mail_message[1] == sen + (sensor_index_t)1);
    FlushMail((unsigned char)1);
    sen ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  printf("\nCASE: %s:\n\n",
         (char *)"Hit Trigger, SU Self Test, incorrect pulse"); /* printf_va_226 */
  hit_budget_left = (uint_least8_t)15;
  Set_AD_Delay(2);
  ad_conv_num = (unsigned int)0;
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    self_test_SU_number = sen + (sensor_index_t)1;
    SU_state[sen] = self_test_e;
    Trigger_SU_Hit(sen,31);
    Check_Nonzero(SU_state[sen] == (unsigned int)self_test_e);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((unsigned int)mail_message[1] == ((sen + (sensor_index_t)1) | (unsigned int)0x40));
    FlushMail((unsigned char)1);
    sen ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  printf("\nCASE: %s:\n\n",(char *)"Hit Trigger, SU Self Test, other pulse"); /* printf_va_227 */
  hit_budget_left = (uint_least8_t)15;
  Set_AD_Delay(2);
  ad_conv_num = (unsigned int)0;
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    self_test_SU_number = sen + (sensor_index_t)1;
    SU_state[sen] = on_e;
    Trigger_SU_Hit(sen,31);
    Check_Nonzero(SU_state[sen] == (unsigned int)on_e);
    Check_Nonzero(mail_count[1] == 1);
    Check_Nonzero((sensor_index_t)mail_message[1] == sen + (sensor_index_t)1);
    FlushMail((unsigned char)1);
    sen ++;
  }
  Check_Nonzero(hit_budget_left == (uint_least8_t)(15 - 4));
  Check_No_Errors();
  printf("\nCASE: %s:\n\n",(char *)"Turn Sensor Units OFF after Self Tests"); /* printf_va_228 */
  sen = (sensor_index_t)0;
  while (sen < (sensor_index_t)4) {
    Exec_TC(switch_su_cmd[sen],(unsigned char)0x73,41);
    Check_No_Errors();
    Check_Nonzero(SU_state[sen] == (unsigned int)off_e);
    sen ++;
  }
  return;
}

static unsigned int test_round = (unsigned int)0;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_229(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_230(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_231(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_232(char const * restrict format, int param0);

void StartSystem(unsigned char task_number)
{
  printf("StartSystem %d\n",(int)task_number); /* printf_va_229 */
  InitHealthMonitoring();
  test_round ++;
  printf("Test round %u\n",test_round); /* printf_va_230 */
  printf("Target Start Test.\n"); /* printf_va_231 */
  TC_ISR_Tests();
  Report_Checks();
  TC_Task_Tests();
  Report_Checks();
  Monitoring_Task_Tests();
  Report_Checks();
  TM_Tests();
  Report_Checks();
  Hit_ISR_Tests();
  Report_Checks();
  Acquisition_Tests();
  Report_Checks();
  SU_Self_Test_Tests();
  Report_Checks();
  checks = (unsigned int)0;
  printf("Total mailbox overflows %d\n",mail_overflows); /* printf_va_232 */
  exit(0);
  return;
}

static char data_memory[65536];
unsigned char *Data_Pointer(uint16_t address)
{
  unsigned char *__retres;
  __retres = (unsigned char *)(& data_memory[address]);
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_233(char const * restrict format, int param0, int param1,
                  int param2);

void Set_Data_Byte(data_address_t addr, unsigned char value)
{
  printf("Set_Data_Byte 0x%hhx to %hhu = 0x%hhx\n",(int)addr,(int)value,
         (int)value); /* printf_va_233 */
  data_memory[addr] = (char)value;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_234(char const * restrict format, int param0, int param1,
                  int param2);

unsigned char Get_Data_Byte(data_address_t addr)
{
  unsigned char value = (unsigned char)data_memory[addr];
  printf("Get_Data_Byte 0x%hhx is %hhu = 0x%hhx\n",(int)addr,(int)value,
         (int)value); /* printf_va_234 */
  return value;
}

unsigned char Get_Code_Byte(code_address_t addr)
{
  unsigned char __retres;
  __retres = (unsigned char)0;
  return __retres;
}


