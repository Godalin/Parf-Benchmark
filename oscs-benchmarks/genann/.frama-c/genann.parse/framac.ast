/* Generated by Frama-C */
#include "assert.h"
#include "errno.h"
#include "math.h"
#include "signal.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
#include "time.h"
struct genann;
struct genann {
   int inputs ;
   int hidden_layers ;
   int hidden ;
   int outputs ;
   double (*activation_hidden)(struct genann const *ann, double a) ;
   double (*activation_output)(struct genann const *ann, double a) ;
   int total_weights ;
   int total_neurons ;
   double *weight ;
   double *output ;
   double *delta ;
};
typedef struct genann genann;
genann *genann_init(int inputs, int hidden_layers, int hidden, int outputs);

genann *genann_read(FILE *in);

void genann_randomize(genann *ann);

genann *genann_copy(genann const *ann);

void genann_free(genann *ann);

double const *genann_run(genann const *ann, double const *inputs);

void genann_train(genann const *ann, double const *inputs,
                  double const *desired_outputs, double learning_rate);

void genann_write(genann const *ann, FILE *out);

void genann_init_sigmoid_lookup(genann const *ann);

double genann_act_sigmoid(genann const *ann __attribute__((__unused__)),
                          double a);

double genann_act_sigmoid_cached(genann const *ann __attribute__((__unused__)),
                                 double a);

double genann_act_threshold(struct genann const *ann __attribute__((__unused__)),
                            double a);

double genann_act_linear(struct genann const *ann __attribute__((__unused__)),
                         double a);

double genann_act_hidden_indirect(struct genann const *ann, double a)
{
  double tmp;
  tmp = (*(ann->activation_hidden))(ann,a);
  return tmp;
}

double genann_act_output_indirect(struct genann const *ann, double a)
{
  double tmp;
  tmp = (*(ann->activation_output))(ann,a);
  return tmp;
}

double const sigmoid_dom_min = - 15.0;
double const sigmoid_dom_max = 15.0;
double interval;
double lookup[4096];
double genann_act_sigmoid(genann const *ann __attribute__((__unused__)),
                          double a)
{
  double __retres;
  double tmp;
  if (a < - 45.0) {
    __retres = (double)0;
    goto return_label;
  }
  if (a > 45.0) {
    __retres = (double)1;
    goto return_label;
  }
  tmp = exp(- a);
  __retres = 1.0 / ((double)1 + tmp);
  return_label: return __retres;
}

void genann_init_sigmoid_lookup(genann const *ann)
{
  int i;
  double const f = (sigmoid_dom_max - sigmoid_dom_min) / (double)4096;
  interval = (double)4096 / (sigmoid_dom_max - sigmoid_dom_min);
  i = 0;
  while (i < 4096) {
    lookup[i] = genann_act_sigmoid(ann,sigmoid_dom_min + f * (double)i);
    i ++;
  }
  return;
}

double genann_act_sigmoid_cached(genann const *ann __attribute__((__unused__)),
                                 double a)
{
  double __retres;
  int tmp_2;
  int tmp_1;
  if (sizeof(a) == sizeof(float)) {
    int tmp;
    tmp = __fc_fpclassifyf((float)a);
    tmp_1 = tmp == 0;
  }
  else {
    int tmp_0;
    tmp_0 = __fc_fpclassify(a);
    tmp_1 = tmp_0 == 0;
  }
  if (tmp_1) tmp_2 = 0; else tmp_2 = 1;
  __FC_assert(tmp_2 != 0,"genann.c",87,"!isnan(a)");
  if (a < sigmoid_dom_min) {
    __retres = lookup[0];
    goto return_label;
  }
  if (a >= sigmoid_dom_max) {
    __retres = lookup[4096 - 1];
    goto return_label;
  }
  size_t j = (size_t)((a - sigmoid_dom_min) * interval + 0.5);
  if ((long)(! (! (j >= (size_t)4096)))) {
    __retres = lookup[4096 - 1];
    goto return_label;
  }
  __retres = lookup[j];
  return_label: return __retres;
}

double genann_act_linear(struct genann const *ann __attribute__((__unused__)),
                         double a)
{
  return a;
}

double genann_act_threshold(struct genann const *ann __attribute__((__unused__)),
                            double a)
{
  double __retres;
  __retres = (double)(a > (double)0);
  return __retres;
}

genann *genann_init(int inputs, int hidden_layers, int hidden, int outputs)
{
  genann *__retres;
  int tmp;
  int tmp_0;
  if (hidden_layers < 0) {
    __retres = (genann *)0;
    goto return_label;
  }
  if (inputs < 1) {
    __retres = (genann *)0;
    goto return_label;
  }
  if (outputs < 1) {
    __retres = (genann *)0;
    goto return_label;
  }
  if (hidden_layers > 0) 
    if (hidden < 1) {
      __retres = (genann *)0;
      goto return_label;
    }
  if (hidden_layers) tmp = (inputs + 1) * hidden + ((hidden_layers - 1) * (
                                                    hidden + 1)) * hidden;
  else tmp = 0;
  int const hidden_weights = tmp;
  if (hidden_layers) tmp_0 = hidden + 1; else tmp_0 = inputs + 1;
  int const output_weights = tmp_0 * outputs;
  int const total_weights = hidden_weights + output_weights;
  int const total_neurons = (inputs + hidden * hidden_layers) + outputs;
  int const size =
    (int)(sizeof(genann) + sizeof(double) * (unsigned long)((total_weights + total_neurons) + (
                                                            total_neurons - inputs)));
  genann *ret = malloc((size_t)size);
  if (! ret) {
    __retres = (genann *)0;
    goto return_label;
  }
  ret->inputs = inputs;
  ret->hidden_layers = hidden_layers;
  ret->hidden = hidden;
  ret->outputs = outputs;
  ret->total_weights = total_weights;
  ret->total_neurons = total_neurons;
  ret->weight = (double *)((char *)ret + sizeof(genann));
  ret->output = ret->weight + ret->total_weights;
  ret->delta = ret->output + ret->total_neurons;
  genann_randomize(ret);
  ret->activation_hidden = & genann_act_sigmoid_cached;
  ret->activation_output = & genann_act_sigmoid_cached;
  genann_init_sigmoid_lookup((genann const *)ret);
  __retres = ret;
  return_label: return __retres;
}

/*@ requires \valid(param0);
    requires \valid(param1);
    requires \valid(param2);
    requires \valid(param3);
    requires valid_read_string(format);
    ensures \initialized(param0);
    ensures \initialized(param1);
    ensures \initialized(param2);
    ensures \initialized(param3);
    assigns \result, stream->__fc_FILE_data, *param3, *param2, *param1,
            *param0;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param3
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param2
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param1
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fscanf_va_1(FILE * restrict stream, char const * restrict format,
                int *param0, int *param1, int *param2, int *param3);

/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, stream->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fscanf_va_2(FILE * restrict stream, char const * restrict format,
                double *param0);

genann *genann_read(FILE *in)
{
  genann *__retres;
  int inputs;
  int hidden_layers;
  int hidden;
  int outputs;
  int rc;
  int i;
  __fc_errno = 0;
  rc = fscanf(in,"%d %d %d %d",& inputs,& hidden_layers,& hidden,& outputs); /* fscanf_va_1 */
  if (rc < 4) goto _LOR;
  else 
    if (__fc_errno != 0) {
      _LOR: {
              perror("fscanf");
              __retres = (genann *)0;
              goto return_label;
            }
    }
  genann *ann = genann_init(inputs,hidden_layers,hidden,outputs);
  i = 0;
  while (i < ann->total_weights) {
    __fc_errno = 0;
    rc = fscanf(in," %le",ann->weight + i); /* fscanf_va_2 */
    if (rc < 1) goto _LOR_0;
    else 
      if (__fc_errno != 0) {
        _LOR_0:
        {
          perror("fscanf");
          genann_free(ann);
          __retres = (genann *)0;
          goto return_label;
        }
      }
    i ++;
  }
  __retres = ann;
  return_label: return __retres;
}

genann *genann_copy(genann const *ann)
{
  genann *__retres;
  int const size =
    (int)(sizeof(genann) + sizeof(double) * (unsigned long)((ann->total_weights + ann->total_neurons) + (
                                                            ann->total_neurons - ann->inputs)));
  genann *ret = malloc((size_t)size);
  if (! ret) {
    __retres = (genann *)0;
    goto return_label;
  }
  memcpy((void *)ret,(void const *)ann,(size_t)size);
  ret->weight = (double *)((char *)ret + sizeof(genann));
  ret->output = ret->weight + ret->total_weights;
  ret->delta = ret->output + ret->total_neurons;
  __retres = ret;
  return_label: return __retres;
}

void genann_randomize(genann *ann)
{
  int i;
  i = 0;
  while (i < ann->total_weights) {
    {
      int tmp;
      tmp = rand();
      double r = (double)tmp / (double)2147483647;
      *(ann->weight + i) = r - 0.5;
    }
    i ++;
  }
  return;
}

void genann_free(genann *ann)
{
  free((void *)ann);
  return;
}

double const *genann_run(genann const *ann, double const *inputs)
{
  double const *__retres;
  int h;
  int j;
  int k;
  double const *w = (double const *)ann->weight;
  double *o = ann->output + ann->inputs;
  double const *i = (double const *)ann->output;
  memcpy((void *)ann->output,(void const *)inputs,
         sizeof(double) * (unsigned long)ann->inputs);
  if (! ann->hidden_layers) {
    double *ret = o;
    j = 0;
    while (j < ann->outputs) {
      {
        double const *tmp;
        double *tmp_1;
        tmp = w;
        w ++;
        double sum = *tmp * - 1.0;
        k = 0;
        while (k < ann->inputs) {
          {
            double const *tmp_0;
            tmp_0 = w;
            w ++;
            sum += *tmp_0 * *(i + k);
          }
          k ++;
        }
        tmp_1 = o;
        o ++;
        *tmp_1 = genann_act_output_indirect(ann,sum);
      }
      j ++;
    }
    __retres = (double const *)ret;
    goto return_label;
  }
  j = 0;
  while (j < ann->hidden) {
    {
      double const *tmp_2;
      double *tmp_4;
      tmp_2 = w;
      w ++;
      double sum_0 = *tmp_2 * - 1.0;
      k = 0;
      while (k < ann->inputs) {
        {
          double const *tmp_3;
          tmp_3 = w;
          w ++;
          sum_0 += *tmp_3 * *(i + k);
        }
        k ++;
      }
      tmp_4 = o;
      o ++;
      *tmp_4 = genann_act_hidden_indirect(ann,sum_0);
    }
    j ++;
  }
  i += ann->inputs;
  h = 1;
  while (h < ann->hidden_layers) {
    j = 0;
    while (j < ann->hidden) {
      {
        double const *tmp_5;
        double *tmp_7;
        tmp_5 = w;
        w ++;
        double sum_1 = *tmp_5 * - 1.0;
        k = 0;
        while (k < ann->hidden) {
          {
            double const *tmp_6;
            tmp_6 = w;
            w ++;
            sum_1 += *tmp_6 * *(i + k);
          }
          k ++;
        }
        tmp_7 = o;
        o ++;
        *tmp_7 = genann_act_hidden_indirect(ann,sum_1);
      }
      j ++;
    }
    i += ann->hidden;
    h ++;
  }
  double const *ret_0 = (double const *)o;
  j = 0;
  while (j < ann->outputs) {
    {
      double const *tmp_8;
      double *tmp_10;
      tmp_8 = w;
      w ++;
      double sum_2 = *tmp_8 * - 1.0;
      k = 0;
      while (k < ann->hidden) {
        {
          double const *tmp_9;
          tmp_9 = w;
          w ++;
          sum_2 += *tmp_9 * *(i + k);
        }
        k ++;
      }
      tmp_10 = o;
      o ++;
      *tmp_10 = genann_act_output_indirect(ann,sum_2);
    }
    j ++;
  }
  __FC_assert((w - ann->weight == (long)ann->total_weights) != 0,"genann.c",
              271,"w - ann->weight == ann->total_weights");
  __FC_assert((o - ann->output == (long)ann->total_neurons) != 0,"genann.c",
              272,"o - ann->output == ann->total_neurons");
  __retres = ret_0;
  return_label: return __retres;
}

void genann_train(genann const *ann, double const *inputs,
                  double const *desired_outputs, double learning_rate)
{
  int h;
  int j;
  int k;
  genann_run(ann,inputs);
  {
    double const *o =
      (double const *)((ann->output + ann->inputs) + ann->hidden * ann->hidden_layers);
    double *d = ann->delta + ann->hidden * ann->hidden_layers;
    double const *t = desired_outputs;
    if (& genann_act_output_indirect == & genann_act_linear) goto _LOR;
    else 
      if (ann->activation_output == & genann_act_linear) {
        _LOR:
        {
          j = 0;
          while (j < ann->outputs) {
            {
              double *tmp;
              double const *tmp_0;
              double const *tmp_1;
              tmp = d;
              d ++;
              tmp_0 = t;
              t ++;
              tmp_1 = o;
              o ++;
              *tmp = *tmp_0 - *tmp_1;
            }
            j ++;
          }
        }
      }
      else {
        j = 0;
        while (j < ann->outputs) {
          {
            double *tmp_2;
            tmp_2 = d;
            d ++;
            *tmp_2 = ((*t - *o) * *o) * (1.0 - *o);
            o ++;
            t ++;
          }
          j ++;
        }
      }
  }
  h = ann->hidden_layers - 1;
  while (h >= 0) {
    {
      double const *o_0 =
        (double const *)((ann->output + ann->inputs) + h * ann->hidden);
      double *d_0 = ann->delta + h * ann->hidden;
      double const * const dd =
        (double const *)(ann->delta + (h + 1) * ann->hidden);
      double const * const ww =
        (double const *)((ann->weight + (ann->inputs + 1) * ann->hidden) + 
                         ((ann->hidden + 1) * ann->hidden) * h);
      j = 0;
      while (j < ann->hidden) {
        {
          double delta = (double)0;
          k = 0;
          while (1) {
            int tmp_3;
            if (h == ann->hidden_layers - 1) tmp_3 = ann->outputs;
            else tmp_3 = ann->hidden;
            ;
            if (! (k < tmp_3)) break;
            {
              double const forward_delta = *(dd + k);
              int const windex = k * (ann->hidden + 1) + (j + 1);
              double const forward_weight = *(ww + windex);
              delta += forward_delta * forward_weight;
            }
            k ++;
          }
          *d_0 = (*o_0 * (1.0 - *o_0)) * delta;
          d_0 ++;
          o_0 ++;
        }
        j ++;
      }
    }
    h --;
  }
  {
    int tmp_4;
    int tmp_5;
    double const *d_1 =
      (double const *)(ann->delta + ann->hidden * ann->hidden_layers);
    if (ann->hidden_layers) tmp_4 = (ann->inputs + 1) * ann->hidden + 
                                    ((ann->hidden + 1) * ann->hidden) * (
                                    ann->hidden_layers - 1);
    else tmp_4 = 0;
    double *w = ann->weight + tmp_4;
    if (ann->hidden_layers) tmp_5 = ann->inputs + ann->hidden * (ann->hidden_layers - 1);
    else tmp_5 = 0;
    double const * const i = (double const *)(ann->output + tmp_5);
    j = 0;
    while (j < ann->outputs) {
      {
        double *tmp_6;
        tmp_6 = w;
        w ++;
        *tmp_6 += (*d_1 * learning_rate) * - 1.0;
        k = 1;
        while (1) {
          int tmp_8;
          if (ann->hidden_layers) tmp_8 = ann->hidden;
          else tmp_8 = ann->inputs;
          ;
          if (! (k < tmp_8 + 1)) break;
          {
            double *tmp_7;
            tmp_7 = w;
            w ++;
            *tmp_7 += (*d_1 * learning_rate) * *(i + (k - 1));
          }
          k ++;
        }
        d_1 ++;
      }
      j ++;
    }
    __FC_assert((w - ann->weight == (long)ann->total_weights) != 0,
                "genann.c",362,"w - ann->weight == ann->total_weights");
  }
  h = ann->hidden_layers - 1;
  while (h >= 0) {
    {
      int tmp_9;
      int tmp_10;
      double const *d_2 = (double const *)(ann->delta + h * ann->hidden);
      if (h) tmp_9 = ann->inputs + ann->hidden * (h - 1); else tmp_9 = 0;
      double const *i_0 = (double const *)(ann->output + tmp_9);
      if (h) tmp_10 = (ann->inputs + 1) * ann->hidden + ((ann->hidden + 1) * ann->hidden) * (
                                                        h - 1);
      else tmp_10 = 0;
      double *w_0 = ann->weight + tmp_10;
      j = 0;
      while (j < ann->hidden) {
        {
          double *tmp_11;
          tmp_11 = w_0;
          w_0 ++;
          *tmp_11 += (*d_2 * learning_rate) * - 1.0;
          k = 1;
          while (1) {
            int tmp_13;
            if (h == 0) tmp_13 = ann->inputs; else tmp_13 = ann->hidden;
            ;
            if (! (k < tmp_13 + 1)) break;
            {
              double *tmp_12;
              tmp_12 = w_0;
              w_0 ++;
              *tmp_12 += (*d_2 * learning_rate) * *(i_0 + (k - 1));
            }
            k ++;
          }
          d_2 ++;
        }
        j ++;
      }
    }
    h --;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param3, param2, param1, param0;
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 int param0, int param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param0;
 */
int fprintf_va_2(FILE * restrict stream, char const * restrict format,
                 double param0);

void genann_write(genann const *ann, FILE *out)
{
  int i;
  fprintf(out,"%d %d %d %d",ann->inputs,ann->hidden_layers,ann->hidden,
          ann->outputs); /* fprintf_va_1 */
  i = 0;
  while (i < ann->total_weights) {
    fprintf(out," %.20e",*(ann->weight + i)); /* fprintf_va_2 */
    i ++;
  }
  return;
}

static int ltests = 0;
static int lfails = 0;
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1(char const * restrict format, char *param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_3(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_4(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_5(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_6(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_7(char const * restrict format, char *param0, int param1,
                double param2, double param3);

void basic(void)
{
  double a;
  genann *ann = genann_init(1,0,0,1);
  ltests ++;
  if (ann->total_weights != 2) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",37,ann->total_weights,2); /* printf_va_1 */
  }
  a = (double)0;
  *(ann->weight + 0) = (double)0;
  *(ann->weight + 1) = (double)0;
  {
    double tmp_2;
    double const *tmp_1;
    ltests ++;
    tmp_1 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_2 = fabs(0.5 - *tmp_1);
    if (tmp_2 > 0.001) {
      double const *tmp_0;
      lfails ++;
      tmp_0 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",44,0.5,*tmp_0); /* printf_va_2 */
    }
  }
  a = (double)1;
  {
    double tmp_5;
    double const *tmp_4;
    ltests ++;
    tmp_4 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_5 = fabs(0.5 - *tmp_4);
    if (tmp_5 > 0.001) {
      double const *tmp_3;
      lfails ++;
      tmp_3 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",47,0.5,*tmp_3); /* printf_va_3 */
    }
  }
  a = (double)11;
  {
    double tmp_8;
    double const *tmp_7;
    ltests ++;
    tmp_7 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_8 = fabs(0.5 - *tmp_7);
    if (tmp_8 > 0.001) {
      double const *tmp_6;
      lfails ++;
      tmp_6 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",50,0.5,*tmp_6); /* printf_va_4 */
    }
  }
  a = (double)1;
  *(ann->weight + 0) = (double)1;
  *(ann->weight + 1) = (double)1;
  {
    double tmp_11;
    double const *tmp_10;
    ltests ++;
    tmp_10 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_11 = fabs(0.5 - *tmp_10);
    if (tmp_11 > 0.001) {
      double const *tmp_9;
      lfails ++;
      tmp_9 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",55,0.5,*tmp_9); /* printf_va_5 */
    }
  }
  a = (double)10;
  *(ann->weight + 0) = (double)1;
  *(ann->weight + 1) = (double)1;
  {
    double tmp_14;
    double const *tmp_13;
    ltests ++;
    tmp_13 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_14 = fabs(1.0 - *tmp_13);
    if (tmp_14 > 0.001) {
      double const *tmp_12;
      lfails ++;
      tmp_12 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",60,1.0,*tmp_12); /* printf_va_6 */
    }
  }
  a = (double)(-10);
  {
    double tmp_17;
    double const *tmp_16;
    ltests ++;
    tmp_16 = genann_run((genann const *)ann,(double const *)(& a));
    ;
    tmp_17 = fabs(0.0 - *tmp_16);
    if (tmp_17 > 0.001) {
      double const *tmp_15;
      lfails ++;
      tmp_15 = genann_run((genann const *)ann,(double const *)(& a));
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",63,0.0,*tmp_15); /* printf_va_7 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_8(char const * restrict format, char *param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_9(char const * restrict format, char *param0, int param1,
                double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_10(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_11(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_12(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void xor(void)
{
  genann *ann = genann_init(2,1,2,1);
  ann->activation_hidden = & genann_act_threshold;
  ann->activation_output = & genann_act_threshold;
  ltests ++;
  if (ann->total_weights != 9) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",74,ann->total_weights,9); /* printf_va_8 */
  }
  *(ann->weight + 0) = .5;
  *(ann->weight + 1) = (double)1;
  *(ann->weight + 2) = (double)1;
  *(ann->weight + 3) = (double)1;
  *(ann->weight + 4) = (double)1;
  *(ann->weight + 5) = (double)1;
  *(ann->weight + 6) = .5;
  *(ann->weight + 7) = (double)1;
  *(ann->weight + 8) = (double)(-1);
  double input[4][2] =
    {{(double)0, (double)0},
     {(double)0, (double)1},
     {(double)1, (double)0},
     {(double)1, (double)1}};
  double output[4] = {(double)0, (double)1, (double)1, (double)0};
  {
    double tmp_2;
    double const *tmp_1;
    ltests ++;
    tmp_1 = genann_run((genann const *)ann,(double const *)(input[0]));
    ;
    tmp_2 = fabs(output[0] - *tmp_1);
    if (tmp_2 > 0.001) {
      double const *tmp_0;
      lfails ++;
      tmp_0 = genann_run((genann const *)ann,(double const *)(input[0]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",95,output[0],*tmp_0); /* printf_va_9 */
    }
  }
  {
    double tmp_5;
    double const *tmp_4;
    ltests ++;
    tmp_4 = genann_run((genann const *)ann,(double const *)(input[1]));
    ;
    tmp_5 = fabs(output[1] - *tmp_4);
    if (tmp_5 > 0.001) {
      double const *tmp_3;
      lfails ++;
      tmp_3 = genann_run((genann const *)ann,(double const *)(input[1]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",96,output[1],*tmp_3); /* printf_va_10 */
    }
  }
  {
    double tmp_8;
    double const *tmp_7;
    ltests ++;
    tmp_7 = genann_run((genann const *)ann,(double const *)(input[2]));
    ;
    tmp_8 = fabs(output[2] - *tmp_7);
    if (tmp_8 > 0.001) {
      double const *tmp_6;
      lfails ++;
      tmp_6 = genann_run((genann const *)ann,(double const *)(input[2]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",97,output[2],*tmp_6); /* printf_va_11 */
    }
  }
  {
    double tmp_11;
    double const *tmp_10;
    ltests ++;
    tmp_10 = genann_run((genann const *)ann,(double const *)(input[3]));
    ;
    tmp_11 = fabs(output[3] - *tmp_10);
    if (tmp_11 > 0.001) {
      double const *tmp_9;
      lfails ++;
      tmp_9 = genann_run((genann const *)ann,(double const *)(input[3]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",98,output[3],*tmp_9); /* printf_va_12 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_13(char const * restrict format, char *param0, int param1);

void backprop(void)
{
  double input;
  double output;
  double const *tmp_0;
  double const *tmp_1;
  genann *ann = genann_init(1,0,0,1);
  input = .5;
  output = (double)1;
  tmp_0 = genann_run((genann const *)ann,(double const *)(& input));
  double first_try = *tmp_0;
  genann_train((genann const *)ann,(double const *)(& input),
               (double const *)(& output),.5);
  tmp_1 = genann_run((genann const *)ann,(double const *)(& input));
  double second_try = *tmp_1;
  {
    double tmp_2;
    double tmp_3;
    ltests ++;
    tmp_2 = fabs(first_try - output);
    tmp_3 = fabs(second_try - output);
    if (! (tmp_2 > tmp_3)) {
      lfails ++;
      printf("%s:%d error \n",(char *)"./test.c",114); /* printf_va_13 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_14(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_15(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_16(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_17(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void train_and(void)
{
  int i;
  int j;
  double input[4][2] =
    {{(double)0, (double)0},
     {(double)0, (double)1},
     {(double)1, (double)0},
     {(double)1, (double)1}};
  double output[4] = {(double)0, (double)0, (double)0, (double)1};
  genann *ann = genann_init(2,0,0,1);
  i = 0;
  while (i < 50) {
    j = 0;
    while (j < 4) {
      genann_train((genann const *)ann,(double const *)(input[j]),
                   (double const *)(& output[j]),.8);
      j ++;
    }
    i ++;
  }
  ann->activation_output = & genann_act_threshold;
  {
    double tmp_2;
    double const *tmp_1;
    ltests ++;
    tmp_1 = genann_run((genann const *)ann,(double const *)(input[0]));
    ;
    tmp_2 = fabs(output[0] - *tmp_1);
    if (tmp_2 > 0.001) {
      double const *tmp_0;
      lfails ++;
      tmp_0 = genann_run((genann const *)ann,(double const *)(input[0]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",135,output[0],*tmp_0); /* printf_va_14 */
    }
  }
  {
    double tmp_5;
    double const *tmp_4;
    ltests ++;
    tmp_4 = genann_run((genann const *)ann,(double const *)(input[1]));
    ;
    tmp_5 = fabs(output[1] - *tmp_4);
    if (tmp_5 > 0.001) {
      double const *tmp_3;
      lfails ++;
      tmp_3 = genann_run((genann const *)ann,(double const *)(input[1]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",136,output[1],*tmp_3); /* printf_va_15 */
    }
  }
  {
    double tmp_8;
    double const *tmp_7;
    ltests ++;
    tmp_7 = genann_run((genann const *)ann,(double const *)(input[2]));
    ;
    tmp_8 = fabs(output[2] - *tmp_7);
    if (tmp_8 > 0.001) {
      double const *tmp_6;
      lfails ++;
      tmp_6 = genann_run((genann const *)ann,(double const *)(input[2]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",137,output[2],*tmp_6); /* printf_va_16 */
    }
  }
  {
    double tmp_11;
    double const *tmp_10;
    ltests ++;
    tmp_10 = genann_run((genann const *)ann,(double const *)(input[3]));
    ;
    tmp_11 = fabs(output[3] - *tmp_10);
    if (tmp_11 > 0.001) {
      double const *tmp_9;
      lfails ++;
      tmp_9 = genann_run((genann const *)ann,(double const *)(input[3]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",138,output[3],*tmp_9); /* printf_va_17 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_18(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_19(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_20(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_21(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void train_or(void)
{
  int i;
  int j;
  double input[4][2] =
    {{(double)0, (double)0},
     {(double)0, (double)1},
     {(double)1, (double)0},
     {(double)1, (double)1}};
  double output[4] = {(double)0, (double)1, (double)1, (double)1};
  genann *ann = genann_init(2,0,0,1);
  genann_randomize(ann);
  i = 0;
  while (i < 50) {
    j = 0;
    while (j < 4) {
      genann_train((genann const *)ann,(double const *)(input[j]),
                   (double const *)(& output[j]),.8);
      j ++;
    }
    i ++;
  }
  ann->activation_output = & genann_act_threshold;
  {
    double tmp_2;
    double const *tmp_1;
    ltests ++;
    tmp_1 = genann_run((genann const *)ann,(double const *)(input[0]));
    ;
    tmp_2 = fabs(output[0] - *tmp_1);
    if (tmp_2 > 0.001) {
      double const *tmp_0;
      lfails ++;
      tmp_0 = genann_run((genann const *)ann,(double const *)(input[0]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",160,output[0],*tmp_0); /* printf_va_18 */
    }
  }
  {
    double tmp_5;
    double const *tmp_4;
    ltests ++;
    tmp_4 = genann_run((genann const *)ann,(double const *)(input[1]));
    ;
    tmp_5 = fabs(output[1] - *tmp_4);
    if (tmp_5 > 0.001) {
      double const *tmp_3;
      lfails ++;
      tmp_3 = genann_run((genann const *)ann,(double const *)(input[1]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",161,output[1],*tmp_3); /* printf_va_19 */
    }
  }
  {
    double tmp_8;
    double const *tmp_7;
    ltests ++;
    tmp_7 = genann_run((genann const *)ann,(double const *)(input[2]));
    ;
    tmp_8 = fabs(output[2] - *tmp_7);
    if (tmp_8 > 0.001) {
      double const *tmp_6;
      lfails ++;
      tmp_6 = genann_run((genann const *)ann,(double const *)(input[2]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",162,output[2],*tmp_6); /* printf_va_20 */
    }
  }
  {
    double tmp_11;
    double const *tmp_10;
    ltests ++;
    tmp_10 = genann_run((genann const *)ann,(double const *)(input[3]));
    ;
    tmp_11 = fabs(output[3] - *tmp_10);
    if (tmp_11 > 0.001) {
      double const *tmp_9;
      lfails ++;
      tmp_9 = genann_run((genann const *)ann,(double const *)(input[3]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",163,output[3],*tmp_9); /* printf_va_21 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_22(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_23(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_24(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_25(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void train_xor(void)
{
  int i;
  int j;
  double input[4][2] =
    {{(double)0, (double)0},
     {(double)0, (double)1},
     {(double)1, (double)0},
     {(double)1, (double)1}};
  double output[4] = {(double)0, (double)1, (double)1, (double)0};
  genann *ann = genann_init(2,1,2,1);
  i = 0;
  while (i < 500) {
    j = 0;
    while (j < 4) {
      genann_train((genann const *)ann,(double const *)(input[j]),
                   (double const *)(& output[j]),(double)3);
      j ++;
    }
    i ++;
  }
  ann->activation_output = & genann_act_threshold;
  {
    double tmp_2;
    double const *tmp_1;
    ltests ++;
    tmp_1 = genann_run((genann const *)ann,(double const *)(input[0]));
    ;
    tmp_2 = fabs(output[0] - *tmp_1);
    if (tmp_2 > 0.001) {
      double const *tmp_0;
      lfails ++;
      tmp_0 = genann_run((genann const *)ann,(double const *)(input[0]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",186,output[0],*tmp_0); /* printf_va_22 */
    }
  }
  {
    double tmp_5;
    double const *tmp_4;
    ltests ++;
    tmp_4 = genann_run((genann const *)ann,(double const *)(input[1]));
    ;
    tmp_5 = fabs(output[1] - *tmp_4);
    if (tmp_5 > 0.001) {
      double const *tmp_3;
      lfails ++;
      tmp_3 = genann_run((genann const *)ann,(double const *)(input[1]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",187,output[1],*tmp_3); /* printf_va_23 */
    }
  }
  {
    double tmp_8;
    double const *tmp_7;
    ltests ++;
    tmp_7 = genann_run((genann const *)ann,(double const *)(input[2]));
    ;
    tmp_8 = fabs(output[2] - *tmp_7);
    if (tmp_8 > 0.001) {
      double const *tmp_6;
      lfails ++;
      tmp_6 = genann_run((genann const *)ann,(double const *)(input[2]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",188,output[2],*tmp_6); /* printf_va_24 */
    }
  }
  {
    double tmp_11;
    double const *tmp_10;
    ltests ++;
    tmp_10 = genann_run((genann const *)ann,(double const *)(input[3]));
    ;
    tmp_11 = fabs(output[3] - *tmp_10);
    if (tmp_11 > 0.001) {
      double const *tmp_9;
      lfails ++;
      tmp_9 = genann_run((genann const *)ann,(double const *)(input[3]));
      ;
      printf("%s:%d (%f != %f)\n",(char *)"./test.c",189,output[3],*tmp_9); /* printf_va_25 */
    }
  }
  genann_free(ann);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_26(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_27(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_28(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_29(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_30(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_31(char const * restrict format, char *param0, int param1);

void persist(void)
{
  int i;
  genann *first = genann_init(1000,5,50,10);
  FILE *out = fopen("persist.txt","w");
  genann_write((genann const *)first,out);
  fclose(out);
  FILE *in = fopen("persist.txt","r");
  genann *second = genann_read(in);
  fclose(in);
  ltests ++;
  if (first->inputs != second->inputs) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",208,first->inputs,
           second->inputs); /* printf_va_26 */
  }
  ltests ++;
  if (first->hidden_layers != second->hidden_layers) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",209,first->hidden_layers,
           second->hidden_layers); /* printf_va_27 */
  }
  ltests ++;
  if (first->hidden != second->hidden) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",210,first->hidden,
           second->hidden); /* printf_va_28 */
  }
  ltests ++;
  if (first->outputs != second->outputs) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",211,first->outputs,
           second->outputs); /* printf_va_29 */
  }
  ltests ++;
  if (first->total_weights != second->total_weights) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",212,first->total_weights,
           second->total_weights); /* printf_va_30 */
  }
  i = 0;
  while (i < first->total_weights) {
    ltests ++;
    if (! (*(first->weight + i) == *(second->weight + i))) {
      lfails ++;
      printf("%s:%d error \n",(char *)"./test.c",216); /* printf_va_31 */
    }
    i ++;
  }
  genann_free(first);
  genann_free(second);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_32(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_33(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_34(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_35(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_36(char const * restrict format, char *param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_37(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void copy(void)
{
  int i;
  genann *first = genann_init(1000,5,50,10);
  genann *second = genann_copy((genann const *)first);
  ltests ++;
  if (first->inputs != second->inputs) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",229,first->inputs,
           second->inputs); /* printf_va_32 */
  }
  ltests ++;
  if (first->hidden_layers != second->hidden_layers) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",230,first->hidden_layers,
           second->hidden_layers); /* printf_va_33 */
  }
  ltests ++;
  if (first->hidden != second->hidden) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",231,first->hidden,
           second->hidden); /* printf_va_34 */
  }
  ltests ++;
  if (first->outputs != second->outputs) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",232,first->outputs,
           second->outputs); /* printf_va_35 */
  }
  ltests ++;
  if (first->total_weights != second->total_weights) {
    lfails ++;
    printf("%s:%d (%d != %d)\n",(char *)"./test.c",233,first->total_weights,
           second->total_weights); /* printf_va_36 */
  }
  i = 0;
  while (i < first->total_weights) {
    {
      double tmp_1;
      ltests ++;
      tmp_1 = fabs(*(first->weight + i) - *(second->weight + i));
      if (tmp_1 > 0.001) {
        lfails ++;
        printf("%s:%d (%f != %f)\n",(char *)"./test.c",237,
               *(first->weight + i),*(second->weight + i)); /* printf_va_37 */
      }
    }
    i ++;
  }
  genann_free(first);
  genann_free(second);
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_38(char const * restrict format, char *param0, int param1,
                 double param2, double param3);

void sigmoid(void)
{
  double i = (double)(-20);
  double const max = (double)20;
  double const d = .0001;
  while (i < max) {
    {
      double tmp_3;
      double tmp_1;
      double tmp_2;
      ltests ++;
      tmp_1 = genann_act_sigmoid((genann const *)0,i);
      tmp_2 = genann_act_sigmoid_cached((genann const *)0,i);
      tmp_3 = fabs(tmp_1 - tmp_2);
      if (tmp_3 > 0.001) {
        double tmp;
        double tmp_0;
        lfails ++;
        tmp = genann_act_sigmoid_cached((genann const *)0,i);
        tmp_0 = genann_act_sigmoid((genann const *)0,i);
        printf("%s:%d (%f != %f)\n",(char *)"./test.c",251,tmp_0,tmp); /* printf_va_38 */
      }
    }
    i += d;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_39(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_40(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_41(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_42(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_43(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_44(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_45(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_46(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_47(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_48(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_49(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_50(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_51(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_52(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_53(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_54(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_55(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_56(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_57(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_58(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_59(char const * restrict format, int param0, int param1);

int main(int argc, char **argv)
{
  int __retres;
  printf("GENANN TEST SUITE\n"); /* printf_va_39 */
  srand((unsigned int)100);
  {
    clock_t tmp_0;
    int const ts = ltests;
    int const fs = lfails;
    clock_t const start = clock();
    printf("\t%-14s",(char *)"basic"); /* printf_va_40 */
    basic();
    tmp_0 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts) - (lfails - fs),
           lfails - fs,
           (int)((time_t)((tmp_0 - start) * (clock_t)1000) / (time_t)1000000)); /* printf_va_41 */
  }
  {
    clock_t tmp_2;
    int const ts_0 = ltests;
    int const fs_0 = lfails;
    clock_t const start_0 = clock();
    printf("\t%-14s",(char *)"xor"); /* printf_va_42 */
    xor();
    tmp_2 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_0) - (lfails - fs_0),
           lfails - fs_0,
           (int)((time_t)((tmp_2 - start_0) * (clock_t)1000) / (time_t)1000000)); /* printf_va_43 */
  }
  {
    clock_t tmp_4;
    int const ts_1 = ltests;
    int const fs_1 = lfails;
    clock_t const start_1 = clock();
    printf("\t%-14s",(char *)"backprop"); /* printf_va_44 */
    backprop();
    tmp_4 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_1) - (lfails - fs_1),
           lfails - fs_1,
           (int)((time_t)((tmp_4 - start_1) * (clock_t)1000) / (time_t)1000000)); /* printf_va_45 */
  }
  {
    clock_t tmp_6;
    int const ts_2 = ltests;
    int const fs_2 = lfails;
    clock_t const start_2 = clock();
    printf("\t%-14s",(char *)"train and"); /* printf_va_46 */
    train_and();
    tmp_6 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_2) - (lfails - fs_2),
           lfails - fs_2,
           (int)((time_t)((tmp_6 - start_2) * (clock_t)1000) / (time_t)1000000)); /* printf_va_47 */
  }
  {
    clock_t tmp_8;
    int const ts_3 = ltests;
    int const fs_3 = lfails;
    clock_t const start_3 = clock();
    printf("\t%-14s",(char *)"train or"); /* printf_va_48 */
    train_or();
    tmp_8 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_3) - (lfails - fs_3),
           lfails - fs_3,
           (int)((time_t)((tmp_8 - start_3) * (clock_t)1000) / (time_t)1000000)); /* printf_va_49 */
  }
  {
    clock_t tmp_10;
    int const ts_4 = ltests;
    int const fs_4 = lfails;
    clock_t const start_4 = clock();
    printf("\t%-14s",(char *)"train xor"); /* printf_va_50 */
    train_xor();
    tmp_10 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_4) - (lfails - fs_4),
           lfails - fs_4,
           (int)((time_t)((tmp_10 - start_4) * (clock_t)1000) / (time_t)1000000)); /* printf_va_51 */
  }
  {
    clock_t tmp_12;
    int const ts_5 = ltests;
    int const fs_5 = lfails;
    clock_t const start_5 = clock();
    printf("\t%-14s",(char *)"persist"); /* printf_va_52 */
    persist();
    tmp_12 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_5) - (lfails - fs_5),
           lfails - fs_5,
           (int)((time_t)((tmp_12 - start_5) * (clock_t)1000) / (time_t)1000000)); /* printf_va_53 */
  }
  {
    clock_t tmp_14;
    int const ts_6 = ltests;
    int const fs_6 = lfails;
    clock_t const start_6 = clock();
    printf("\t%-14s",(char *)"copy"); /* printf_va_54 */
    copy();
    tmp_14 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_6) - (lfails - fs_6),
           lfails - fs_6,
           (int)((time_t)((tmp_14 - start_6) * (clock_t)1000) / (time_t)1000000)); /* printf_va_55 */
  }
  {
    clock_t tmp_16;
    int const ts_7 = ltests;
    int const fs_7 = lfails;
    clock_t const start_7 = clock();
    printf("\t%-14s",(char *)"sigmoid"); /* printf_va_56 */
    sigmoid();
    tmp_16 = clock();
    ;
    ;
    ;
    printf("pass:%2d   fail:%2d   %4dms\n",(ltests - ts_7) - (lfails - fs_7),
           lfails - fs_7,
           (int)((time_t)((tmp_16 - start_7) * (clock_t)1000) / (time_t)1000000)); /* printf_va_57 */
  }
  if (lfails == 0) printf("ALL TESTS PASSED (%d/%d)\n",ltests,ltests); /* printf_va_58 */
  else printf("SOME TESTS FAILED (%d/%d)\n",ltests - lfails,ltests); /* printf_va_59 */
  __retres = lfails != 0;
  return __retres;
}


