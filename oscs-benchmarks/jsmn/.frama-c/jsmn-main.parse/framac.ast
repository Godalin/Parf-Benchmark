/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
enum __anonenum_jsmntype_t_1 {
    JSMN_UNDEFINED = 0,
    JSMN_OBJECT = 1,
    JSMN_ARRAY = 2,
    JSMN_STRING = 3,
    JSMN_PRIMITIVE = 4
};
typedef enum __anonenum_jsmntype_t_1 jsmntype_t;
enum jsmnerr {
    JSMN_ERROR_NOMEM = -1,
    JSMN_ERROR_INVAL = -2,
    JSMN_ERROR_PART = -3
};
struct __anonstruct_jsmntok_t_2 {
   jsmntype_t type ;
   int start ;
   int end ;
   int size ;
};
typedef struct __anonstruct_jsmntok_t_2 jsmntok_t;
struct __anonstruct_jsmn_parser_3 {
   unsigned int pos ;
   unsigned int toknext ;
   int toksuper ;
};
typedef struct __anonstruct_jsmn_parser_3 jsmn_parser;
static int test_passed = 0;
static int test_failed = 0;
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1(char const * restrict format, char *param0, int param1);

static void test(int (*func)(void), char const *name)
{
  int tmp;
  tmp = (*func)();
  int r = tmp;
  if (r == 0) test_passed ++;
  else {
    test_failed ++;
    printf("FAILED: %s (at line %d)\n",(char *)name,r); /* printf_va_1 */
  }
  return;
}

void jsmn_init(jsmn_parser *parser);

int jsmn_parse(jsmn_parser *parser, char const *js, size_t len,
               jsmntok_t *tokens, unsigned int num_tokens);

static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   size_t num_tokens)
{
  jsmntok_t *__retres;
  jsmntok_t *tok;
  unsigned int tmp;
  int tmp_0;
  if (parser->toknext >= num_tokens) {
    __retres = (jsmntok_t *)0;
    goto return_label;
  }
  tmp = parser->toknext;
  (parser->toknext) ++;
  tok = tokens + tmp;
  tmp_0 = -1;
  tok->end = tmp_0;
  tok->start = tmp_0;
  tok->size = 0;
  __retres = tok;
  return_label: return __retres;
}

static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type, int start,
                            int end)
{
  token->type = type;
  token->start = start;
  token->end = end;
  token->size = 0;
  return;
}

static int jsmn_parse_primitive(jsmn_parser *parser, char const *js,
                                size_t len, jsmntok_t *tokens,
                                size_t num_tokens)
{
  int __retres;
  jsmntok_t *token;
  int start;
  start = (int)parser->pos;
  while (1) {
    if (parser->pos < len) {
      if (! ((int)*(js + parser->pos) != '\000')) break;
    }
    else break;
    switch ((int)*(js + parser->pos)) case ':': case '\t': case '\r':
                                      case '\n': case ' ': case ',':
                                      case ']': case '}':
                                      goto found;
    if ((int)*(js + parser->pos) < 32) goto _LOR;
    else 
      if ((int)*(js + parser->pos) >= 127) {
        _LOR:
        {
          parser->pos = (unsigned int)start;
          __retres = JSMN_ERROR_INVAL;
          goto return_label;
        }
      }
    (parser->pos) ++;
  }
  found: ;
  if (tokens == (jsmntok_t *)0) {
    (parser->pos) --;
    __retres = 0;
    goto return_label;
  }
  token = jsmn_alloc_token(parser,tokens,num_tokens);
  if (token == (jsmntok_t *)0) {
    parser->pos = (unsigned int)start;
    __retres = JSMN_ERROR_NOMEM;
    goto return_label;
  }
  jsmn_fill_token(token,JSMN_PRIMITIVE,start,(int)parser->pos);
  (parser->pos) --;
  __retres = 0;
  return_label: return __retres;
}

static int jsmn_parse_string(jsmn_parser *parser, char const *js, size_t len,
                             jsmntok_t *tokens, size_t num_tokens)
{
  int __retres;
  jsmntok_t *token;
  int start = (int)parser->pos;
  (parser->pos) ++;
  while (1) {
    if (parser->pos < len) {
      if (! ((int)*(js + parser->pos) != '\000')) break;
    }
    else break;
    {
      char c = *(js + parser->pos);
      if ((int)c == '\"') {
        if (tokens == (jsmntok_t *)0) {
          __retres = 0;
          goto return_label;
        }
        token = jsmn_alloc_token(parser,tokens,num_tokens);
        if (token == (jsmntok_t *)0) {
          parser->pos = (unsigned int)start;
          __retres = JSMN_ERROR_NOMEM;
          goto return_label;
        }
        jsmn_fill_token(token,JSMN_STRING,start + 1,(int)parser->pos);
        __retres = 0;
        goto return_label;
      }
      if ((int)c == '\\') 
        if (parser->pos + (unsigned int)1 < len) {
          int i;
          (parser->pos) ++;
          switch ((int)*(js + parser->pos)) {
            case '\"': case '/': case '\\': case 'b': case 'f': case 'r':
            case 'n': case 't':
            break;
            case 'u': (parser->pos) ++;
            i = 0;
            while (1) {
              if (i < 4) 
                if (parser->pos < len) {
                  if (! ((int)*(js + parser->pos) != '\000')) break;
                }
                else break;
              else break;
              if ((int)*(js + parser->pos) >= 48) {
                if (! ((int)*(js + parser->pos) <= 57)) goto _LAND_1;
              }
              else {
                _LAND_1: ;
                if ((int)*(js + parser->pos) >= 65) {
                  if (! ((int)*(js + parser->pos) <= 70)) goto _LAND_0;
                }
                else {
                  _LAND_0: ;
                  if ((int)*(js + parser->pos) >= 97) {
                    if (! ((int)*(js + parser->pos) <= 102)) goto _LAND;
                  }
                  else {
                    _LAND:
                    {
                      parser->pos = (unsigned int)start;
                      __retres = JSMN_ERROR_INVAL;
                      goto return_label;
                    }
                  }
                }
              }
              (parser->pos) ++;
              i ++;
            }
            (parser->pos) --;
            break;
            default: parser->pos = (unsigned int)start;
            __retres = JSMN_ERROR_INVAL;
            goto return_label;
          }
        }
    }
    (parser->pos) ++;
  }
  parser->pos = (unsigned int)start;
  __retres = JSMN_ERROR_PART;
  return_label: return __retres;
}

int jsmn_parse(jsmn_parser *parser, char const *js, size_t len,
               jsmntok_t *tokens, unsigned int num_tokens)
{
  int __retres;
  int r;
  int i;
  jsmntok_t *token;
  int count = (int)parser->toknext;
  while (1) {
    if (parser->pos < len) {
      if (! ((int)*(js + parser->pos) != '\000')) break;
    }
    else break;
    {
      char c;
      jsmntype_t type;
      c = *(js + parser->pos);
      switch ((int)c) {
        case '{': case '[': count ++;
        if (tokens == (jsmntok_t *)0) break;
        token = jsmn_alloc_token(parser,tokens,num_tokens);
        if (token == (jsmntok_t *)0) {
          __retres = JSMN_ERROR_NOMEM;
          goto return_label;
        }
        if (parser->toksuper != -1) ((tokens + parser->toksuper)->size) ++;
        if ((int)c == '{') token->type = JSMN_OBJECT;
        else token->type = JSMN_ARRAY;
        token->start = (int)parser->pos;
        parser->toksuper = (int)(parser->toknext - (unsigned int)1);
        break;
        case '}': case ']': ;
        if (tokens == (jsmntok_t *)0) break;
        if ((int)c == '}') type = JSMN_OBJECT; else type = JSMN_ARRAY;
        i = (int)(parser->toknext - (unsigned int)1);
        while (i >= 0) {
          token = tokens + i;
          if (token->start != -1) 
            if (token->end == -1) {
              if (token->type != type) {
                __retres = JSMN_ERROR_INVAL;
                goto return_label;
              }
              parser->toksuper = -1;
              token->end = (int)(parser->pos + (unsigned int)1);
              break;
            }
          i --;
        }
        if (i == -1) {
          __retres = JSMN_ERROR_INVAL;
          goto return_label;
        }
        while (i >= 0) {
          token = tokens + i;
          if (token->start != -1) 
            if (token->end == -1) {
              parser->toksuper = i;
              break;
            }
          i --;
        }
        break;
        case '\"': r = jsmn_parse_string(parser,js,len,tokens,num_tokens);
        if (r < 0) {
          __retres = r;
          goto return_label;
        }
        count ++;
        if (parser->toksuper != -1) 
          if (tokens != (jsmntok_t *)0) ((tokens + parser->toksuper)->size) ++;
        break;
        case '\t': case '\r': case '\n': case ' ': break;
        case ':':
        parser->toksuper = (int)(parser->toknext - (unsigned int)1);
        break;
        case ',': ;
        if (tokens != (jsmntok_t *)0) 
          if (parser->toksuper != -1) 
            if ((tokens + parser->toksuper)->type != (unsigned int)JSMN_ARRAY) 
              if ((tokens + parser->toksuper)->type != (unsigned int)JSMN_OBJECT) {
                i = (int)(parser->toknext - (unsigned int)1);
                while (i >= 0) {
                  if ((tokens + i)->type == (unsigned int)JSMN_ARRAY) 
                    goto _LOR;
                  else 
                    if ((tokens + i)->type == (unsigned int)JSMN_OBJECT) 
                      _LOR:
                      if ((tokens + i)->start != -1) 
                        if ((tokens + i)->end == -1) {
                          parser->toksuper = i;
                          break;
                        }
                  i --;
                }
              }
        break;
        default: r = jsmn_parse_primitive(parser,js,len,tokens,num_tokens);
        if (r < 0) {
          __retres = r;
          goto return_label;
        }
        count ++;
        if (parser->toksuper != -1) 
          if (tokens != (jsmntok_t *)0) ((tokens + parser->toksuper)->size) ++;
        break;
      }
    }
    (parser->pos) ++;
  }
  if (tokens != (jsmntok_t *)0) {
    i = (int)(parser->toknext - (unsigned int)1);
    while (i >= 0) {
      if ((tokens + i)->start != -1) 
        if ((tokens + i)->end == -1) {
          __retres = JSMN_ERROR_PART;
          goto return_label;
        }
      i --;
    }
  }
  __retres = count;
  return_label: return __retres;
}

void jsmn_init(jsmn_parser *parser)
{
  parser->pos = (unsigned int)0;
  parser->toknext = (unsigned int)0;
  parser->toksuper = -1;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_2(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_3(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_4(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_5(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_nstring(param2, param1);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1, param0;
 */
int printf_va_6(char const * restrict format, int param0, int param1,
                char *param2, char *param3);

static int vtokeq(char const *s, jsmntok_t *t, int numtok, va_list ap)
{
  int __retres;
  if (numtok > 0) {
    int i;
    int start;
    int end;
    int size;
    int type;
    char *value;
    size = -1;
    value = (char *)0;
    i = 0;
    while (i < numtok) {
      type = *((int *)*ap);
      ap ++;
      if (type == JSMN_STRING) {
        value = *((char **)*ap);
        ap ++;
        size = *((int *)*ap);
        ap ++;
        end = -1;
        start = end;
      }
      else 
        if (type == JSMN_PRIMITIVE) {
          value = *((char **)*ap);
          ap ++;
          size = -1;
          end = size;
          start = end;
        }
        else {
          start = *((int *)*ap);
          ap ++;
          end = *((int *)*ap);
          ap ++;
          size = *((int *)*ap);
          ap ++;
          value = (char *)0;
        }
      if ((t + i)->type != (unsigned int)type) {
        printf("token %d type is %d, not %d\n",i,(int)(t + i)->type,type); /* printf_va_2 */
        __retres = 0;
        goto return_label;
      }
      if (start != -1) 
        if (end != -1) {
          if ((t + i)->start != start) {
            printf("token %d start is %d, not %d\n",i,(t + i)->start,start); /* printf_va_3 */
            __retres = 0;
            goto return_label;
          }
          if ((t + i)->end != end) {
            printf("token %d end is %d, not %d\n",i,(t + i)->end,end); /* printf_va_4 */
            __retres = 0;
            goto return_label;
          }
        }
      if (size != -1) 
        if ((t + i)->size != size) {
          printf("token %d size is %d, not %d\n",i,(t + i)->size,size); /* printf_va_5 */
          __retres = 0;
          goto return_label;
        }
      if (s != (char const *)0) 
        if (value != (char *)0) {
          size_t tmp;
          char const *p = s + (t + i)->start;
          tmp = strlen((char const *)value);
          ;
          if (tmp != (size_t)((t + i)->end - (t + i)->start)) goto _LOR;
          else {
            int tmp_0;
            tmp_0 = strncmp(p,(char const *)value,
                            (size_t)((t + i)->end - (t + i)->start));
            if (tmp_0 != 0) {
              _LOR:
              {
                printf("token %d value is %.*s, not %s\n",i,
                       (t + i)->end - (t + i)->start,
                       (char *)(s + (t + i)->start),value); /* printf_va_6 */
                __retres = 0;
                goto return_label;
              }
            }
          }
        }
      i ++;
    }
  }
  __retres = 1;
  return_label: return __retres;
}

static int tokeq(char const *s, jsmntok_t *tokens, int numtok,
                 void * const *__va_params)
{
  int ok;
  va_list args;
  args = __va_params;
  ok = vtokeq(s,tokens,numtok,args);
  return ok;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_7(char const * restrict format, int param0, int param1);

static int parse(char const *s, int status, int numtok,
                 void * const *__va_params)
{
  int __retres;
  int r;
  va_list args;
  jsmn_parser p;
  size_t tmp_0;
  int ok = 1;
  jsmntok_t *t = malloc((unsigned int)numtok * sizeof(jsmntok_t));
  jsmn_init(& p);
  ;
  ;
  tmp_0 = strlen(s);
  ;
  r = jsmn_parse(& p,s,tmp_0,t,(unsigned int)numtok);
  if (r != status) {
    printf("status is %d, not %d\n",r,status); /* printf_va_7 */
    __retres = 0;
    goto return_label;
  }
  if (status >= 0) {
    args = __va_params;
    ok = vtokeq(s,t,numtok,args);
  }
  free((void *)t);
  __retres = ok;
  return_label: return __retres;
}

int test_empty(void)
{
  int __retres;
  {
    int tmp;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = 0;
      int __va_arg2 = 2;
      int __va_arg3 = 0;
      void *__va_args[4] =
        {& __va_arg0, & __va_arg1, & __va_arg2, & __va_arg3};
      tmp = parse("{}",1,1,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 10;
      goto return_label;
    }
  }
  {
    int tmp_0;
    {
      int __va_arg0_10 = JSMN_ARRAY;
      int __va_arg1_12 = 0;
      int __va_arg2_14 = 2;
      int __va_arg3_16 = 0;
      void *__va_args_18[4] =
        {& __va_arg0_10, & __va_arg1_12, & __va_arg2_14, & __va_arg3_16};
      tmp_0 = parse("[]",1,1,(void * const *)(__va_args_18));
    }
    if (! tmp_0) {
      __retres = 11;
      goto return_label;
    }
  }
  {
    int tmp_1;
    {
      int __va_arg0_20 = JSMN_ARRAY;
      int __va_arg1_22 = 0;
      int __va_arg2_24 = 7;
      int __va_arg3_26 = 2;
      int __va_arg4 = JSMN_OBJECT;
      int __va_arg5 = 1;
      int __va_arg6 = 3;
      int __va_arg7 = 0;
      int __va_arg8 = JSMN_OBJECT;
      int __va_arg9 = 4;
      int __va_arg10 = 6;
      int __va_arg11 = 0;
      void *__va_args_36[12] =
        {& __va_arg0_20,
         & __va_arg1_22,
         & __va_arg2_24,
         & __va_arg3_26,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8,
         & __va_arg9,
         & __va_arg10,
         & __va_arg11};
      tmp_1 = parse("[{},{}]",3,3,(void * const *)(__va_args_36));
    }
    if (! tmp_1) {
      __retres = 12;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_object(void)
{
  int __retres;
  {
    int tmp;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = 0;
      int __va_arg2 = 7;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_STRING;
      char const *__va_arg5 = "a";
      int __va_arg6 = 1;
      int __va_arg7 = JSMN_PRIMITIVE;
      char const *__va_arg8 = "0";
      void *__va_args[9] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8};
      tmp = parse("{\"a\":0}",3,3,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 17;
      goto return_label;
    }
  }
  {
    int tmp_0;
    {
      int __va_arg0_17 = JSMN_OBJECT;
      int __va_arg1_19 = 0;
      int __va_arg2_21 = 8;
      int __va_arg3_23 = 1;
      int __va_arg4_25 = JSMN_STRING;
      char const *__va_arg5_27 = "a";
      int __va_arg6_29 = 1;
      int __va_arg7_31 = JSMN_ARRAY;
      int __va_arg8_33 = 5;
      int __va_arg9 = 7;
      int __va_arg10 = 0;
      void *__va_args_37[11] =
        {& __va_arg0_17,
         & __va_arg1_19,
         & __va_arg2_21,
         & __va_arg3_23,
         & __va_arg4_25,
         & __va_arg5_27,
         & __va_arg6_29,
         & __va_arg7_31,
         & __va_arg8_33,
         & __va_arg9,
         & __va_arg10};
      tmp_0 = parse("{\"a\":[]}",3,3,(void * const *)(__va_args_37));
    }
    if (! tmp_0) {
      __retres = 18;
      goto return_label;
    }
  }
  {
    int tmp_1;
    {
      int __va_arg0_39 = JSMN_OBJECT;
      int __va_arg1_41 = -1;
      int __va_arg2_43 = -1;
      int __va_arg3_45 = 2;
      int __va_arg4_47 = JSMN_STRING;
      char const *__va_arg5_49 = "a";
      int __va_arg6_51 = 1;
      int __va_arg7_53 = JSMN_OBJECT;
      int __va_arg8_55 = -1;
      int __va_arg9_57 = -1;
      int __va_arg10_59 = 0;
      int __va_arg11 = JSMN_STRING;
      char const *__va_arg12 = "b";
      int __va_arg13 = 1;
      int __va_arg14 = JSMN_OBJECT;
      int __va_arg15 = -1;
      int __va_arg16 = -1;
      int __va_arg17 = 0;
      void *__va_args_68[18] =
        {& __va_arg0_39,
         & __va_arg1_41,
         & __va_arg2_43,
         & __va_arg3_45,
         & __va_arg4_47,
         & __va_arg5_49,
         & __va_arg6_51,
         & __va_arg7_53,
         & __va_arg8_55,
         & __va_arg9_57,
         & __va_arg10_59,
         & __va_arg11,
         & __va_arg12,
         & __va_arg13,
         & __va_arg14,
         & __va_arg15,
         & __va_arg16,
         & __va_arg17};
      tmp_1 = parse("{\"a\":{}, \"b\":{}}",5,5,
                    (void * const *)(__va_args_68));
    }
    if (! tmp_1) {
      __retres = 19;
      goto return_label;
    }
  }
  {
    int tmp_2;
    {
      int __va_arg0_70 = JSMN_OBJECT;
      int __va_arg1_72 = -1;
      int __va_arg2_74 = -1;
      int __va_arg3_76 = 3;
      int __va_arg4_78 = JSMN_STRING;
      char const *__va_arg5_80 = "Day";
      int __va_arg6_82 = 1;
      int __va_arg7_84 = JSMN_PRIMITIVE;
      char const *__va_arg8_86 = "26";
      int __va_arg9_88 = JSMN_STRING;
      char const *__va_arg10_90 = "Month";
      int __va_arg11_92 = 1;
      int __va_arg12_94 = JSMN_PRIMITIVE;
      char const *__va_arg13_96 = "9";
      int __va_arg14_98 = JSMN_STRING;
      char const *__va_arg15_100 = "Year";
      int __va_arg16_102 = 1;
      int __va_arg17_104 = JSMN_PRIMITIVE;
      char const *__va_arg18 = "12";
      void *__va_args_107[19] =
        {& __va_arg0_70,
         & __va_arg1_72,
         & __va_arg2_74,
         & __va_arg3_76,
         & __va_arg4_78,
         & __va_arg5_80,
         & __va_arg6_82,
         & __va_arg7_84,
         & __va_arg8_86,
         & __va_arg9_88,
         & __va_arg10_90,
         & __va_arg11_92,
         & __va_arg12_94,
         & __va_arg13_96,
         & __va_arg14_98,
         & __va_arg15_100,
         & __va_arg16_102,
         & __va_arg17_104,
         & __va_arg18};
      tmp_2 = parse("{\n \"Day\": 26, \n \"Month\": 9, \n \"Year\": 12\n }",
                    7,7,(void * const *)(__va_args_107));
    }
    if (! tmp_2) {
      __retres = 20;
      goto return_label;
    }
  }
  {
    int tmp_3;
    {
      int __va_arg0_109 = JSMN_OBJECT;
      int __va_arg1_111 = -1;
      int __va_arg2_113 = -1;
      int __va_arg3_115 = 2;
      int __va_arg4_117 = JSMN_STRING;
      char const *__va_arg5_119 = "a";
      int __va_arg6_121 = 1;
      int __va_arg7_123 = JSMN_PRIMITIVE;
      char const *__va_arg8_125 = "0";
      int __va_arg9_127 = JSMN_STRING;
      char const *__va_arg10_129 = "b";
      int __va_arg11_131 = 1;
      int __va_arg12_133 = JSMN_STRING;
      char const *__va_arg13_135 = "c";
      int __va_arg14_137 = 0;
      void *__va_args_139[15] =
        {& __va_arg0_109,
         & __va_arg1_111,
         & __va_arg2_113,
         & __va_arg3_115,
         & __va_arg4_117,
         & __va_arg5_119,
         & __va_arg6_121,
         & __va_arg7_123,
         & __va_arg8_125,
         & __va_arg9_127,
         & __va_arg10_129,
         & __va_arg11_131,
         & __va_arg12_133,
         & __va_arg13_135,
         & __va_arg14_137};
      tmp_3 = parse("{\"a\": 0, \"b\": \"c\"}",5,5,
                    (void * const *)(__va_args_139));
    }
    if (! tmp_3) {
      __retres = 21;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_array(void)
{
  int __retres;
  {
    int tmp;
    {
      int __va_arg0 = JSMN_ARRAY;
      int __va_arg1 = -1;
      int __va_arg2 = -1;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_PRIMITIVE;
      char const *__va_arg5 = "10";
      void *__va_args[6] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5};
      tmp = parse("[10]",2,2,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 44;
      goto return_label;
    }
  }
  {
    int tmp_0;
    {
      void *__va_args_11[1] = {(void *)0};
      tmp_0 = parse("{\"a\": 1]",JSMN_ERROR_INVAL,3,
                    (void * const *)(__va_args_11));
    }
    if (! tmp_0) {
      __retres = 45;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_primitive(void)
{
  int __retres;
  {
    int tmp;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = -1;
      int __va_arg2 = -1;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_STRING;
      char const *__va_arg5 = "boolVar";
      int __va_arg6 = 1;
      int __va_arg7 = JSMN_PRIMITIVE;
      char const *__va_arg8 = "true";
      void *__va_args[9] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8};
      tmp = parse("{\"boolVar\" : true }",3,3,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 52;
      goto return_label;
    }
  }
  {
    int tmp_0;
    {
      int __va_arg0_17 = JSMN_OBJECT;
      int __va_arg1_19 = -1;
      int __va_arg2_21 = -1;
      int __va_arg3_23 = 1;
      int __va_arg4_25 = JSMN_STRING;
      char const *__va_arg5_27 = "boolVar";
      int __va_arg6_29 = 1;
      int __va_arg7_31 = JSMN_PRIMITIVE;
      char const *__va_arg8_33 = "false";
      void *__va_args_35[9] =
        {& __va_arg0_17,
         & __va_arg1_19,
         & __va_arg2_21,
         & __va_arg3_23,
         & __va_arg4_25,
         & __va_arg5_27,
         & __va_arg6_29,
         & __va_arg7_31,
         & __va_arg8_33};
      tmp_0 = parse("{\"boolVar\" : false }",3,3,
                    (void * const *)(__va_args_35));
    }
    if (! tmp_0) {
      __retres = 53;
      goto return_label;
    }
  }
  {
    int tmp_1;
    {
      int __va_arg0_37 = JSMN_OBJECT;
      int __va_arg1_39 = -1;
      int __va_arg2_41 = -1;
      int __va_arg3_43 = 1;
      int __va_arg4_45 = JSMN_STRING;
      char const *__va_arg5_47 = "nullVar";
      int __va_arg6_49 = 1;
      int __va_arg7_51 = JSMN_PRIMITIVE;
      char const *__va_arg8_53 = "null";
      void *__va_args_55[9] =
        {& __va_arg0_37,
         & __va_arg1_39,
         & __va_arg2_41,
         & __va_arg3_43,
         & __va_arg4_45,
         & __va_arg5_47,
         & __va_arg6_49,
         & __va_arg7_51,
         & __va_arg8_53};
      tmp_1 = parse("{\"nullVar\" : null }",3,3,
                    (void * const *)(__va_args_55));
    }
    if (! tmp_1) {
      __retres = 54;
      goto return_label;
    }
  }
  {
    int tmp_2;
    {
      int __va_arg0_57 = JSMN_OBJECT;
      int __va_arg1_59 = -1;
      int __va_arg2_61 = -1;
      int __va_arg3_63 = 1;
      int __va_arg4_65 = JSMN_STRING;
      char const *__va_arg5_67 = "intVar";
      int __va_arg6_69 = 1;
      int __va_arg7_71 = JSMN_PRIMITIVE;
      char const *__va_arg8_73 = "12";
      void *__va_args_75[9] =
        {& __va_arg0_57,
         & __va_arg1_59,
         & __va_arg2_61,
         & __va_arg3_63,
         & __va_arg4_65,
         & __va_arg5_67,
         & __va_arg6_69,
         & __va_arg7_71,
         & __va_arg8_73};
      tmp_2 = parse("{\"intVar\" : 12}",3,3,(void * const *)(__va_args_75));
    }
    if (! tmp_2) {
      __retres = 55;
      goto return_label;
    }
  }
  {
    int tmp_3;
    {
      int __va_arg0_77 = JSMN_OBJECT;
      int __va_arg1_79 = -1;
      int __va_arg2_81 = -1;
      int __va_arg3_83 = 1;
      int __va_arg4_85 = JSMN_STRING;
      char const *__va_arg5_87 = "floatVar";
      int __va_arg6_89 = 1;
      int __va_arg7_91 = JSMN_PRIMITIVE;
      char const *__va_arg8_93 = "12.345";
      void *__va_args_95[9] =
        {& __va_arg0_77,
         & __va_arg1_79,
         & __va_arg2_81,
         & __va_arg3_83,
         & __va_arg4_85,
         & __va_arg5_87,
         & __va_arg6_89,
         & __va_arg7_91,
         & __va_arg8_93};
      tmp_3 = parse("{\"floatVar\" : 12.345}",3,3,
                    (void * const *)(__va_args_95));
    }
    if (! tmp_3) {
      __retres = 56;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_string(void)
{
  int __retres;
  {
    int tmp;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = -1;
      int __va_arg2 = -1;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_STRING;
      char const *__va_arg5 = "strVar";
      int __va_arg6 = 1;
      int __va_arg7 = JSMN_STRING;
      char const *__va_arg8 = "hello world";
      int __va_arg9 = 0;
      void *__va_args[10] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8,
         & __va_arg9};
      tmp = parse("{\"strVar\" : \"hello world\"}",3,3,
                  (void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 61;
      goto return_label;
    }
  }
  {
    int tmp_0;
    {
      int __va_arg0_23 = JSMN_OBJECT;
      int __va_arg1_25 = -1;
      int __va_arg2_27 = -1;
      int __va_arg3_29 = 1;
      int __va_arg4_31 = JSMN_STRING;
      char const *__va_arg5_33 = "strVar";
      int __va_arg6_35 = 1;
      int __va_arg7_37 = JSMN_STRING;
      char const *__va_arg8_39 = "escapes: \\/\\r\\n\\t\\b\\f\\\"\\\\";
      int __va_arg9_41 = 0;
      void *__va_args_43[10] =
        {& __va_arg0_23,
         & __va_arg1_25,
         & __va_arg2_27,
         & __va_arg3_29,
         & __va_arg4_31,
         & __va_arg5_33,
         & __va_arg6_35,
         & __va_arg7_37,
         & __va_arg8_39,
         & __va_arg9_41};
      tmp_0 = parse("{\"strVar\" : \"escapes: \\/\\r\\n\\t\\b\\f\\\"\\\\\"}",
                    3,3,(void * const *)(__va_args_43));
    }
    if (! tmp_0) {
      __retres = 62;
      goto return_label;
    }
  }
  {
    int tmp_1;
    {
      int __va_arg0_45 = JSMN_OBJECT;
      int __va_arg1_47 = -1;
      int __va_arg2_49 = -1;
      int __va_arg3_51 = 1;
      int __va_arg4_53 = JSMN_STRING;
      char const *__va_arg5_55 = "strVar";
      int __va_arg6_57 = 1;
      int __va_arg7_59 = JSMN_STRING;
      char const *__va_arg8_61 = "";
      int __va_arg9_63 = 0;
      void *__va_args_65[10] =
        {& __va_arg0_45,
         & __va_arg1_47,
         & __va_arg2_49,
         & __va_arg3_51,
         & __va_arg4_53,
         & __va_arg5_55,
         & __va_arg6_57,
         & __va_arg7_59,
         & __va_arg8_61,
         & __va_arg9_63};
      tmp_1 = parse("{\"strVar\": \"\"}",3,3,(void * const *)(__va_args_65));
    }
    if (! tmp_1) {
      __retres = 63;
      goto return_label;
    }
  }
  {
    int tmp_2;
    {
      int __va_arg0_67 = JSMN_OBJECT;
      int __va_arg1_69 = -1;
      int __va_arg2_71 = -1;
      int __va_arg3_73 = 1;
      int __va_arg4_75 = JSMN_STRING;
      char const *__va_arg5_77 = "a";
      int __va_arg6_79 = 1;
      int __va_arg7_81 = JSMN_STRING;
      char const *__va_arg8_83 = "\\uAbcD";
      int __va_arg9_85 = 0;
      void *__va_args_87[10] =
        {& __va_arg0_67,
         & __va_arg1_69,
         & __va_arg2_71,
         & __va_arg3_73,
         & __va_arg4_75,
         & __va_arg5_77,
         & __va_arg6_79,
         & __va_arg7_81,
         & __va_arg8_83,
         & __va_arg9_85};
      tmp_2 = parse("{\"a\":\"\\uAbcD\"}",3,3,(void * const *)(__va_args_87));
    }
    if (! tmp_2) {
      __retres = 64;
      goto return_label;
    }
  }
  {
    int tmp_3;
    {
      int __va_arg0_89 = JSMN_OBJECT;
      int __va_arg1_91 = -1;
      int __va_arg2_93 = -1;
      int __va_arg3_95 = 1;
      int __va_arg4_97 = JSMN_STRING;
      char const *__va_arg5_99 = "a";
      int __va_arg6_101 = 1;
      int __va_arg7_103 = JSMN_STRING;
      char const *__va_arg8_105 = "str\\u0000";
      int __va_arg9_107 = 0;
      void *__va_args_109[10] =
        {& __va_arg0_89,
         & __va_arg1_91,
         & __va_arg2_93,
         & __va_arg3_95,
         & __va_arg4_97,
         & __va_arg5_99,
         & __va_arg6_101,
         & __va_arg7_103,
         & __va_arg8_105,
         & __va_arg9_107};
      tmp_3 = parse("{\"a\":\"str\\u0000\"}",3,3,
                    (void * const *)(__va_args_109));
    }
    if (! tmp_3) {
      __retres = 65;
      goto return_label;
    }
  }
  {
    int tmp_4;
    {
      int __va_arg0_111 = JSMN_OBJECT;
      int __va_arg1_113 = -1;
      int __va_arg2_115 = -1;
      int __va_arg3_117 = 1;
      int __va_arg4_119 = JSMN_STRING;
      char const *__va_arg5_121 = "a";
      int __va_arg6_123 = 1;
      int __va_arg7_125 = JSMN_STRING;
      char const *__va_arg8_127 = "\\uFFFFstr";
      int __va_arg9_129 = 0;
      void *__va_args_131[10] =
        {& __va_arg0_111,
         & __va_arg1_113,
         & __va_arg2_115,
         & __va_arg3_117,
         & __va_arg4_119,
         & __va_arg5_121,
         & __va_arg6_123,
         & __va_arg7_125,
         & __va_arg8_127,
         & __va_arg9_129};
      tmp_4 = parse("{\"a\":\"\\uFFFFstr\"}",3,3,
                    (void * const *)(__va_args_131));
    }
    if (! tmp_4) {
      __retres = 66;
      goto return_label;
    }
  }
  {
    int tmp_5;
    {
      int __va_arg0_133 = JSMN_OBJECT;
      int __va_arg1_135 = -1;
      int __va_arg2_137 = -1;
      int __va_arg3_139 = 1;
      int __va_arg4_141 = JSMN_STRING;
      char const *__va_arg5_143 = "a";
      int __va_arg6_145 = 1;
      int __va_arg7_147 = JSMN_ARRAY;
      int __va_arg8_149 = -1;
      int __va_arg9_151 = -1;
      int __va_arg10 = 1;
      int __va_arg11 = JSMN_STRING;
      char const *__va_arg12 = "\\u0280";
      int __va_arg13 = 0;
      void *__va_args_157[14] =
        {& __va_arg0_133,
         & __va_arg1_135,
         & __va_arg2_137,
         & __va_arg3_139,
         & __va_arg4_141,
         & __va_arg5_143,
         & __va_arg6_145,
         & __va_arg7_147,
         & __va_arg8_149,
         & __va_arg9_151,
         & __va_arg10,
         & __va_arg11,
         & __va_arg12,
         & __va_arg13};
      tmp_5 = parse("{\"a\":[\"\\u0280\"]}",4,4,
                    (void * const *)(__va_args_157));
    }
    if (! tmp_5) {
      __retres = 67;
      goto return_label;
    }
  }
  {
    int tmp_6;
    {
      void *__va_args_159[1] = {(void *)0};
      tmp_6 = parse("{\"a\":\"str\\uFFGFstr\"}",JSMN_ERROR_INVAL,3,
                    (void * const *)(__va_args_159));
    }
    if (! tmp_6) {
      __retres = 69;
      goto return_label;
    }
  }
  {
    int tmp_7;
    {
      void *__va_args_161[1] = {(void *)0};
      tmp_7 = parse("{\"a\":\"str\\u@FfF\"}",JSMN_ERROR_INVAL,3,
                    (void * const *)(__va_args_161));
    }
    if (! tmp_7) {
      __retres = 70;
      goto return_label;
    }
  }
  {
    int tmp_8;
    {
      void *__va_args_163[1] = {(void *)0};
      tmp_8 = parse("{{\"a\":[\"\\u028\"]}",JSMN_ERROR_INVAL,4,
                    (void * const *)(__va_args_163));
    }
    if (! tmp_8) {
      __retres = 71;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_partial_string(void)
{
  int __retres;
  int i;
  int r;
  jsmn_parser p;
  jsmntok_t tok[5];
  char const *js = "{\"x\": \"va\\\\ue\", \"y\": \"value y\"}";
  jsmn_init(& p);
  i = 1;
  while (1) {
    size_t tmp_1;
    tmp_1 = strlen(js);
    ;
    if (! ((size_t)i <= tmp_1)) break;
    {
      size_t tmp_0;
      r = jsmn_parse(& p,js,(size_t)i,tok,sizeof(tok) / sizeof(tok[0]));
      tmp_0 = strlen(js);
      ;
      if ((size_t)i == tmp_0) {
        if (! (r == 5)) {
          __retres = 86;
          goto return_label;
        }
        {
          int tmp;
          {
            int __va_arg0 = JSMN_OBJECT;
            int __va_arg1 = -1;
            int __va_arg2 = -1;
            int __va_arg3 = 2;
            int __va_arg4 = JSMN_STRING;
            char const *__va_arg5 = "x";
            int __va_arg6 = 1;
            int __va_arg7 = JSMN_STRING;
            char const *__va_arg8 = "va\\\\ue";
            int __va_arg9 = 0;
            int __va_arg10 = JSMN_STRING;
            char const *__va_arg11 = "y";
            int __va_arg12 = 1;
            int __va_arg13 = JSMN_STRING;
            char const *__va_arg14 = "value y";
            int __va_arg15 = 0;
            void *__va_args[16] =
              {& __va_arg0,
               & __va_arg1,
               & __va_arg2,
               & __va_arg3,
               & __va_arg4,
               & __va_arg5,
               & __va_arg6,
               & __va_arg7,
               & __va_arg8,
               & __va_arg9,
               & __va_arg10,
               & __va_arg11,
               & __va_arg12,
               & __va_arg13,
               & __va_arg14,
               & __va_arg15};
            tmp = tokeq(js,tok,5,(void * const *)(__va_args));
          }
          if (! tmp) {
            __retres = 87;
            goto return_label;
          }
        }
      }
      else 
        if (! (r == JSMN_ERROR_PART)) {
          __retres = 89;
          goto return_label;
        }
    }
    i ++;
  }
  __retres = 0;
  return_label: return __retres;
}

int test_partial_array(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

int test_array_nomem(void)
{
  int __retres;
  int i;
  int r;
  jsmn_parser p;
  jsmntok_t toksmall[10];
  jsmntok_t toklarge[10];
  char const *js;
  js = "  [ 1, true, [123, \"hello\"]]";
  i = 0;
  while (i < 6) {
    {
      size_t tmp;
      size_t tmp_0;
      jsmn_init(& p);
      memset((void *)(toksmall),0,sizeof(toksmall));
      memset((void *)(toklarge),0,sizeof(toklarge));
      ;
      tmp = strlen(js);
      ;
      r = jsmn_parse(& p,js,tmp,toksmall,(unsigned int)i);
      if (! (r == JSMN_ERROR_NOMEM)) {
        __retres = 131;
        goto return_label;
      }
      memcpy((void *)(toklarge),(void const *)(toksmall),sizeof(toksmall));
      tmp_0 = strlen(js);
      ;
      r = jsmn_parse(& p,js,tmp_0,toklarge,(unsigned int)10);
      if (! (r >= 0)) {
        __retres = 136;
        goto return_label;
      }
      {
        int tmp_1;
        {
          int __va_arg0 = JSMN_ARRAY;
          int __va_arg1 = -1;
          int __va_arg2 = -1;
          int __va_arg3 = 3;
          int __va_arg4 = JSMN_PRIMITIVE;
          char const *__va_arg5 = "1";
          int __va_arg6 = JSMN_PRIMITIVE;
          char const *__va_arg7 = "true";
          int __va_arg8 = JSMN_ARRAY;
          int __va_arg9 = -1;
          int __va_arg10 = -1;
          int __va_arg11 = 2;
          int __va_arg12 = JSMN_PRIMITIVE;
          char const *__va_arg13 = "123";
          int __va_arg14 = JSMN_STRING;
          char const *__va_arg15 = "hello";
          int __va_arg16 = 0;
          void *__va_args[17] =
            {& __va_arg0,
             & __va_arg1,
             & __va_arg2,
             & __va_arg3,
             & __va_arg4,
             & __va_arg5,
             & __va_arg6,
             & __va_arg7,
             & __va_arg8,
             & __va_arg9,
             & __va_arg10,
             & __va_arg11,
             & __va_arg12,
             & __va_arg13,
             & __va_arg14,
             & __va_arg15,
             & __va_arg16};
          tmp_1 = tokeq(js,toklarge,4,(void * const *)(__va_args));
        }
        if (! tmp_1) {
          __retres = 137;
          goto return_label;
        }
      }
    }
    i ++;
  }
  __retres = 0;
  return_label: return __retres;
}

int test_unquoted_keys(void)
{
  int __retres;
  int r;
  jsmn_parser p;
  jsmntok_t tok[10];
  char const *js;
  size_t tmp;
  jsmn_init(& p);
  js = "key1: \"value\"\nkey2 : 123";
  tmp = strlen(js);
  ;
  r = jsmn_parse(& p,js,tmp,tok,(unsigned int)10);
  if (! (r >= 0)) {
    __retres = 153;
    goto return_label;
  }
  {
    int tmp_0;
    {
      int __va_arg0 = JSMN_PRIMITIVE;
      char const *__va_arg1 = "key1";
      int __va_arg2 = JSMN_STRING;
      char const *__va_arg3 = "value";
      int __va_arg4 = 0;
      int __va_arg5 = JSMN_PRIMITIVE;
      char const *__va_arg6 = "key2";
      int __va_arg7 = JSMN_PRIMITIVE;
      char const *__va_arg8 = "123";
      void *__va_args[9] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8};
      tmp_0 = tokeq(js,tok,4,(void * const *)(__va_args));
    }
    if (! tmp_0) {
      __retres = 154;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_issue_22(void)
{
  int __retres;
  int r;
  jsmn_parser p;
  jsmntok_t tokens[128];
  char const *js;
  size_t tmp;
  js = "{ \"height\":10, \"layers\":[ { \"data\":[6, 6], \"height\":10, \"name\":\"Calque de Tile 1\", \"opacity\":1, \"type\":\"tilelayer\", \"visible\":true, \"width\":10, \"x\":0, \"y\":0 }], \"orientation\":\"orthogonal\", \"properties\": { }, \"tileheight\":32, \"tilesets\":[ { \"firstgid\":1, \"image\":\"..\\/images\\/tiles.png\", \"imageheight\":64, \"imagewidth\":160, \"margin\":0, \"name\":\"Tiles\", \"properties\":{}, \"spacing\":0, \"tileheight\":32, \"tilewidth\":32 }], \"tilewidth\":32, \"version\":1, \"width\":10 }";
  jsmn_init(& p);
  tmp = strlen(js);
  ;
  r = jsmn_parse(& p,js,tmp,tokens,(unsigned int)128);
  if (! (r >= 0)) {
    __retres = 175;
    goto return_label;
  }
  __retres = 0;
  return_label: return __retres;
}

int test_issue_27(void)
{
  int __retres;
  char const *js =
    "{ \"name\" : \"Jack\", \"age\" : 27 } { \"name\" : \"Anna\", ";
  {
    int tmp;
    {
      void *__va_args[1] = {(void *)0};
      tmp = parse(js,JSMN_ERROR_PART,8,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 182;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_input_length(void)
{
  int __retres;
  char const *js;
  int r;
  jsmn_parser p;
  jsmntok_t tokens[10];
  js = "{\"a\": 0}garbage";
  jsmn_init(& p);
  r = jsmn_parse(& p,js,(size_t)8,tokens,(unsigned int)10);
  if (! (r == 3)) {
    __retres = 196;
    goto return_label;
  }
  {
    int tmp;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = -1;
      int __va_arg2 = -1;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_STRING;
      char const *__va_arg5 = "a";
      int __va_arg6 = 1;
      int __va_arg7 = JSMN_PRIMITIVE;
      char const *__va_arg8 = "0";
      void *__va_args[9] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8};
      tmp = tokeq(js,tokens,3,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 197;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_count(void)
{
  int __retres;
  jsmn_parser p;
  char const *js;
  js = "{}";
  jsmn_init(& p);
  {
    int tmp_0;
    size_t tmp;
    tmp = strlen(js);
    ;
    tmp_0 = jsmn_parse(& p,js,tmp,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_0 == 1)) {
      __retres = 207;
      goto return_label;
    }
  }
  js = "[]";
  jsmn_init(& p);
  {
    int tmp_2;
    size_t tmp_1;
    tmp_1 = strlen(js);
    ;
    tmp_2 = jsmn_parse(& p,js,tmp_1,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_2 == 1)) {
      __retres = 211;
      goto return_label;
    }
  }
  js = "[[]]";
  jsmn_init(& p);
  {
    int tmp_4;
    size_t tmp_3;
    tmp_3 = strlen(js);
    ;
    tmp_4 = jsmn_parse(& p,js,tmp_3,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_4 == 2)) {
      __retres = 215;
      goto return_label;
    }
  }
  js = "[[], []]";
  jsmn_init(& p);
  {
    int tmp_6;
    size_t tmp_5;
    tmp_5 = strlen(js);
    ;
    tmp_6 = jsmn_parse(& p,js,tmp_5,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_6 == 3)) {
      __retres = 219;
      goto return_label;
    }
  }
  js = "[[], []]";
  jsmn_init(& p);
  {
    int tmp_8;
    size_t tmp_7;
    tmp_7 = strlen(js);
    ;
    tmp_8 = jsmn_parse(& p,js,tmp_7,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_8 == 3)) {
      __retres = 223;
      goto return_label;
    }
  }
  js = "[[], [[]], [[], []]]";
  jsmn_init(& p);
  {
    int tmp_10;
    size_t tmp_9;
    tmp_9 = strlen(js);
    ;
    tmp_10 = jsmn_parse(& p,js,tmp_9,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_10 == 7)) {
      __retres = 227;
      goto return_label;
    }
  }
  js = "[\"a\", [[], []]]";
  jsmn_init(& p);
  {
    int tmp_12;
    size_t tmp_11;
    tmp_11 = strlen(js);
    ;
    tmp_12 = jsmn_parse(& p,js,tmp_11,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_12 == 5)) {
      __retres = 231;
      goto return_label;
    }
  }
  js = "[[], \"[], [[]]\", [[]]]";
  jsmn_init(& p);
  {
    int tmp_14;
    size_t tmp_13;
    tmp_13 = strlen(js);
    ;
    tmp_14 = jsmn_parse(& p,js,tmp_13,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_14 == 5)) {
      __retres = 235;
      goto return_label;
    }
  }
  js = "[1, 2, 3]";
  jsmn_init(& p);
  {
    int tmp_16;
    size_t tmp_15;
    tmp_15 = strlen(js);
    ;
    tmp_16 = jsmn_parse(& p,js,tmp_15,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_16 == 4)) {
      __retres = 239;
      goto return_label;
    }
  }
  js = "[1, 2, [3, \"a\"], null]";
  jsmn_init(& p);
  {
    int tmp_18;
    size_t tmp_17;
    tmp_17 = strlen(js);
    ;
    tmp_18 = jsmn_parse(& p,js,tmp_17,(jsmntok_t *)0,(unsigned int)0);
    if (! (tmp_18 == 7)) {
      __retres = 243;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_nonstrict(void)
{
  int __retres;
  char const *js;
  js = "a: 0garbage";
  {
    int tmp;
    {
      int __va_arg0 = JSMN_PRIMITIVE;
      char const *__va_arg1 = "a";
      int __va_arg2 = JSMN_PRIMITIVE;
      char const *__va_arg3 = "0garbage";
      void *__va_args[4] =
        {& __va_arg0, & __va_arg1, & __va_arg2, & __va_arg3};
      tmp = parse(js,2,2,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 253;
      goto return_label;
    }
  }
  js = "Day : 26\nMonth : Sep\n\nYear: 12";
  {
    int tmp_0;
    {
      int __va_arg0_11 = JSMN_PRIMITIVE;
      char const *__va_arg1_13 = "Day";
      int __va_arg2_15 = JSMN_PRIMITIVE;
      char const *__va_arg3_17 = "26";
      int __va_arg4 = JSMN_PRIMITIVE;
      char const *__va_arg5 = "Month";
      int __va_arg6 = JSMN_PRIMITIVE;
      char const *__va_arg7 = "Sep";
      int __va_arg8 = JSMN_PRIMITIVE;
      char const *__va_arg9 = "Year";
      int __va_arg10 = JSMN_PRIMITIVE;
      char const *__va_arg11 = "12";
      void *__va_args_27[12] =
        {& __va_arg0_11,
         & __va_arg1_13,
         & __va_arg2_15,
         & __va_arg3_17,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8,
         & __va_arg9,
         & __va_arg10,
         & __va_arg11};
      tmp_0 = parse(js,6,6,(void * const *)(__va_args_27));
    }
    if (! tmp_0) {
      __retres = 256;
      goto return_label;
    }
  }
  js = "\"key {1\": 1234";
  {
    int tmp_1;
    {
      int __va_arg0_29 = JSMN_STRING;
      char const *__va_arg1_31 = "key {1";
      int __va_arg2_33 = 1;
      int __va_arg3_35 = JSMN_PRIMITIVE;
      char const *__va_arg4_37 = "1234";
      void *__va_args_39[5] =
        {& __va_arg0_29,
         & __va_arg1_31,
         & __va_arg2_33,
         & __va_arg3_35,
         & __va_arg4_37};
      tmp_1 = parse(js,2,2,(void * const *)(__va_args_39));
    }
    if (! tmp_1) {
      __retres = 260;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

int test_unmatched_brackets(void)
{
  int __retres;
  char const *js;
  js = "\"key 1\": 1234}";
  {
    int tmp;
    {
      void *__va_args[1] = {(void *)0};
      tmp = parse(js,JSMN_ERROR_INVAL,2,(void * const *)(__va_args));
    }
    if (! tmp) {
      __retres = 270;
      goto return_label;
    }
  }
  js = "{\"key 1\": 1234";
  {
    int tmp_0;
    {
      void *__va_args_10[1] = {(void *)0};
      tmp_0 = parse(js,JSMN_ERROR_PART,3,(void * const *)(__va_args_10));
    }
    if (! tmp_0) {
      __retres = 272;
      goto return_label;
    }
  }
  js = "{\"key 1\": 1234}}";
  {
    int tmp_1;
    {
      void *__va_args_12[1] = {(void *)0};
      tmp_1 = parse(js,JSMN_ERROR_INVAL,3,(void * const *)(__va_args_12));
    }
    if (! tmp_1) {
      __retres = 274;
      goto return_label;
    }
  }
  js = "\"key 1\"}: 1234";
  {
    int tmp_2;
    {
      void *__va_args_14[1] = {(void *)0};
      tmp_2 = parse(js,JSMN_ERROR_INVAL,3,(void * const *)(__va_args_14));
    }
    if (! tmp_2) {
      __retres = 276;
      goto return_label;
    }
  }
  js = "{\"key {1\": 1234}";
  {
    int tmp_3;
    {
      int __va_arg0 = JSMN_OBJECT;
      int __va_arg1 = 0;
      int __va_arg2 = 16;
      int __va_arg3 = 1;
      int __va_arg4 = JSMN_STRING;
      char const *__va_arg5 = "key {1";
      int __va_arg6 = 1;
      int __va_arg7 = JSMN_PRIMITIVE;
      char const *__va_arg8 = "1234";
      void *__va_args_25[9] =
        {& __va_arg0,
         & __va_arg1,
         & __va_arg2,
         & __va_arg3,
         & __va_arg4,
         & __va_arg5,
         & __va_arg6,
         & __va_arg7,
         & __va_arg8};
      tmp_3 = parse(js,3,3,(void * const *)(__va_args_25));
    }
    if (! tmp_3) {
      __retres = 278;
      goto return_label;
    }
  }
  js = "{{\"key 1\": 1234}";
  {
    int tmp_4;
    {
      void *__va_args_27[1] = {(void *)0};
      tmp_4 = parse(js,JSMN_ERROR_PART,4,(void * const *)(__va_args_27));
    }
    if (! tmp_4) {
      __retres = 280;
      goto return_label;
    }
  }
  __retres = 0;
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_8(char const * restrict format, int param0, int param1);

int main(void)
{
  int __retres;
  test(& test_empty,"test for a empty JSON objects/arrays");
  test(& test_object,"test for a JSON objects");
  test(& test_array,"test for a JSON arrays");
  test(& test_primitive,"test primitive JSON data types");
  test(& test_string,"test string JSON data types");
  test(& test_partial_string,"test partial JSON string parsing");
  test(& test_partial_array,"test partial array reading");
  test(& test_array_nomem,
       "test array reading with a smaller number of tokens");
  test(& test_unquoted_keys,"test unquoted keys (like in JavaScript)");
  test(& test_input_length,"test strings that are not null-terminated");
  test(& test_issue_22,"test issue #22");
  test(& test_issue_27,"test issue #27");
  test(& test_count,"test tokens count estimation");
  test(& test_nonstrict,"test for non-strict mode");
  test(& test_unmatched_brackets,"test for unmatched brackets");
  printf("\nPASSED: %d\nFAILED: %d\n",test_passed,test_failed); /* printf_va_8 */
  __retres = test_failed > 0;
  return __retres;
}


