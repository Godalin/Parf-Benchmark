/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "errno.h"
#include "fcntl.h"
#include "signal.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
#include "stropts.h"
#include "termios.h"
#include "time.h"
#include "unistd.h"
typedef short s16;
typedef unsigned int u32;
typedef unsigned short u16;
typedef unsigned char u8;
struct _mip_header {
   u8 sync1  __attribute__((__aligned__(1)));
   u8 sync2  __attribute__((__aligned__(1)));
   u8 descriptor_set  __attribute__((__aligned__(1)));
   u8 payload_size  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_header mip_header;
struct _mip_field_header {
   u8 size  __attribute__((__aligned__(1)));
   u8 descriptor  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_field_header mip_field_header;
struct _global_ack_nack_field {
   u8 command_echo_byte  __attribute__((__aligned__(1)));
   u8 error_code  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _global_ack_nack_field global_ack_nack_field;
typedef int ComPortHandle;
struct _ring_buffer {
   u8 state ;
   u8 type ;
   u8 *entries ;
   u32 max_entries ;
   u32 entry_size ;
   u32 volatile position ;
   u32 volatile current_count ;
   u32 volatile total_entries_written ;
   u32 volatile total_entries_read ;
   u32 volatile total_overruns ;
};
typedef struct _ring_buffer ring_buffer;
typedef void (*parser_callback_ptr)(void *, u8 *, u16 , u8 );
struct _mip_interface {
   u8 state ;
   void *port_handle ;
   ring_buffer input_buffer ;
   u8 input_buffer_bytes[(sizeof(mip_header) + (unsigned int)255) + (unsigned int)2] ;
   u8 mip_packet[(sizeof(mip_header) + (unsigned int)255) + (unsigned int)2] ;
   u16 mip_packet_byte_count ;
   u32 parser_start_time ;
   u32 parser_num_bad_checksums ;
   u32 parser_timeouts ;
   u8 parser_in_sync ;
   u32 parser_headers_skipped ;
   u32 packet_timeout ;
   u8 command_response_received ;
   u8 command_id ;
   u8 command_acknack_response ;
   u8 *command_response_data ;
   u8 command_response_data_size ;
   u8 callback_data_set_list[10 + 1] ;
   parser_callback_ptr callback_function_list[10 + 1] ;
   void *callback_user_ptr_list[10 + 1] ;
};
typedef struct _mip_interface mip_interface;
struct _mip_gps_llh_pos {
   double latitude  __attribute__((__aligned__(1)));
   double longitude  __attribute__((__aligned__(1)));
   double ellipsoid_height  __attribute__((__aligned__(1)));
   double msl_height  __attribute__((__aligned__(1)));
   float horizontal_accuracy  __attribute__((__aligned__(1)));
   float vertical_accuracy  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_llh_pos mip_gps_llh_pos;
struct _mip_gps_ecef_pos {
   double x[3]  __attribute__((__aligned__(1)));
   float x_accuracy  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_ecef_pos mip_gps_ecef_pos;
struct _mip_gps_ned_vel {
   float v[3]  __attribute__((__aligned__(1)));
   float speed  __attribute__((__aligned__(1)));
   float ground_speed  __attribute__((__aligned__(1)));
   float heading  __attribute__((__aligned__(1)));
   float speed_accuracy  __attribute__((__aligned__(1)));
   float heading_accuracy  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_ned_vel mip_gps_ned_vel;
struct _mip_ecef_vel {
   float v[3]  __attribute__((__aligned__(1)));
   float v_accuracy  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ecef_vel mip_gps_ecef_vel;
struct _mip_fix_info {
   u8 fix_type  __attribute__((__aligned__(1)));
   u8 num_sv  __attribute__((__aligned__(1)));
   u16 fix_flags  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_fix_info mip_gps_fix_info;
struct _mip_gps_sv_info {
   u8 channel  __attribute__((__aligned__(1)));
   u8 sv_id  __attribute__((__aligned__(1)));
   u16 carrier_noise_ratio  __attribute__((__aligned__(1)));
   s16 azimuth  __attribute__((__aligned__(1)));
   s16 elevation  __attribute__((__aligned__(1)));
   u16 sv_flags  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_sv_info mip_gps_sv_info;
struct _mip_gps_dop {
   float gdop  __attribute__((__aligned__(1)));
   float pdop  __attribute__((__aligned__(1)));
   float hdop  __attribute__((__aligned__(1)));
   float vdop  __attribute__((__aligned__(1)));
   float tdop  __attribute__((__aligned__(1)));
   float ndop  __attribute__((__aligned__(1)));
   float edop  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_dop mip_gps_dop;
struct _mip_gps_utc_time {
   u16 year  __attribute__((__aligned__(1)));
   u8 month  __attribute__((__aligned__(1)));
   u8 day  __attribute__((__aligned__(1)));
   u8 hour  __attribute__((__aligned__(1)));
   u8 min  __attribute__((__aligned__(1)));
   u8 sec  __attribute__((__aligned__(1)));
   u32 msec  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_utc_time mip_gps_utc_time;
struct _mip_gps_time {
   double tow  __attribute__((__aligned__(1)));
   u16 week_number  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_time mip_gps_time;
struct _mip_gps_clock_info {
   double bias  __attribute__((__aligned__(1)));
   double drift  __attribute__((__aligned__(1)));
   double accuracy_estimate  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_clock_info mip_gps_clock_info;
struct _mip_gps_hw_status {
   u8 sensor_state  __attribute__((__aligned__(1)));
   u8 antenna_state  __attribute__((__aligned__(1)));
   u8 antenna_power  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_hw_status mip_gps_hw_status;
struct _mip_gps_dgps_info {
   float age  __attribute__((__aligned__(1)));
   s16 base_station_id  __attribute__((__aligned__(1)));
   s16 base_station_status  __attribute__((__aligned__(1)));
   u16 num_dgps_channels  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_dgps_info mip_gps_dgps_info;
struct _mip_gps_dgps_channel_status {
   u8 sv_id  __attribute__((__aligned__(1)));
   float age  __attribute__((__aligned__(1)));
   float pseudorange_correction  __attribute__((__aligned__(1)));
   float pseudorange_rate_correction  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_gps_dgps_channel_status mip_gps_dgps_channel_status;
struct _mip_ahrs_raw_accel {
   float raw_accel[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_raw_accel mip_ahrs_raw_accel;
struct _mip_ahrs_raw_gyro {
   float raw_gyro[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_raw_gyro mip_ahrs_raw_gyro;
struct _mip_ahrs_raw_mag {
   float raw_mag[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_raw_mag mip_ahrs_raw_mag;
struct _mip_ahrs_scaled_accel {
   float scaled_accel[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_scaled_accel mip_ahrs_scaled_accel;
struct _mip_ahrs_scaled_gyro {
   float scaled_gyro[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_scaled_gyro mip_ahrs_scaled_gyro;
struct _mip_ahrs_scaled_mag {
   float scaled_mag[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_scaled_mag mip_ahrs_scaled_mag;
struct _mip_ahrs_delta_theta {
   float delta_theta[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_delta_theta mip_ahrs_delta_theta;
struct _mip_ahrs_delta_velocity {
   float delta_velocity[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_delta_velocity mip_ahrs_delta_velocity;
struct _mip_ahrs_orientation_matrix {
   float m[3][3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_orientation_matrix mip_ahrs_orientation_matrix;
struct _mip_ahrs_quaternion {
   float q[4]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_quaternion mip_ahrs_quaternion;
struct _mip_ahrs_euler_angles {
   float roll  __attribute__((__aligned__(1)));
   float pitch  __attribute__((__aligned__(1)));
   float yaw  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_euler_angles mip_ahrs_euler_angles;
struct _mip_ahrs_orientation_update_matrix {
   float m[3][3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_orientation_update_matrix mip_ahrs_orientation_update_matrix;
struct _mip_ahrs_raw_temp {
   u16 raw_temp[4]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_raw_temp mip_ahrs_raw_temp;
struct _mip_ahrs_internal_timestamp {
   u32 counts  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_internal_timestamp mip_ahrs_internal_timestamp;
struct _mip_ahrs_1pps_timestamp {
   u8 flags  __attribute__((__aligned__(1)));
   u32 seconds  __attribute__((__aligned__(1)));
   u32 nanoseconds  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_1pps_timestamp mip_ahrs_1pps_timestamp;
struct _mip_ahrs_gps_timestamp {
   double tow  __attribute__((__aligned__(1)));
   u16 week_number  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_gps_timestamp mip_ahrs_gps_timestamp;
struct _mip_ahrs_up_vector {
   float up[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_up_vector mip_ahrs_up_vector;
struct _mip_ahrs_north_vector {
   float north[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_north_vector mip_ahrs_north_vector;
struct _mip_ahrs_signal_settings {
   u16 orientation_decimation  __attribute__((__aligned__(1)));
   u16 data_conditioning_flags  __attribute__((__aligned__(1)));
   u8 inertial_filter_width  __attribute__((__aligned__(1)));
   u8 mag_filter_width  __attribute__((__aligned__(1)));
   u16 up_compensation  __attribute__((__aligned__(1)));
   u16 north_compensation  __attribute__((__aligned__(1)));
   u8 mag_bandwidth  __attribute__((__aligned__(1)));
   u16 reserved  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_ahrs_signal_settings mip_ahrs_signal_settings;
struct _mip_complementary_filter_settings {
   u8 up_compensation_enable  __attribute__((__aligned__(1)));
   u8 north_compensation_enable  __attribute__((__aligned__(1)));
   float up_compensation_time_constant  __attribute__((__aligned__(1)));
   float north_compensation_time_constant  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_complementary_filter_settings mip_complementary_filter_settings;
struct _mip_low_pass_filter_settings {
   u8 data_type  __attribute__((__aligned__(1)));
   u8 filter_type_selector  __attribute__((__aligned__(1)));
   u8 manual_cutoff  __attribute__((__aligned__(1)));
   u16 cutoff_frequency  __attribute__((__aligned__(1)));
   u8 reserved  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_low_pass_filter_settings mip_low_pass_filter_settings;
struct _base_device_info_field {
   u16 firmware_version  __attribute__((__aligned__(1)));
   u16 model_name[8]  __attribute__((__aligned__(1)));
   u16 model_number[8]  __attribute__((__aligned__(1)));
   u16 serial_number[8]  __attribute__((__aligned__(1)));
   u16 lotnumber[8]  __attribute__((__aligned__(1)));
   u16 device_options[8]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _base_device_info_field base_device_info_field;
struct _mip_filter_external_gps_update_command {
   double tow  __attribute__((__aligned__(1)));
   u16 week_number  __attribute__((__aligned__(1)));
   double pos[3]  __attribute__((__aligned__(1)));
   float vel[3]  __attribute__((__aligned__(1)));
   float pos_1sigma[3]  __attribute__((__aligned__(1)));
   float vel_1sigma[3]  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_external_gps_update_command mip_filter_external_gps_update_command;
struct _mip_filter_external_heading_update_command {
   float heading_angle  __attribute__((__aligned__(1)));
   float heading_angle_1sigma  __attribute__((__aligned__(1)));
   u8 type  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_external_heading_update_command mip_filter_external_heading_update_command;
struct _mip_filter_zero_update_command {
   u8 enable  __attribute__((__aligned__(1)));
   float threshold  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_zero_update_command mip_filter_zero_update_command;
struct _mip_filter_external_heading_with_time_command {
   double gps_tow  __attribute__((__aligned__(1)));
   u16 gps_week_number  __attribute__((__aligned__(1)));
   float heading_angle_rads  __attribute__((__aligned__(1)));
   float heading_angle_sigma_rads  __attribute__((__aligned__(1)));
   u8 heading_type  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_external_heading_with_time_command mip_filter_external_heading_with_time_command;
struct _mip_filter_accel_magnitude_error_adaptive_measurement_command {
   u8 enable  __attribute__((__aligned__(1)));
   float low_pass_cutoff  __attribute__((__aligned__(1)));
   float low_limit  __attribute__((__aligned__(1)));
   float high_limit  __attribute__((__aligned__(1)));
   float low_limit_1sigma  __attribute__((__aligned__(1)));
   float high_limit_1sigma  __attribute__((__aligned__(1)));
   float min_1sigma  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_accel_magnitude_error_adaptive_measurement_command mip_filter_accel_magnitude_error_adaptive_measurement_command;
struct _mip_filter_magnetometer_magnitude_error_adaptive_measurement_command {
   u8 enable  __attribute__((__aligned__(1)));
   float low_pass_cutoff  __attribute__((__aligned__(1)));
   float low_limit  __attribute__((__aligned__(1)));
   float high_limit  __attribute__((__aligned__(1)));
   float low_limit_1sigma  __attribute__((__aligned__(1)));
   float high_limit_1sigma  __attribute__((__aligned__(1)));
   float min_1sigma  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_magnetometer_magnitude_error_adaptive_measurement_command mip_filter_magnetometer_magnitude_error_adaptive_measurement_command;
struct _mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command {
   u8 enable  __attribute__((__aligned__(1)));
   float low_pass_cutoff  __attribute__((__aligned__(1)));
   float high_limit  __attribute__((__aligned__(1)));
   float high_limit_1sigma  __attribute__((__aligned__(1)));
   float min_1sigma  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command;
struct _mip_filter_llh_pos {
   double latitude  __attribute__((__aligned__(1)));
   double longitude  __attribute__((__aligned__(1)));
   double ellipsoid_height  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_llh_pos mip_filter_llh_pos;
struct _mip_filter_ned_velocity {
   float north  __attribute__((__aligned__(1)));
   float east  __attribute__((__aligned__(1)));
   float down  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_ned_velocity mip_filter_ned_velocity;
struct _mip_filter_attitude_quaternion {
   float q[4]  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_attitude_quaternion mip_filter_attitude_quaternion;
struct _mip_filter_attitude_dcm {
   float dcm[3][3]  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_attitude_dcm mip_filter_attitude_dcm;
struct _mip_filter_attitude_euler_angles {
   float roll  __attribute__((__aligned__(1)));
   float pitch  __attribute__((__aligned__(1)));
   float yaw  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_attitude_euler_angles mip_filter_attitude_euler_angles;
struct _mip_filter_gyro_bias {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_gyro_bias mip_filter_gyro_bias;
struct _mip_filter_accel_bias {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_accel_bias mip_filter_accel_bias;
struct _mip_filter_llh_pos_uncertainty {
   float north  __attribute__((__aligned__(1)));
   float east  __attribute__((__aligned__(1)));
   float down  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_llh_pos_uncertainty mip_filter_llh_pos_uncertainty;
struct _mip_filter_ned_vel_uncertainty {
   float north  __attribute__((__aligned__(1)));
   float east  __attribute__((__aligned__(1)));
   float down  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_ned_vel_uncertainty mip_filter_ned_vel_uncertainty;
struct _mip_filter_euler_attitude_uncertainty {
   float roll  __attribute__((__aligned__(1)));
   float pitch  __attribute__((__aligned__(1)));
   float yaw  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_euler_attitude_uncertainty mip_filter_euler_attitude_uncertainty;
struct _mip_filter_gyro_bias_uncertainty {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_gyro_bias_uncertainty mip_filter_gyro_bias_uncertainty;
struct _mip_filter_accel_bias_uncertainty {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_accel_bias_uncertainty mip_filter_accel_bias_uncertainty;
struct _mip_filter_timestamp {
   double tow  __attribute__((__aligned__(1)));
   u16 week_number  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_timestamp mip_filter_timestamp;
struct _mip_filter_status {
   u16 filter_state  __attribute__((__aligned__(1)));
   u16 dynamics_mode  __attribute__((__aligned__(1)));
   u16 status_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_status mip_filter_status;
struct _mip_filter_linear_acceleration {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_linear_acceleration mip_filter_linear_acceleration;
struct _mip_filter_compensated_acceleration {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_compensated_acceleration mip_filter_compensated_acceleration;
struct _mip_filter_gravity_vector {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_gravity_vector mip_filter_gravity_vector;
struct _mip_filter_compensated_angular_rate {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_compensated_angular_rate mip_filter_compensated_angular_rate;
struct _mip_filter_quaternion_attitude_uncertainty {
   float q0  __attribute__((__aligned__(1)));
   float q1  __attribute__((__aligned__(1)));
   float q2  __attribute__((__aligned__(1)));
   float q3  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_quaternion_attitude_uncertainty mip_filter_quaternion_attitude_uncertainty;
struct _mip_filter_wgs84_gravity_mag {
   float magnitude  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_wgs84_gravity_mag mip_filter_wgs84_gravity_mag;
struct _mip_filter_heading_update_state {
   float heading  __attribute__((__aligned__(1)));
   float heading_1sigma  __attribute__((__aligned__(1)));
   u16 source  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_heading_update_state mip_filter_heading_update_state;
struct _mip_filter_magnetic_model {
   float intensity_north  __attribute__((__aligned__(1)));
   float intensity_east  __attribute__((__aligned__(1)));
   float intensity_down  __attribute__((__aligned__(1)));
   float inclination  __attribute__((__aligned__(1)));
   float declination  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_magnetic_model mip_filter_magnetic_model;
struct _mip_filter_accel_scale_factor_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_accel_scale_factor_mip_field mip_filter_accel_scale_factor_mip_field;
struct _mip_filter_accel_scale_factor_uncertainty_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_accel_scale_factor_uncertainty_mip_field mip_filter_accel_scale_factor_uncertainty_mip_field;
struct _mip_filter_gyro_scale_factor_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_gyro_scale_factor_mip_field mip_filter_gyro_scale_factor_mip_field;
struct _mip_filter_gyro_scale_factor_uncertainty_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_gyro_scale_factor_uncertainty_mip_field mip_filter_gyro_scale_factor_uncertainty_mip_field;
struct _mip_filter_mag_bias_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_mag_bias_mip_field mip_filter_mag_bias_mip_field;
struct _mip_filter_mag_bias_uncertainty_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_mag_bias_uncertainty_mip_field mip_filter_mag_bias_uncertainty_mip_field;
struct _mip_filter_compensated_mag_vector_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_compensated_mag_vector_mip_field mip_filter_compensated_mag_vector_mip_field;
struct _mip_filter_standard_atmosphere_mip_field {
   float geometric_altitude  __attribute__((__aligned__(1)));
   float geopotential_altitude  __attribute__((__aligned__(1)));
   float standard_temperature  __attribute__((__aligned__(1)));
   float standard_pressure  __attribute__((__aligned__(1)));
   float standard_density  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_standard_atmosphere_mip_field mip_filter_standard_atmosphere_mip_field;
struct _mip_filter_pressure_altitude_mip_field {
   float pressure_altitude  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_pressure_altitude_mip_field mip_filter_pressure_altitude_mip_field;
struct _mip_filter_density_altitude_mip_field {
   float density_altitude  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_density_altitude_mip_field mip_filter_density_altitude_mip_field;
struct _mip_filter_antenna_offset_correction_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_antenna_offset_correction_mip_field mip_filter_antenna_offset_correction_mip_field;
struct _mip_filter_antenna_offset_correction_uncertainty_mip_field {
   float x  __attribute__((__aligned__(1)));
   float y  __attribute__((__aligned__(1)));
   float z  __attribute__((__aligned__(1)));
   u16 valid_flags  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _mip_filter_antenna_offset_correction_uncertainty_mip_field mip_filter_antenna_offset_correction_uncertainty_mip_field;
struct _gx4_imu_basic_status_field {
   u16 device_model  __attribute__((__aligned__(1)));
   u8 status_selector  __attribute__((__aligned__(1)));
   u32 status_flags  __attribute__((__aligned__(1)));
   u32 system_timer_ms  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _gx4_imu_basic_status_field gx4_imu_basic_status_field;
struct _gx4_imu_diagnostic_status_field {
   u16 device_model  __attribute__((__aligned__(1)));
   u8 status_selector  __attribute__((__aligned__(1)));
   u32 status_flags  __attribute__((__aligned__(1)));
   u32 system_timer_ms  __attribute__((__aligned__(1)));
   u8 has_mag  __attribute__((__aligned__(1)));
   u8 has_pressure  __attribute__((__aligned__(1)));
   u16 gyro_range  __attribute__((__aligned__(1)));
   u8 accel_range  __attribute__((__aligned__(1)));
   float mag_range  __attribute__((__aligned__(1)));
   float pressure_range  __attribute__((__aligned__(1)));
   float temp_degc  __attribute__((__aligned__(1)));
   u32 last_temp_read_ms  __attribute__((__aligned__(1)));
   u8 temp_sensor_error  __attribute__((__aligned__(1)));
   u32 num_gps_pps_triggers  __attribute__((__aligned__(1)));
   u32 last_gps_pps_trigger_ms  __attribute__((__aligned__(1)));
   u8 stream_enabled  __attribute__((__aligned__(1)));
   u32 dropped_packets  __attribute__((__aligned__(1)));
   u32 com_port_bytes_written  __attribute__((__aligned__(1)));
   u32 com_port_bytes_read  __attribute__((__aligned__(1)));
   u32 com_port_write_overruns  __attribute__((__aligned__(1)));
   u32 com_port_read_overruns  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _gx4_imu_diagnostic_status_field gx4_imu_diagnostic_device_status_field;
struct _gx4_45_basic_status_field {
   u16 device_model  __attribute__((__aligned__(1)));
   u8 status_selector  __attribute__((__aligned__(1)));
   u32 status_flags  __attribute__((__aligned__(1)));
   u16 system_state  __attribute__((__aligned__(1)));
   u32 system_timer_ms  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _gx4_45_basic_status_field gx4_45_basic_status_field;
struct _gx4_45_diagnostic_status_field {
   u16 device_model  __attribute__((__aligned__(1)));
   u8 status_selector  __attribute__((__aligned__(1)));
   u32 status_flags  __attribute__((__aligned__(1)));
   u16 system_state  __attribute__((__aligned__(1)));
   u32 system_timer_ms  __attribute__((__aligned__(1)));
   u8 gps_power_on  __attribute__((__aligned__(1)));
   u32 num_gps_pps_triggers  __attribute__((__aligned__(1)));
   u32 last_gps_pps_trigger_ms  __attribute__((__aligned__(1)));
   u8 imu_stream_enabled  __attribute__((__aligned__(1)));
   u8 gps_stream_enabled  __attribute__((__aligned__(1)));
   u8 filter_stream_enabled  __attribute__((__aligned__(1)));
   u32 imu_dropped_packets  __attribute__((__aligned__(1)));
   u32 gps_dropped_packets  __attribute__((__aligned__(1)));
   u32 filter_dropped_packets  __attribute__((__aligned__(1)));
   u32 com1_port_bytes_written  __attribute__((__aligned__(1)));
   u32 com1_port_bytes_read  __attribute__((__aligned__(1)));
   u32 com1_port_write_overruns  __attribute__((__aligned__(1)));
   u32 com1_port_read_overruns  __attribute__((__aligned__(1)));
   u32 imu_parser_errors  __attribute__((__aligned__(1)));
   u32 imu_message_count  __attribute__((__aligned__(1)));
   u32 imu_last_message_ms  __attribute__((__aligned__(1)));
   u32 gps_parser_errors  __attribute__((__aligned__(1)));
   u32 gps_message_count  __attribute__((__aligned__(1)));
   u32 gps_last_message_ms  __attribute__((__aligned__(1)));
} __attribute__((__packed__, __aligned__(1)));
typedef struct _gx4_45_diagnostic_status_field gx4_45_diagnostic_device_status_field;
int main(int argc, char **argv);

int eva_main(void)
{
  char argv0[256];
  char argv1[256];
  char argv2[256];
  char argv3[256];
  char argv4[256];
  int tmp_0;
  int argc = Frama_C_interval(0,5);
  char *argv[6] = {argv0, argv1, argv2, argv3, argv4, (char *)0};
  {
    int i = 0;
    /*@ loop unroll 5; */
    while (i < 5) {
      Frama_C_make_unknown(argv[i],(size_t)255);
      *(argv[i] + 255) = (char)0;
      i ++;
    }
  }
  tmp_0 = main(argc,argv);
  return tmp_0;
}

u16 mip_init(u8 *mip_buffer, u16 buffer_size, u8 descriptor_set);

u16 mip_add_field(u8 *mip_buffer, u16 buffer_size, void *field_data,
                  u16 data_size, u16 data_descriptor);

u16 mip_add_formatted_field(u8 *mip_buffer, u16 buffer_size, void *field);

u16 mip_finalize(u8 *mip_buffer);

u16 mip_is_initialized(u8 *mip_buffer, u8 descriptor_set);

u16 mip_is_mip_packet(u8 *mip_buffer);

u8 mip_get_packet_descriptor_set(u8 *mip_buffer);

u8 mip_get_payload_size(u8 *mip_buffer);

u8 *mip_get_payload_ptr(u8 *mip_buffer);

u16 mip_get_packet_size(u8 *mip_buffer);

u16 mip_get_first_field(u8 *mip_buffer, mip_field_header **field_header,
                        u8 **field_data, u16 *field_offset);

u16 mip_get_next_field(u8 *mip_buffer, mip_field_header **field_header,
                       u8 **field_data, u16 *field_offset);

u16 mip_calculate_checksum(u8 *mip_buffer);

u16 mip_is_checksum_valid(u8 *mip_buffer);

u16 mip_init(u8 *mip_buffer, u16 buffer_size, u8 descriptor_set)
{
  u16 __retres;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((unsigned int)buffer_size < sizeof(mip_header) + (unsigned int)2) {
    __retres = (u16)2;
    goto return_label;
  }
  header_ptr->sync1 = (u8)0x75;
  header_ptr->sync2 = (u8)0x65;
  header_ptr->descriptor_set = descriptor_set;
  header_ptr->payload_size = (u8)0;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_is_initialized(u8 *mip_buffer, u8 descriptor_set)
{
  u16 __retres;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)header_ptr->sync1 == 0x75) 
    if ((int)header_ptr->sync2 == 0x65) 
      if ((int)header_ptr->descriptor_set == (int)descriptor_set) {
        __retres = (u16)0;
        goto return_label;
      }
  __retres = (u16)1;
  return_label: return __retres;
}

u16 mip_add_field(u8 *mip_buffer, u16 buffer_size, void *field_data,
                  u16 data_size, u16 data_descriptor)
{
  u16 __retres;
  mip_field_header *field_header_ptr;
  u8 *field_data_ptr;
  u16 new_packet_size;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if (field_data == (void *)0) 
    if ((int)data_size > 0) {
      __retres = (u16)1;
      goto return_label;
    }
  new_packet_size = (u16)((((sizeof(mip_header) + (unsigned int)header_ptr->payload_size) + (unsigned int)data_size) + sizeof(mip_field_header)) + (unsigned int)2);
  if ((unsigned int)new_packet_size > (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) {
    __retres = (u16)2;
    goto return_label;
  }
  else 
    if ((int)new_packet_size > (int)buffer_size) {
      __retres = (u16)2;
      goto return_label;
    }
  field_header_ptr = (mip_field_header *)((mip_buffer + sizeof(mip_header)) + (int)header_ptr->payload_size);
  field_header_ptr->size = (u8)((unsigned int)data_size + sizeof(mip_field_header));
  field_header_ptr->descriptor = (u8)data_descriptor;
  if (field_data != (void *)0) {
    field_data_ptr = (u8 *)field_header_ptr + sizeof(mip_field_header);
    memcpy((void *)field_data_ptr,(void const *)field_data,(size_t)data_size);
  }
  header_ptr->payload_size = (u8)((unsigned int)header_ptr->payload_size + (
                                  (unsigned int)data_size + sizeof(mip_field_header)));
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_add_formatted_field(u8 *mip_buffer, u16 buffer_size, void *field)
{
  u16 __retres;
  u8 *field_location;
  u16 new_packet_size;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  mip_field_header *field_header_ptr = (mip_field_header *)field;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if (field == (void *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  new_packet_size = (u16)(((sizeof(mip_header) + (unsigned int)header_ptr->payload_size) + (unsigned int)field_header_ptr->size) + (unsigned int)2);
  if ((unsigned int)new_packet_size > (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) {
    __retres = (u16)2;
    goto return_label;
  }
  else 
    if ((int)new_packet_size > (int)buffer_size) {
      __retres = (u16)2;
      goto return_label;
    }
  field_location = (mip_buffer + sizeof(mip_header)) + (int)header_ptr->payload_size;
  memcpy((void *)field_location,(void const *)field,
         (size_t)field_header_ptr->size);
  header_ptr->payload_size = (u8)((int)header_ptr->payload_size + (int)field_header_ptr->size);
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_finalize(u8 *mip_buffer)
{
  u16 __retres;
  u16 checksum;
  u16 checksum_offset;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)0;
    goto return_label;
  }
  checksum_offset = (u16)((unsigned int)header_ptr->payload_size + sizeof(mip_header));
  if ((unsigned int)checksum_offset > ((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) - (unsigned int)2) {
    __retres = (u16)0;
    goto return_label;
  }
  checksum = mip_calculate_checksum(mip_buffer);
  *(mip_buffer + checksum_offset) = (u8)(((int)checksum >> 8) & 0xFF);
  *(mip_buffer + ((int)checksum_offset + 1)) = (u8)((int)checksum & 0xFF);
  __retres = (u16)(((unsigned int)header_ptr->payload_size + sizeof(mip_header)) + (unsigned int)2);
  return_label: return __retres;
}

u16 mip_is_mip_packet(u8 *mip_buffer)
{
  u16 __retres;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)header_ptr->sync1 == 0x75) 
    if ((int)header_ptr->sync2 == 0x65) 
      if ((int)header_ptr->payload_size <= 255) {
        __retres = (u16)0;
        goto return_label;
      }
  __retres = (u16)4;
  return_label: return __retres;
}

u16 mip_get_packet_size(u8 *mip_buffer)
{
  u16 __retres;
  u16 tmp;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u16)0;
    goto return_label;
  }
  __retres = (u16)(((unsigned int)header_ptr->payload_size + sizeof(mip_header)) + (unsigned int)2);
  return_label: return __retres;
}

u16 mip_get_first_field(u8 *mip_buffer, mip_field_header **field_header,
                        u8 **field_data, u16 *field_offset)
{
  u16 __retres;
  u16 tmp;
  if (field_offset == (u16 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  *field_offset = (u16)0;
  tmp = mip_get_next_field(mip_buffer,field_header,field_data,field_offset);
  __retres = tmp;
  return_label: return __retres;
}

u16 mip_get_next_field(u8 *mip_buffer, mip_field_header **field_header,
                       u8 **field_data, u16 *field_offset)
{
  u16 __retres;
  u8 *field_ptr;
  u16 tmp;
  u8 *tmp_0;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u16)4;
    goto return_label;
  }
  if ((int)*field_offset >= (int)header_ptr->payload_size) {
    __retres = (u16)3;
    goto return_label;
  }
  tmp_0 = mip_get_payload_ptr(mip_buffer);
  field_ptr = tmp_0 + (int)*field_offset;
  *field_header = (mip_field_header *)field_ptr;
  *field_data = field_ptr + sizeof(mip_field_header);
  if ((int)(*field_header)->size == 0) {
    __retres = (u16)1;
    goto return_label;
  }
  *field_offset = (u16)((int)*field_offset + (int)(*field_header)->size);
  __retres = (u16)0;
  return_label: return __retres;
}

u8 mip_get_packet_descriptor_set(u8 *mip_buffer)
{
  u8 __retres;
  u16 tmp;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u8)0;
    goto return_label;
  }
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u8)0;
    goto return_label;
  }
  __retres = header_ptr->descriptor_set;
  return_label: return __retres;
}

u8 mip_get_payload_size(u8 *mip_buffer)
{
  u8 __retres;
  u16 tmp;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u8)0;
    goto return_label;
  }
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u8)0;
    goto return_label;
  }
  __retres = header_ptr->payload_size;
  return_label: return __retres;
}

u8 *mip_get_payload_ptr(u8 *mip_buffer)
{
  u8 *__retres;
  u16 tmp;
  if (mip_buffer == (u8 *)0) {
    __retres = (u8 *)0;
    goto return_label;
  }
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u8 *)0;
    goto return_label;
  }
  __retres = mip_buffer + sizeof(mip_header);
  return_label: return __retres;
}

u16 mip_is_checksum_valid(u8 *mip_buffer)
{
  u16 __retres;
  u16 packet_checksum;
  u16 expected_checksum;
  u16 tmp;
  u16 checksum_offset = (u16)0;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  tmp = mip_is_mip_packet(mip_buffer);
  if ((int)tmp != 0) {
    __retres = (u16)4;
    goto return_label;
  }
  checksum_offset = (u16)((unsigned int)header_ptr->payload_size + sizeof(mip_header));
  packet_checksum = (u16)(((int)((u16)*(mip_buffer + checksum_offset)) << 8) + (int)((u16)*(
                          mip_buffer + ((int)checksum_offset + 1))));
  expected_checksum = mip_calculate_checksum(mip_buffer);
  if ((int)packet_checksum == (int)expected_checksum) {
    __retres = (u16)0;
    goto return_label;
  }
  else {
    __retres = (u16)5;
    goto return_label;
  }
  return_label: return __retres;
}

u16 mip_calculate_checksum(u8 *mip_buffer)
{
  u16 __retres;
  u16 i;
  u16 checksum;
  u16 checksum_range_size;
  mip_header *header_ptr = (mip_header *)mip_buffer;
  u8 checksum_byte1 = (u8)0;
  u8 checksum_byte2 = (u8)0;
  if (mip_buffer == (u8 *)0) {
    __retres = (u16)0;
    goto return_label;
  }
  checksum_range_size = (u16)((unsigned int)header_ptr->payload_size + sizeof(mip_header));
  if ((unsigned int)checksum_range_size > ((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) - (unsigned int)2) {
    __retres = (u16)0;
    goto return_label;
  }
  i = (u16)0;
  while ((int)i < (int)checksum_range_size) {
    checksum_byte1 = (u8)((int)checksum_byte1 + (int)*(mip_buffer + i));
    checksum_byte2 = (u8)((int)checksum_byte2 + (int)checksum_byte1);
    i = (u16)((int)i + 1);
  }
  checksum = (u16)(((int)((u16)checksum_byte1) << 8) + (int)((u16)checksum_byte2));
  __retres = checksum;
  return_label: return __retres;
}

u16 purge(ComPortHandle comPortHandle);

u16 mip_sdk_port_open(void **port_handle, char const *portstr, int baudrate);

u16 mip_sdk_port_close(void *port_handle);

u16 mip_sdk_port_write(void *port_handle, u8 *buffer, u32 num_bytes,
                       u32 *bytes_written, u32 timeout_ms);

u16 mip_sdk_port_read(void *port_handle, u8 *buffer, u32 num_bytes,
                      u32 *bytes_read, u32 timeout_ms);

u32 mip_sdk_port_read_count(void *port_handle);

u32 mip_sdk_get_time_ms(void);

u16 ring_buffer_init_static(ring_buffer *buffer, u8 *data_buffer_ptr,
                            u32 max_entries, u32 entry_size);

u16 ring_buffer_init_malloc(ring_buffer *buffer, u32 max_entries,
                            u32 entry_size);

u32 ring_buffer_count(ring_buffer *buffer);

u32 ring_buffer_remaining_entries(ring_buffer *buffer);

u16 ring_buffer_flush(ring_buffer *buffer);

u16 ring_buffer_write(ring_buffer *buffer, u8 *entry, u32 num_bytes);

u16 ring_buffer_write_multi(ring_buffer *buffer, u8 *entry_buff,
                            u32 num_entries, u32 *num_written);

u16 ring_buffer_read(ring_buffer *buffer, u8 *entry, u32 max_bytes);

u16 ring_buffer_read_multi(ring_buffer *buffer, u8 *entry_buff,
                           u32 entry_buff_size, u32 num_requested,
                           u32 *num_read);

u16 ring_buffer_lookahead_read(ring_buffer *buffer, u32 offset, u8 *entry,
                               u32 max_bytes);

u16 ring_buffer_lookahead_read_multi(ring_buffer *buffer, u32 offset,
                                     u8 *entry_buff, u32 entry_buff_size,
                                     u32 num_requested, u32 *num_read);

u32 ring_buffer_copy(ring_buffer *to, ring_buffer *from, u32 num_entries);

u32 ring_buffer_lookahead_copy(ring_buffer *to, u32 offset,
                               ring_buffer *from, u32 num_entries);

u16 ring_buffer_consume_entries(ring_buffer *buffer, u32 num_entries);

u8 *ring_buffer_get_first_element_ptr(ring_buffer *buffer);

u16 ring_buffer_remove_first_element(ring_buffer *buffer);

u8 *ring_buffer_get_available_element_ptr(ring_buffer *buffer);

u16 ring_buffer_increment_count(ring_buffer *buffer);

u16 ring_buffer_malloc_free(ring_buffer *buffer);

void __ring_buffer_reset(ring_buffer *buffer);

void byteswap(void *in, void *out, u16 size);

void byteswap_inplace(void *data, u16 size);

u16 mip_interface_init(char const *portstr, u32 baudrate,
                       mip_interface *device_interface_0,
                       u32 packet_timeout_val);

u16 mip_interface_close(mip_interface *device_interface_0);

u16 mip_interface_add_descriptor_set_callback(mip_interface *device_interface_0,
                                              u8 data_set, void *user_ptr,
                                              void (*packet_callback)
                                              (void *user_ptr, u8 *packet,
                                               u16 packet_size,
                                               u8 callback_type));

u16 mip_interface_delete_descriptor_set_callback(mip_interface *device_interface_0,
                                                 u8 data_set);

u16 mip_interface_update(mip_interface *device_interface_0);

u16 mip_interface_send_command(mip_interface *device_interface_0,
                               u8 command_set, u8 command_descriptor,
                               u8 *command_data, u16 command_data_size,
                               u8 wait_for_response, u32 timeout_ms);

u16 mip_interface_send_preformatted_command(mip_interface *device_interface_0,
                                            u8 *command, u16 command_size,
                                            u8 wait_for_response,
                                            u32 timeout_ms);

u16 mip_interface_send_command_with_response(mip_interface *device_interface_0,
                                             u8 command_set,
                                             u8 command_descriptor,
                                             u8 *command_data,
                                             u16 command_data_size,
                                             u8 **response_data,
                                             u16 *response_data_size,
                                             u32 timeout_ms);

u16 mip_interface_send_preformatted_command_with_response(mip_interface *device_interface_0,
                                                          u8 *command,
                                                          u16 command_size,
                                                          u8 **response_data,
                                                          u16 *response_data_size,
                                                          u32 timeout_ms);

u16 mip_interface_write(mip_interface *device_interface_0, u8 *data,
                        u32 num_bytes, u32 *bytes_written);

u16 mip_interface_write_blocking(mip_interface *device_interface_0, u8 *data,
                                 u32 num_bytes, u32 *bytes_written,
                                 u32 timeout_ms);

u16 __mip_interface_parse_input_buffer(mip_interface *device_interface_0);

u16 __mip_interface_find_callback(mip_interface *device_interface_0,
                                  u8 data_set, void **callback_user_ptr,
                                  parser_callback_ptr *callback_function);

u16 __mip_interface_time_timeout(u32 initial_time, u32 timeout_ms);

u16 __mip_interface_wait_for_response(mip_interface *device_interface_0,
                                      u8 command_set, u8 command_descriptor,
                                      u8 *acknack_response,
                                      u8 **response_data,
                                      u16 *response_data_size, u32 timeout_ms);

void __mip_interface_command_response_handler(void *user_ptr, u8 *packet,
                                              u16 packet_size,
                                              u8 callback_type);

void mip_gps_llh_pos_byteswap(mip_gps_llh_pos *llh_pos);

void mip_gps_ecef_pos_byteswap(mip_gps_ecef_pos *ecef_pos);

void mip_gps_ned_vel_byteswap(mip_gps_ned_vel *ned_vel);

void mip_gps_ecef_vel_byteswap(mip_gps_ecef_vel *ecef_vel);

void mip_gps_fix_info_byteswap(mip_gps_fix_info *fix_info);

void mip_gps_sv_info_byteswap(mip_gps_sv_info *sv_info);

void mip_gps_dop_byteswap(mip_gps_dop *dop);

void mip_gps_utc_time_byteswap(mip_gps_utc_time *utc_time);

void mip_gps_time_byteswap(mip_gps_time *gps_time);

void mip_gps_clock_info_byteswap(mip_gps_clock_info *clock_info);

void mip_gps_hw_status_byteswap(mip_gps_hw_status *hw_status);

void mip_gps_dgps_info_byteswap(mip_gps_dgps_info *dgps_info);

void mip_gps_dgps_channel_status_byteswap(mip_gps_dgps_channel_status *dgps_channel_status);

void mip_ahrs_raw_accel_byteswap(mip_ahrs_raw_accel *raw_accel);

void mip_ahrs_raw_gyro_byteswap(mip_ahrs_raw_gyro *raw_gyro);

void mip_ahrs_raw_mag_byteswap(mip_ahrs_raw_mag *raw_mag);

void mip_ahrs_scaled_accel_byteswap(mip_ahrs_scaled_accel *scaled_accel);

void mip_ahrs_scaled_gyro_byteswap(mip_ahrs_scaled_gyro *scaled_gyro);

void mip_ahrs_scaled_mag_byteswap(mip_ahrs_scaled_mag *scaled_mag);

void mip_ahrs_delta_theta_byteswap(mip_ahrs_delta_theta *delta_theta);

void mip_ahrs_delta_velocity_byteswap(mip_ahrs_delta_velocity *delta_velocity);

void mip_ahrs_orientation_matrix_byteswap(mip_ahrs_orientation_matrix *orientation_matrix);

void mip_ahrs_quaternion_byteswap(mip_ahrs_quaternion *quaternion);

void mip_ahrs_euler_angles_byteswap(mip_ahrs_euler_angles *euler_angles);

void mip_ahrs_orientation_update_matrix_byteswap(mip_ahrs_orientation_update_matrix *orientation_update_matrix);

void mip_ahrs_raw_temp_byteswap(mip_ahrs_raw_temp *raw_temp);

void mip_ahrs_internal_timestamp_byteswap(mip_ahrs_internal_timestamp *internal_timestamp);

void mip_ahrs_1pps_timestamp_byteswap(mip_ahrs_1pps_timestamp *pps_timestamp);

void mip_ahrs_gps_timestamp_byteswap(mip_ahrs_gps_timestamp *gps_timestamp);

void mip_ahrs_up_vector_byteswap(mip_ahrs_up_vector *up_vector);

void mip_ahrs_north_vector_byteswap(mip_ahrs_north_vector *north_vector);

void mip_ahrs_signal_settings_byteswap(mip_ahrs_signal_settings *signal_settings);

u16 mip_3dm_cmd_poll_ahrs(mip_interface *device_interface_0,
                          u8 option_selector, u8 num_descriptors,
                          u8 *descriptor_list);

u16 mip_3dm_cmd_poll_gps(mip_interface *device_interface_0,
                         u8 option_selector, u8 num_descriptors,
                         u8 *descriptor_list);

u16 mip_3dm_cmd_poll_filter(mip_interface *device_interface_0,
                            u8 option_selector, u8 num_descriptors,
                            u8 *descriptor_list);

u16 mip_3dm_cmd_get_ahrs_base_rate(mip_interface *device_interface_0,
                                   u16 *base_rate);

u16 mip_3dm_cmd_get_gps_base_rate(mip_interface *device_interface_0,
                                  u16 *base_rate);

u16 mip_3dm_cmd_get_filter_base_rate(mip_interface *device_interface_0,
                                     u16 *base_rate);

u16 mip_3dm_cmd_ahrs_message_format(mip_interface *device_interface_0,
                                    u8 function_selector, u8 *num_entries,
                                    u8 *descriptors, u16 *decimation);

u16 mip_3dm_cmd_gps_message_format(mip_interface *device_interface_0,
                                   u8 function_selector, u8 *num_entries,
                                   u8 *descriptors, u16 *decimation);

u16 mip_3dm_cmd_filter_message_format(mip_interface *device_interface_0,
                                      u8 function_selector, u8 *num_entries,
                                      u8 *descriptors, u16 *decimation);

u16 mip_3dm_cmd_continuous_data_stream(mip_interface *device_interface_0,
                                       u8 function_selector,
                                       u8 device_selector, u8 *enable);

u16 mip_3dm_cmd_startup_settings(mip_interface *device_interface_0,
                                 u8 function_selector);

u16 mip_3dm_cmd_gps_dynamics_mode(mip_interface *device_interface_0,
                                  u8 function_selector, u8 *dynamics_mode);

u16 mip_3dm_cmd_gps_advanced_settings(mip_interface *device_interface_0,
                                      u8 function_selector);

u16 mip_3dm_cmd_ahrs_signal_conditioning(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         mip_ahrs_signal_settings *settings);

u16 mip_3dm_cmd_ahrs_timestamp(mip_interface *device_interface_0,
                               u8 function_selector, u8 *time_selector,
                               u32 *time_0);

u16 mip_3dm_cmd_uart_baudrate(mip_interface *device_interface_0,
                              u8 function_selector, u32 *baudrate);

u16 mip_3dm_cmd_datastream_format(mip_interface *device_interface_0,
                                  u8 function_selector, u8 device_selector,
                                  u8 *format);

u16 mip_3dm_cmd_power_state(mip_interface *device_interface_0,
                            u8 function_selector, u8 device_selector,
                            u8 *power_state);

u16 mip_3dm_cmd_device_status(mip_interface *device_interface_0,
                              u16 model_number, u8 status_selector,
                              u8 *response_buffer, u16 *response_size);

u16 mip_3dm_cmd_low_pass_filter_settings(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         mip_low_pass_filter_settings *filter_settings);

u16 mip_3dm_cmd_accel_bias(mip_interface *device_interface_0,
                           u8 function_selector, float *bias_vector);

u16 mip_3dm_cmd_gyro_bias(mip_interface *device_interface_0,
                          u8 function_selector, float *bias_vector);

u16 mip_3dm_cmd_coning_sculling_compensation(mip_interface *device_interface_0,
                                             u8 function_selector, u8 *enable);

u16 mip_3dm_cmd_capture_gyro_bias(mip_interface *device_interface_0,
                                  u16 duration_ms, float *bias_vector);

u16 mip_3dm_cmd_hard_iron(mip_interface *device_interface_0,
                          u8 function_selector, float *vector);

u16 mip_3dm_cmd_soft_iron(mip_interface *device_interface_0,
                          u8 function_selector, float *matrix);

u16 mip_3dm_sensor2vehicle_tranformation(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         float euler_angles[3]);

u16 mip_3dm_cmd_complementary_filter_settings(mip_interface *device_interface_0,
                                              u8 function_selector,
                                              mip_complementary_filter_settings *settings);

u16 mip_3dm_cmd_rtcm_23_message(mip_interface *device_interface_0,
                                u8 *raw_data, u16 num_bytes);

u16 mip_3dm_cmd_poll_ahrs(mip_interface *device_interface_0,
                          u8 option_selector, u8 num_descriptors,
                          u8 *descriptor_list)
{
  u16 __retres;
  u8 i;
  u16 tmp;
  u8 command_data[255] = {(u8)0};
  u8 wait_for_response = (u8)0;
  if ((int)num_descriptors >= 255) {
    __retres = (u16)1;
    goto return_label;
  }
  command_data[0] = option_selector;
  command_data[1] = num_descriptors;
  i = (u8)0;
  while ((int)i < (int)num_descriptors) {
    command_data[2 + (int)i * 3] = *(descriptor_list + i);
    command_data[3 + (int)i * 3] = (u8)0;
    command_data[4 + (int)i * 3] = (u8)0;
    i = (u8)((int)i + 1);
  }
  if ((int)option_selector == 0x00) wait_for_response = (u8)1;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x01,
                                   command_data,
                                   (u16)(sizeof(u8) * (unsigned int)2 + (unsigned int)(
                                         (int)num_descriptors * 3)),
                                   wait_for_response,(u32)1000);
  __retres = tmp;
  return_label: return __retres;
}

u16 mip_3dm_cmd_poll_gps(mip_interface *device_interface_0,
                         u8 option_selector, u8 num_descriptors,
                         u8 *descriptor_list)
{
  u16 __retres;
  u8 i;
  u16 tmp;
  u8 command_data[255] = {(u8)0};
  u8 wait_for_response = (u8)0;
  if ((int)num_descriptors >= 255) {
    __retres = (u16)1;
    goto return_label;
  }
  command_data[0] = option_selector;
  command_data[1] = num_descriptors;
  i = (u8)0;
  while ((int)i < (int)num_descriptors) {
    command_data[2 + (int)i * 3] = *(descriptor_list + i);
    command_data[3 + (int)i * 3] = (u8)0;
    command_data[4 + (int)i * 3] = (u8)0;
    i = (u8)((int)i + 1);
  }
  if ((int)option_selector == 0x00) wait_for_response = (u8)1;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x02,
                                   command_data,
                                   (u16)(sizeof(u8) * (unsigned int)2 + (unsigned int)(
                                         (int)num_descriptors * 3)),
                                   wait_for_response,(u32)1000);
  __retres = tmp;
  return_label: return __retres;
}

u16 mip_3dm_cmd_poll_filter(mip_interface *device_interface_0,
                            u8 option_selector, u8 num_descriptors,
                            u8 *descriptor_list)
{
  u16 __retres;
  u8 i;
  u16 tmp;
  u8 command_data[255] = {(u8)0};
  u8 wait_for_response = (u8)0;
  if ((int)num_descriptors >= 255) {
    __retres = (u16)1;
    goto return_label;
  }
  command_data[0] = option_selector;
  command_data[1] = num_descriptors;
  i = (u8)0;
  while ((int)i < (int)num_descriptors) {
    command_data[2 + (int)i * 3] = *(descriptor_list + i);
    command_data[3 + (int)i * 3] = (u8)0;
    command_data[4 + (int)i * 3] = (u8)0;
    i = (u8)((int)i + 1);
  }
  if ((int)option_selector == 0x00) wait_for_response = (u8)1;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x03,
                                   command_data,
                                   (u16)(sizeof(u8) * (unsigned int)2 + (unsigned int)(
                                         (int)num_descriptors * 3)),
                                   wait_for_response,(u32)1000);
  __retres = tmp;
  return_label: return __retres;
}

u16 mip_3dm_cmd_get_ahrs_base_rate(mip_interface *device_interface_0,
                                   u16 *base_rate)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x06,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) {
    field_header_ptr = (mip_field_header *)response_data;
    if ((int)field_header_ptr->descriptor == 0x83) 
      if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u16)) {
        memcpy((void *)base_rate,
               (void const *)(response_data + sizeof(mip_field_header)),
               sizeof(u16));
        byteswap_inplace((void *)base_rate,(u16)sizeof(u16));
      }
      else return_code = (u16)1;
    else return_code = (u16)1;
  }
  return return_code;
}

u16 mip_3dm_cmd_get_gps_base_rate(mip_interface *device_interface_0,
                                  u16 *base_rate)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x07,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) {
    field_header_ptr = (mip_field_header *)response_data;
    if ((int)field_header_ptr->descriptor == 0x84) 
      if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u16)) {
        memcpy((void *)base_rate,
               (void const *)(response_data + sizeof(mip_field_header)),
               sizeof(u16));
        byteswap_inplace((void *)base_rate,(u16)sizeof(u16));
      }
      else return_code = (u16)1;
    else return_code = (u16)1;
  }
  return return_code;
}

u16 mip_3dm_cmd_get_filter_base_rate(mip_interface *device_interface_0,
                                     u16 *base_rate)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x0B,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) {
    field_header_ptr = (mip_field_header *)response_data;
    if ((int)field_header_ptr->descriptor == 0x8A) 
      if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u16)) {
        memcpy((void *)base_rate,
               (void const *)(response_data + sizeof(mip_field_header)),
               sizeof(u16));
        byteswap_inplace((void *)base_rate,(u16)sizeof(u16));
      }
      else return_code = (u16)1;
    else return_code = (u16)1;
  }
  return return_code;
}

u16 mip_3dm_cmd_ahrs_message_format(mip_interface *device_interface_0,
                                    u8 function_selector, u8 *num_entries,
                                    u8 *descriptors, u16 *decimation)
{
  u16 __retres;
  u8 i;
  u8 *response_data;
  u8 local_num_entries;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[255];
  u16 *short_ptr;
  mip_field_header *field_header_ptr;
  u16 command_data_size = (u16)0;
  command_data[0] = function_selector;
  command_data_size = (u16)1;
  if ((int)function_selector == 0x01) {
    command_data[1] = *num_entries;
    command_data_size = (u16)2;
    i = (u8)0;
    while ((int)i < (int)*num_entries) {
      command_data[2 + (int)i * 3] = *(descriptors + i);
      short_ptr = (u16 *)(& command_data[3 + (int)i * 3]);
      *short_ptr = *(decimation + i);
      byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
      command_data_size = (u16)((int)command_data_size + 3);
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x08,
                                                         command_data,
                                                         command_data_size,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x80) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) {
          response_data += sizeof(mip_field_header);
          local_num_entries = *(response_data + 0);
          if ((int)local_num_entries > (int)*num_entries) {
            *num_entries = local_num_entries;
            __retres = (u16)1;
            goto return_label;
          }
          *num_entries = local_num_entries;
          i = (u8)0;
          while ((int)i < (int)*num_entries) {
            *(descriptors + i) = *(response_data + (1 + (int)i * 3));
            short_ptr = (u16 *)(response_data + (2 + (int)i * 3));
            *(decimation + i) = *short_ptr;
            byteswap_inplace((void *)(decimation + i),(u16)sizeof(u16));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  __retres = return_code;
  return_label: return __retres;
}

u16 mip_3dm_cmd_gps_message_format(mip_interface *device_interface_0,
                                   u8 function_selector, u8 *num_entries,
                                   u8 *descriptors, u16 *decimation)
{
  u16 __retres;
  u8 i;
  u8 *response_data;
  u8 local_num_entries;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[255];
  u16 *short_ptr;
  mip_field_header *field_header_ptr;
  u16 command_data_size = (u16)0;
  command_data[0] = function_selector;
  command_data_size = (u16)1;
  if ((int)function_selector == 0x01) {
    command_data[1] = *num_entries;
    command_data_size = (u16)2;
    i = (u8)0;
    while ((int)i < (int)*num_entries) {
      command_data[2 + (int)i * 3] = *(descriptors + i);
      short_ptr = (u16 *)(& command_data[3 + (int)i * 3]);
      *short_ptr = *(decimation + i);
      byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
      command_data_size = (u16)((int)command_data_size + 3);
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x09,
                                                         command_data,
                                                         command_data_size,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x81) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) {
          response_data += sizeof(mip_field_header);
          local_num_entries = *(response_data + 0);
          if ((int)local_num_entries > (int)*num_entries) {
            *num_entries = local_num_entries;
            __retres = (u16)1;
            goto return_label;
          }
          *num_entries = local_num_entries;
          i = (u8)0;
          while ((int)i < (int)*num_entries) {
            *(descriptors + i) = *(response_data + (1 + (int)i * 3));
            short_ptr = (u16 *)(response_data + (2 + (int)i * 3));
            *(decimation + i) = *short_ptr;
            byteswap_inplace((void *)(decimation + i),(u16)sizeof(u16));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  __retres = return_code;
  return_label: return __retres;
}

u16 mip_3dm_cmd_filter_message_format(mip_interface *device_interface_0,
                                      u8 function_selector, u8 *num_entries,
                                      u8 *descriptors, u16 *decimation)
{
  u16 __retres;
  u8 i;
  u8 *response_data;
  u8 local_num_entries;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[255];
  u16 *short_ptr;
  mip_field_header *field_header_ptr;
  u16 command_data_size = (u16)0;
  command_data[0] = function_selector;
  command_data_size = (u16)1;
  if ((int)function_selector == 0x01) {
    command_data[1] = *num_entries;
    command_data_size = (u16)2;
    i = (u8)0;
    while ((int)i < (int)*num_entries) {
      command_data[2 + (int)i * 3] = *(descriptors + i);
      short_ptr = (u16 *)(& command_data[3 + (int)i * 3]);
      *short_ptr = *(decimation + i);
      byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
      command_data_size = (u16)((int)command_data_size + 3);
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x0A,
                                                         command_data,
                                                         command_data_size,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x82) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) {
          response_data += sizeof(mip_field_header);
          local_num_entries = *(response_data + 0);
          if ((int)local_num_entries > (int)*num_entries) {
            *num_entries = local_num_entries;
            __retres = (u16)1;
            goto return_label;
          }
          *num_entries = local_num_entries;
          i = (u8)0;
          while ((int)i < (int)*num_entries) {
            *(descriptors + i) = *(response_data + (1 + (int)i * 3));
            short_ptr = (u16 *)(response_data + (2 + (int)i * 3));
            *(decimation + i) = *short_ptr;
            byteswap_inplace((void *)(decimation + i),(u16)sizeof(u16));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  __retres = return_code;
  return_label: return __retres;
}

u16 mip_3dm_cmd_continuous_data_stream(mip_interface *device_interface_0,
                                       u8 function_selector,
                                       u8 device_selector, u8 *enable)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[3] = {(u8)0};
  command_data[0] = function_selector;
  command_data[1] = device_selector;
  if ((int)function_selector == 0x01) command_data[2] = *enable;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x11,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x85) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(u8) * (unsigned int)2) 
          memcpy((void *)enable,
                 (void const *)((response_data + sizeof(mip_field_header)) + 1),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_gps_dynamics_mode(mip_interface *device_interface_0,
                                  u8 function_selector, u8 *dynamics_mode)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *dynamics_mode;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x34,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x92) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)dynamics_mode,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_gps_advanced_settings(mip_interface *device_interface_0,
                                      u8 function_selector)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x62,
                                   & function_selector,(u16)1,(u8)1,
                                   (u32)1000);
  return tmp;
}

u16 mip_3dm_cmd_ahrs_signal_conditioning(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         mip_ahrs_signal_settings *settings)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  mip_ahrs_signal_settings *settings_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_ahrs_signal_settings)] = {(u8)0};
  command_data[0] = function_selector;
  settings_ptr = (mip_ahrs_signal_settings *)(& command_data[1]);
  if ((int)function_selector == 0x01) {
    memcpy((void *)settings_ptr,(void const *)settings,
           sizeof(mip_ahrs_signal_settings));
    byteswap_inplace((void *)(& settings_ptr->orientation_decimation),
                     (u16)sizeof(u16));
    byteswap_inplace((void *)(& settings_ptr->data_conditioning_flags),
                     (u16)sizeof(u16));
    byteswap_inplace((void *)(& settings_ptr->up_compensation),
                     (u16)sizeof(u16));
    byteswap_inplace((void *)(& settings_ptr->north_compensation),
                     (u16)sizeof(u16));
    byteswap_inplace((void *)(& settings_ptr->reserved),(u16)sizeof(u16));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x35,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_ahrs_signal_settings)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x86) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_ahrs_signal_settings)) {
          memcpy((void *)settings,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(mip_ahrs_signal_settings));
          byteswap_inplace((void *)(& settings->orientation_decimation),
                           (u16)sizeof(u16));
          byteswap_inplace((void *)(& settings->data_conditioning_flags),
                           (u16)sizeof(u16));
          byteswap_inplace((void *)(& settings->up_compensation),
                           (u16)sizeof(u16));
          byteswap_inplace((void *)(& settings->north_compensation),
                           (u16)sizeof(u16));
          byteswap_inplace((void *)(& settings->reserved),(u16)sizeof(u16));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_ahrs_timestamp(mip_interface *device_interface_0,
                               u8 function_selector, u8 *time_selector,
                               u32 *time_0)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  u32 *word_ptr;
  mip_field_header *field_header_ptr;
  u8 command_data[6] = {(u8)0};
  command_data[0] = function_selector;
  command_data[1] = *time_selector;
  word_ptr = (u32 *)(& command_data[2]);
  if ((int)function_selector == 0x01) {
    *word_ptr = *time_0;
    byteswap_inplace((void *)word_ptr,(u16)sizeof(u32));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x36,
                                                         command_data,(u16)6,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x93) 
        if ((unsigned int)field_header_ptr->size >= (sizeof(mip_field_header) + sizeof(u8)) + sizeof(u32)) {
          memcpy((void *)time_selector,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
          memcpy((void *)time_0,
                 (void const *)((response_data + sizeof(mip_field_header)) + 1),
                 sizeof(u32));
          byteswap_inplace((void *)time_0,(u16)sizeof(u32));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_startup_settings(mip_interface *device_interface_0,
                                 u8 function_selector)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x30,
                                   & function_selector,(u16)1,(u8)1,
                                   (u32)1000);
  return tmp;
}

u16 mip_3dm_cmd_uart_baudrate(mip_interface *device_interface_0,
                              u8 function_selector, u32 *baudrate)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  u32 *word_ptr;
  mip_field_header *field_header_ptr;
  u8 command_data[5] = {(u8)0};
  command_data[0] = function_selector;
  word_ptr = (u32 *)(& command_data[1]);
  if ((int)function_selector == 0x01) {
    *word_ptr = *baudrate;
    byteswap_inplace((void *)word_ptr,(u16)sizeof(u32));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x40,
                                                         command_data,(u16)5,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x87) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u32)) {
          memcpy((void *)baudrate,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u32));
          byteswap_inplace((void *)baudrate,(u16)sizeof(u32));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_datastream_format(mip_interface *device_interface_0,
                                  u8 function_selector, u8 device_selector,
                                  u8 *format)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[3] = {(u8)0};
  command_data[0] = function_selector;
  command_data[1] = device_selector;
  if ((int)function_selector == 0x01) command_data[2] = *format;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x60,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x88) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(u8) * (unsigned int)2) 
          memcpy((void *)format,
                 (void const *)((response_data + sizeof(mip_field_header)) + 1),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_power_state(mip_interface *device_interface_0,
                            u8 function_selector, u8 device_selector,
                            u8 *power_state)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[3] = {(u8)0};
  command_data[0] = function_selector;
  command_data[1] = device_selector;
  if ((int)function_selector == 0x01) command_data[2] = *power_state;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x61,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)10000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x89) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(u8) * (unsigned int)2) 
          memcpy((void *)power_state,
                 (void const *)((response_data + sizeof(mip_field_header)) + 1),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_device_status(mip_interface *device_interface_0,
                              u16 model_number, u8 status_selector,
                              u8 *response_buffer, u16 *response_size)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[3];
  mip_field_header *field_header_ptr;
  u16 *short_ptr;
  u16 user_buffer_size = *response_size;
  short_ptr = (u16 *)(command_data);
  *short_ptr = model_number;
  command_data[2] = status_selector;
  byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x64,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((unsigned int)field_header_ptr->size - sizeof(mip_field_header) <= (unsigned int)user_buffer_size) {
        memcpy((void *)response_buffer,
               (void const *)(response_data + sizeof(mip_field_header)),
               (unsigned int)field_header_ptr->size - sizeof(mip_field_header));
        *response_size = (u16)((unsigned int)field_header_ptr->size - sizeof(mip_field_header));
      }
      else {
        *response_size = (u16)0;
        return_code = (u16)1;
      }
    }
  return return_code;
}

u16 mip_3dm_cmd_low_pass_filter_settings(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         mip_low_pass_filter_settings *filter_settings)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  mip_low_pass_filter_settings *settings_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_low_pass_filter_settings)] =
    {(u8)0};
  command_data[0] = function_selector;
  settings_ptr = (mip_low_pass_filter_settings *)(& command_data[1]);
  memcpy((void *)settings_ptr,(void const *)filter_settings,
         sizeof(mip_low_pass_filter_settings));
  byteswap_inplace((void *)(& settings_ptr->cutoff_frequency),
                   (u16)sizeof(u16));
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x50,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_low_pass_filter_settings)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8B) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_low_pass_filter_settings)) {
          memcpy((void *)filter_settings,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(mip_low_pass_filter_settings));
          byteswap_inplace((void *)(& filter_settings->cutoff_frequency),
                           (u16)sizeof(u16));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_accel_bias(mip_interface *device_interface_0,
                           u8 function_selector, float *bias_vector)
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *bias_element_pointer;
  u8 command_data[sizeof(u8) + (unsigned int)3 * sizeof(float)] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)(bias_vector + 0),
           (unsigned int)3 * sizeof(float));
    bias_element_pointer = (float *)(& command_data[1]);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(bias_element_pointer + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x37,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               (unsigned int)3 * sizeof(float)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9A) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)3 * sizeof(float)) {
          memcpy((void *)bias_vector,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)3 * sizeof(float));
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(bias_vector + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_gyro_bias(mip_interface *device_interface_0,
                          u8 function_selector, float *bias_vector)
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *bias_element_pointer;
  u8 command_data[sizeof(u8) + (unsigned int)3 * sizeof(float)] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)(bias_vector + 0),
           (unsigned int)3 * sizeof(float));
    bias_element_pointer = (float *)(& command_data[1]);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(bias_element_pointer + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x38,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               (unsigned int)3 * sizeof(float)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9B) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)3 * sizeof(float)) {
          memcpy((void *)bias_vector,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)3 * sizeof(float));
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(bias_vector + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_coning_sculling_compensation(mip_interface *device_interface_0,
                                             u8 function_selector, u8 *enable)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *enable;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x3E,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9E) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)enable,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_capture_gyro_bias(mip_interface *device_interface_0,
                                  u16 duration_ms, float *bias_vector)
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u16 command_data = duration_ms;
  byteswap_inplace((void *)(& command_data),(u16)sizeof(u16));
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x39,
                                                         (u8 *)(& command_data),
                                                         (u16)sizeof(u16),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)45000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9B) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)3 * sizeof(float)) {
          memcpy((void *)bias_vector,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)3 * sizeof(float));
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(bias_vector + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_hard_iron(mip_interface *device_interface_0,
                          u8 function_selector, float *vector)
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *vector_pointer;
  u8 command_data[sizeof(u8) + (unsigned int)3 * sizeof(float)] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)(vector + 0),
           (unsigned int)3 * sizeof(float));
    vector_pointer = (float *)(& command_data[1]);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(vector_pointer + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x3A,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               (unsigned int)3 * sizeof(float)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9C) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)3 * sizeof(float)) {
          memcpy((void *)vector,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)3 * sizeof(float));
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(vector + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_soft_iron(mip_interface *device_interface_0,
                          u8 function_selector, float *matrix)
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *matrix_pointer;
  u8 command_data[sizeof(u8) + (unsigned int)9 * sizeof(float)] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)(matrix + 0),
           (unsigned int)9 * sizeof(float));
    matrix_pointer = (float *)(& command_data[1]);
    i = (u8)0;
    while ((int)i < 9) {
      byteswap_inplace((void *)(matrix_pointer + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x3B,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               (unsigned int)9 * sizeof(float)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9D) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)9 * sizeof(float)) {
          memcpy((void *)matrix,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)9 * sizeof(float));
          i = (u8)0;
          while ((int)i < 9) {
            byteswap_inplace((void *)(matrix + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_sensor2vehicle_tranformation(mip_interface *device_interface_0,
                                         u8 function_selector,
                                         float euler_angles[3])
{
  u8 *response_data;
  u8 i;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *angle_pointer;
  u8 command_data[sizeof(u8) + (unsigned int)3 * sizeof(float)] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)(euler_angles + 0),
           (unsigned int)3 * sizeof(float));
    angle_pointer = (float *)(& command_data[1]);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(angle_pointer + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x3F,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               (unsigned int)3 * sizeof(float)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x9F) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    (unsigned int)3 * sizeof(float)) {
          memcpy((void *)euler_angles,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 (unsigned int)3 * sizeof(float));
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(euler_angles + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_complementary_filter_settings(mip_interface *device_interface_0,
                                              u8 function_selector,
                                              mip_complementary_filter_settings *settings)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  mip_complementary_filter_settings *settings_pointer;
  u8 command_data[sizeof(u8) + sizeof(mip_complementary_filter_settings)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    memcpy((void *)(& command_data[1]),(void const *)settings,
           sizeof(mip_complementary_filter_settings));
    settings_pointer = (mip_complementary_filter_settings *)(& command_data[1]);
    byteswap_inplace((void *)(& settings_pointer->north_compensation_time_constant),
                     (u16)sizeof(float));
    byteswap_inplace((void *)(& settings_pointer->up_compensation_time_constant),
                     (u16)sizeof(float));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0C,(u8)0x51,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_complementary_filter_settings)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x97) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_complementary_filter_settings)) {
          memcpy((void *)settings,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(mip_complementary_filter_settings));
          byteswap_inplace((void *)(& settings->north_compensation_time_constant),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& settings->up_compensation_time_constant),
                           (u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_3dm_cmd_rtcm_23_message(mip_interface *device_interface_0,
                                u8 *raw_data, u16 num_bytes)
{
  u16 __retres;
  u16 bytes_to_send;
  u16 curr_byte = (u16)0;
  while ((int)curr_byte < (int)num_bytes) {
    u16 tmp;
    bytes_to_send = (u16)((int)num_bytes - (int)curr_byte);
    if ((int)bytes_to_send > 253) bytes_to_send = (u16)253;
    tmp = mip_interface_send_command(device_interface_0,(u8)0x0C,(u8)0x20,
                                     raw_data + curr_byte,bytes_to_send,
                                     (u8)1,(u32)1000);
    if ((int)tmp != 0) {
      __retres = (u16)1;
      goto return_label;
    }
    else curr_byte = (u16)((int)curr_byte + (int)bytes_to_send);
  }
  __retres = (u16)0;
  return_label: return __retres;
}

void mip_ahrs_raw_accel_byteswap(mip_ahrs_raw_accel *raw_accel)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& raw_accel->raw_accel[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_raw_gyro_byteswap(mip_ahrs_raw_gyro *raw_gyro)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& raw_gyro->raw_gyro[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_raw_mag_byteswap(mip_ahrs_raw_mag *raw_mag)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& raw_mag->raw_mag[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_scaled_accel_byteswap(mip_ahrs_scaled_accel *scaled_accel)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& scaled_accel->scaled_accel[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_scaled_gyro_byteswap(mip_ahrs_scaled_gyro *scaled_gyro)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& scaled_gyro->scaled_gyro[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_scaled_mag_byteswap(mip_ahrs_scaled_mag *scaled_mag)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& scaled_mag->scaled_mag[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_delta_theta_byteswap(mip_ahrs_delta_theta *delta_theta)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& delta_theta->delta_theta[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_delta_velocity_byteswap(mip_ahrs_delta_velocity *delta_velocity)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& delta_velocity->delta_velocity[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_orientation_matrix_byteswap(mip_ahrs_orientation_matrix *orientation_matrix)
{
  u8 i;
  u8 j;
  i = (u8)0;
  while ((int)i < 3) {
    j = (u8)0;
    while ((int)j < 3) {
      byteswap_inplace((void *)(& orientation_matrix->m[i][j]),
                       (u16)sizeof(float));
      j = (u8)((int)j + 1);
    }
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_quaternion_byteswap(mip_ahrs_quaternion *quaternion)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 4) {
    byteswap_inplace((void *)(& quaternion->q[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_euler_angles_byteswap(mip_ahrs_euler_angles *euler_angles)
{
  byteswap_inplace((void *)(& euler_angles->roll),(u16)sizeof(float));
  byteswap_inplace((void *)(& euler_angles->pitch),(u16)sizeof(float));
  byteswap_inplace((void *)(& euler_angles->yaw),(u16)sizeof(float));
  return;
}

void mip_ahrs_orientation_update_matrix_byteswap(mip_ahrs_orientation_update_matrix *orientation_update_matrix)
{
  u8 i;
  u8 j;
  i = (u8)0;
  while ((int)i < 3) {
    j = (u8)0;
    while ((int)j < 3) {
      byteswap_inplace((void *)(& orientation_update_matrix->m[i][j]),
                       (u16)sizeof(float));
      j = (u8)((int)j + 1);
    }
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_raw_temp_byteswap(mip_ahrs_raw_temp *raw_temp)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 4) {
    byteswap_inplace((void *)(& raw_temp->raw_temp),(u16)sizeof(u16));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_internal_timestamp_byteswap(mip_ahrs_internal_timestamp *internal_timestamp)
{
  byteswap_inplace((void *)(& internal_timestamp->counts),(u16)sizeof(u32));
  return;
}

void mip_ahrs_1pps_timestamp_byteswap(mip_ahrs_1pps_timestamp *pps_timestamp)
{
  byteswap_inplace((void *)(& pps_timestamp->seconds),(u16)sizeof(u32));
  byteswap_inplace((void *)(& pps_timestamp->nanoseconds),(u16)sizeof(u32));
  return;
}

void mip_ahrs_gps_timestamp_byteswap(mip_ahrs_gps_timestamp *gps_timestamp)
{
  byteswap_inplace((void *)(& gps_timestamp->tow),(u16)sizeof(double));
  byteswap_inplace((void *)(& gps_timestamp->week_number),(u16)sizeof(u16));
  byteswap_inplace((void *)(& gps_timestamp->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_ahrs_up_vector_byteswap(mip_ahrs_up_vector *up_vector)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& up_vector->up),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_north_vector_byteswap(mip_ahrs_north_vector *north_vector)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& north_vector->north),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  return;
}

void mip_ahrs_signal_settings_byteswap(mip_ahrs_signal_settings *signal_settings)
{
  byteswap_inplace((void *)(& signal_settings->orientation_decimation),
                   (u16)sizeof(u16));
  byteswap_inplace((void *)(& signal_settings->data_conditioning_flags),
                   (u16)sizeof(u16));
  byteswap_inplace((void *)(& signal_settings->up_compensation),
                   (u16)sizeof(u16));
  byteswap_inplace((void *)(& signal_settings->north_compensation),
                   (u16)sizeof(u16));
  byteswap_inplace((void *)(& signal_settings->reserved),(u16)sizeof(u16));
  return;
}

u16 mip_base_cmd_ping(mip_interface *device_interface_0);

u16 mip_base_cmd_idle(mip_interface *device_interface_0);

u16 mip_base_cmd_get_device_info(mip_interface *device_interface_0,
                                 base_device_info_field *device_info);

u16 mip_base_cmd_get_device_supported_descriptors(mip_interface *device_interface_0,
                                                  u8 *response_buffer,
                                                  u16 *response_size);

u16 mip_base_cmd_built_in_test(mip_interface *device_interface_0,
                               u32 *bit_result);

u16 mip_base_cmd_resume(mip_interface *device_interface_0);

u16 mip_base_cmd_reset_device(mip_interface *device_interface_0);

u16 mip_base_cmd_ping(mip_interface *device_interface_0)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x01,(u8)0x01,
                                   (u8 *)0,(u16)0,(u8)1,(u32)1000);
  return tmp;
}

u16 mip_base_cmd_idle(mip_interface *device_interface_0)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x01,(u8)0x02,
                                   (u8 *)0,(u16)0,(u8)1,(u32)1000);
  return tmp;
}

u16 mip_base_cmd_get_device_info(mip_interface *device_interface_0,
                                 base_device_info_field *device_info)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  memset((void *)device_info,0,sizeof(base_device_info_field));
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x01,(u8)0x03,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) {
    field_header_ptr = (mip_field_header *)response_data;
    if ((int)field_header_ptr->descriptor == 0x81) 
      if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(base_device_info_field)) {
        memcpy((void *)device_info,
               (void const *)(response_data + sizeof(mip_field_header)),
               (unsigned int)response_data_size - sizeof(mip_field_header));
        byteswap_inplace((void *)(& device_info->firmware_version),(u16)2);
      }
      else return_code = (u16)1;
    else return_code = (u16)1;
  }
  return return_code;
}

u16 mip_base_cmd_get_device_supported_descriptors(mip_interface *device_interface_0,
                                                  u8 *response_buffer,
                                                  u16 *response_size)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u16 *short_ptr;
  u16 i;
  u16 user_buffer_size = *response_size;
  *response_size = (u16)0;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x01,(u8)0x04,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((unsigned int)field_header_ptr->size - sizeof(mip_field_header) <= (unsigned int)user_buffer_size) {
        memcpy((void *)response_buffer,
               (void const *)(response_data + sizeof(mip_field_header)),
               (unsigned int)field_header_ptr->size - sizeof(mip_field_header));
        *response_size = (u16)((unsigned int)field_header_ptr->size - sizeof(mip_field_header));
        short_ptr = (u16 *)response_buffer;
        i = (u16)0;
        while ((int)i < (int)*response_size / 2) {
          byteswap_inplace((void *)(short_ptr + i),(u16)sizeof(u16));
          i = (u16)((int)i + 1);
        }
      }
      else {
        *response_size = (u16)0;
        return_code = (u16)1;
      }
    }
  return return_code;
}

u16 mip_base_cmd_built_in_test(mip_interface *device_interface_0,
                               u32 *bit_result)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x01,(u8)0x05,
                                                         (u8 *)0,(u16)0,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)10000);
  if ((int)return_code == 0) {
    field_header_ptr = (mip_field_header *)response_data;
    if ((int)field_header_ptr->descriptor == 0x83) 
      if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u32)) {
        memcpy((void *)bit_result,
               (void const *)(response_data + sizeof(mip_field_header)),
               (unsigned int)response_data_size - sizeof(mip_field_header));
        byteswap_inplace((void *)bit_result,(u16)sizeof(u32));
      }
      else return_code = (u16)1;
    else return_code = (u16)1;
  }
  return return_code;
}

u16 mip_base_cmd_resume(mip_interface *device_interface_0)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x01,(u8)0x06,
                                   (u8 *)0,(u16)0,(u8)1,(u32)1000);
  return tmp;
}

u16 mip_base_cmd_reset_device(mip_interface *device_interface_0)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x01,(u8)0x7E,
                                   (u8 *)0,(u16)0,(u8)1,(u32)1000);
  return tmp;
}

void mip_filter_llh_pos_byteswap(mip_filter_llh_pos *llh_pos);

void mip_filter_ned_velocity_byteswap(mip_filter_ned_velocity *ned_velocity);

void mip_filter_attitude_quaternion_byteswap(mip_filter_attitude_quaternion *attitude_quaternion);

void mip_filter_attitude_dcm_byteswap(mip_filter_attitude_dcm *attitude_dcm);

void mip_filter_attitude_euler_angles_byteswap(mip_filter_attitude_euler_angles *attitude_euler_angles);

void mip_filter_gyro_bias_byteswap(mip_filter_gyro_bias *gyro_bias);

void mip_filter_accel_bias_byteswap(mip_filter_accel_bias *accel_bias);

void mip_filter_llh_pos_uncertainty_byteswap(mip_filter_llh_pos_uncertainty *llh_pos_uncertainty);

void mip_filter_ned_vel_uncertainty_byteswap(mip_filter_ned_vel_uncertainty *ned_vel_uncertainty);

void mip_filter_euler_attitude_uncertainty_byteswap(mip_filter_euler_attitude_uncertainty *euler_attitude_uncertainty);

void mip_filter_gyro_bias_uncertainty_byteswap(mip_filter_gyro_bias_uncertainty *gyro_bias_uncertainty);

void mip_filter_accel_bias_uncertainty_byteswap(mip_filter_accel_bias_uncertainty *accel_bias_uncertainty);

void mip_filter_timestamp_byteswap(mip_filter_timestamp *timestamp);

void mip_filter_status_byteswap(mip_filter_status *status);

void mip_filter_linear_acceleration_byteswap(mip_filter_linear_acceleration *acceleration);

void mip_filter_compensated_acceleration_byteswap(mip_filter_compensated_acceleration *acceleration);

void mip_filter_gravity_vector_byteswap(mip_filter_gravity_vector *gravity_vector);

void mip_filter_compensated_angular_rate_byteswap(mip_filter_compensated_angular_rate *angular_rate);

void mip_filter_quaternion_attitude_uncertainty_byteswap(mip_filter_quaternion_attitude_uncertainty *quaternion_attitude_uncertainty);

void mip_filter_wgs84_gravity_mag_byteswap(mip_filter_wgs84_gravity_mag *wgs84_gravity_mag);

void mip_filter_heading_update_state_byteswap(mip_filter_heading_update_state *heading_update_state);

void mip_filter_magnetic_model_byteswap(mip_filter_magnetic_model *magnetic_model);

void mip_filter_external_heading_update_with_time_byteswap(mip_filter_external_heading_with_time_command *external_heading_command);

void mip_filter_accel_scale_factor_byteswap(mip_filter_accel_scale_factor_mip_field *accel_scale_factor);

void mip_filter_accel_scale_factor_uncertainty_byteswap(mip_filter_accel_scale_factor_uncertainty_mip_field *accel_scale_factor_uncertainty);

void mip_filter_gyro_scale_factor_byteswap(mip_filter_gyro_scale_factor_mip_field *gyro_scale_factor);

void mip_filter_gyro_scale_factor_uncertainty_byteswap(mip_filter_gyro_scale_factor_uncertainty_mip_field *gyro_scale_factor_uncertainty);

void mip_filter_mag_bias_byteswap(mip_filter_mag_bias_mip_field *mag_bias);

void mip_filter_mag_bias_uncertainty_byteswap(mip_filter_mag_bias_uncertainty_mip_field *mag_bias_uncertainty);

void mip_filter_compensated_mag_vector_byteswap(mip_filter_compensated_mag_vector_mip_field *compensated_mag_vector);

void mip_filter_standard_atmosphere_byteswap(mip_filter_standard_atmosphere_mip_field *standard_atmosphere);

void mip_filter_pressure_altitude_byteswap(mip_filter_pressure_altitude_mip_field *pressure_altitude);

void mip_filter_density_altitude_byteswap(mip_filter_density_altitude_mip_field *density_altitude);

void mip_filter_antenna_offset_correction_byteswap(mip_filter_antenna_offset_correction_mip_field *antenna_offset_correction);

void mip_filter_antenna_offset_correction_uncertainty_byteswap(mip_filter_antenna_offset_correction_uncertainty_mip_field *antenna_offset_correction_uncertainty);

u16 mip_filter_reset_filter(mip_interface *device_interface_0);

u16 mip_filter_set_init_attitude(mip_interface *device_interface_0,
                                 float euler_angles[3]);

u16 mip_filter_set_init_heading(mip_interface *device_interface_0,
                                float heading);

u16 mip_filter_set_init_attitude_from_ahrs(mip_interface *device_interface_0,
                                           float declination);

u16 mip_filter_vehicle_dynamics_mode(mip_interface *device_interface_0,
                                     u8 function_selector, u8 *dynamics_mode);

u16 mip_filter_sensor2vehicle_tranformation(mip_interface *device_interface_0,
                                            u8 function_selector,
                                            float euler_angles[3]);

u16 mip_filter_sensor2vehicle_offset(mip_interface *device_interface_0,
                                     u8 function_selector, float offset[3]);

u16 mip_filter_antenna_offset(mip_interface *device_interface_0,
                              u8 function_selector, float offset[3]);

u16 mip_filter_gps_source(mip_interface *device_interface_0,
                          u8 function_selector, u8 *gps_source);

u16 mip_filter_external_gps_update(mip_interface *device_interface_0,
                                   mip_filter_external_gps_update_command *command);

u16 mip_filter_external_heading_update(mip_interface *device_interface_0,
                                       mip_filter_external_heading_update_command *command);

u16 mip_filter_heading_source(mip_interface *device_interface_0,
                              u8 function_selector, u8 *heading_source);

u16 mip_filter_auto_initialization(mip_interface *device_interface_0,
                                   u8 function_selector, u8 *enable);

u16 mip_filter_accel_noise(mip_interface *device_interface_0,
                           u8 function_selector, float noise_1sigma[3]);

u16 mip_filter_accel_bias_model(mip_interface *device_interface_0,
                                u8 function_selector, float bias_beta[3],
                                float bias_noise_1sigma[3]);

u16 mip_filter_gyro_noise(mip_interface *device_interface_0,
                          u8 function_selector, float noise_1sigma[3]);

u16 mip_filter_gyro_bias_model(mip_interface *device_interface_0,
                               u8 function_selector, float bias_beta[3],
                               float bias_noise_1sigma[3]);

u16 mip_filter_zero_velocity_update_control(mip_interface *device_interface_0,
                                            u8 function_selector,
                                            mip_filter_zero_update_command *zero_velocity_control);

u16 mip_filter_zero_angular_rate_update_control(mip_interface *device_interface_0,
                                                u8 function_selector,
                                                mip_filter_zero_update_command *zero_angular_rate_control);

u16 mip_filter_tare_orientation(mip_interface *device_interface_0,
                                u8 function_selector, u8 tare_bitfield);

u16 mip_filter_commanded_zero_velocity_update(mip_interface *device_interface_0);

u16 mip_filter_commanded_zero_angular_rate_update(mip_interface *device_interface_0);

u16 mip_filter_external_heading_update_with_time(mip_interface *device_interface_0,
                                                 mip_filter_external_heading_with_time_command *heading_with_time_command);

u16 mip_filter_mag_noise(mip_interface *device_interface_0,
                         u8 function_selector, float noise_1sigma[3]);

u16 mip_filter_reference_position(mip_interface *device_interface_0,
                                  u8 function_selector, u8 *reference_enable,
                                  double reference_position[3]);

u16 mip_filter_estimation_control(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u16 *estimation_control);

u16 mip_filter_enable_measurement(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u16 *measurement_enable);

u16 mip_filter_declination_source(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u8 *declination_source);

u16 mip_filter_accel_magnitude_error_adaptive_measurement(mip_interface *device_interface_0,
                                                          u8 function_selector,
                                                          mip_filter_accel_magnitude_error_adaptive_measurement_command *params);

u16 mip_filter_mag_magnitude_error_adaptive_measurement(mip_interface *device_interface_0,
                                                        u8 function_selector,
                                                        mip_filter_magnetometer_magnitude_error_adaptive_measurement_command *params);

u16 mip_filter_mag_dip_angle_error_adaptive_measurement(mip_interface *device_interface_0,
                                                        u8 function_selector,
                                                        mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command *params);

u16 mip_system_com_mode(mip_interface *device_interface_0,
                        u8 function_selector, u8 *com_mode);

void mip_filter_llh_pos_byteswap(mip_filter_llh_pos *llh_pos)
{
  byteswap_inplace((void *)(& llh_pos->latitude),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->longitude),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->ellipsoid_height),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_ned_velocity_byteswap(mip_filter_ned_velocity *ned_velocity)
{
  byteswap_inplace((void *)(& ned_velocity->north),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_velocity->east),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_velocity->down),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_velocity->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_attitude_quaternion_byteswap(mip_filter_attitude_quaternion *attitude_quaternion)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 4) {
    byteswap_inplace((void *)(& attitude_quaternion->q[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  byteswap_inplace((void *)(& attitude_quaternion->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_attitude_dcm_byteswap(mip_filter_attitude_dcm *attitude_dcm)
{
  u8 i;
  u8 j;
  i = (u8)0;
  while ((int)i < 3) {
    j = (u8)0;
    while ((int)j < 3) {
      byteswap_inplace((void *)(& attitude_dcm->dcm[i][j]),
                       (u16)sizeof(float));
      j = (u8)((int)j + 1);
    }
    i = (u8)((int)i + 1);
  }
  byteswap_inplace((void *)(& attitude_dcm->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_attitude_euler_angles_byteswap(mip_filter_attitude_euler_angles *attitude_euler_angles)
{
  byteswap_inplace((void *)(& attitude_euler_angles->roll),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& attitude_euler_angles->pitch),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& attitude_euler_angles->yaw),(u16)sizeof(float));
  byteswap_inplace((void *)(& attitude_euler_angles->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_gyro_bias_byteswap(mip_filter_gyro_bias *gyro_bias)
{
  byteswap_inplace((void *)(& gyro_bias->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_accel_bias_byteswap(mip_filter_accel_bias *accel_bias)
{
  byteswap_inplace((void *)(& accel_bias->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_llh_pos_uncertainty_byteswap(mip_filter_llh_pos_uncertainty *llh_pos_uncertainty)
{
  byteswap_inplace((void *)(& llh_pos_uncertainty->north),(u16)sizeof(float));
  byteswap_inplace((void *)(& llh_pos_uncertainty->east),(u16)sizeof(float));
  byteswap_inplace((void *)(& llh_pos_uncertainty->down),(u16)sizeof(float));
  byteswap_inplace((void *)(& llh_pos_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_ned_vel_uncertainty_byteswap(mip_filter_ned_vel_uncertainty *ned_vel_uncertainty)
{
  byteswap_inplace((void *)(& ned_vel_uncertainty->north),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel_uncertainty->east),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel_uncertainty->down),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_euler_attitude_uncertainty_byteswap(mip_filter_euler_attitude_uncertainty *euler_attitude_uncertainty)
{
  byteswap_inplace((void *)(& euler_attitude_uncertainty->roll),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& euler_attitude_uncertainty->pitch),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& euler_attitude_uncertainty->yaw),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& euler_attitude_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_gyro_bias_uncertainty_byteswap(mip_filter_gyro_bias_uncertainty *gyro_bias_uncertainty)
{
  byteswap_inplace((void *)(& gyro_bias_uncertainty->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias_uncertainty->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias_uncertainty->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_bias_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_accel_bias_uncertainty_byteswap(mip_filter_accel_bias_uncertainty *accel_bias_uncertainty)
{
  byteswap_inplace((void *)(& accel_bias_uncertainty->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias_uncertainty->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias_uncertainty->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_bias_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_timestamp_byteswap(mip_filter_timestamp *timestamp)
{
  byteswap_inplace((void *)(& timestamp->tow),(u16)sizeof(double));
  byteswap_inplace((void *)(& timestamp->week_number),(u16)sizeof(u16));
  byteswap_inplace((void *)(& timestamp->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_status_byteswap(mip_filter_status *status)
{
  byteswap_inplace((void *)(& status->filter_state),(u16)sizeof(u16));
  byteswap_inplace((void *)(& status->dynamics_mode),(u16)sizeof(u16));
  byteswap_inplace((void *)(& status->status_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_linear_acceleration_byteswap(mip_filter_linear_acceleration *acceleration)
{
  byteswap_inplace((void *)(& acceleration->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_compensated_acceleration_byteswap(mip_filter_compensated_acceleration *acceleration)
{
  byteswap_inplace((void *)(& acceleration->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& acceleration->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_gravity_vector_byteswap(mip_filter_gravity_vector *gravity_vector)
{
  byteswap_inplace((void *)(& gravity_vector->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& gravity_vector->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& gravity_vector->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& gravity_vector->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_compensated_angular_rate_byteswap(mip_filter_compensated_angular_rate *angular_rate)
{
  byteswap_inplace((void *)(& angular_rate->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& angular_rate->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& angular_rate->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& angular_rate->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_quaternion_attitude_uncertainty_byteswap(mip_filter_quaternion_attitude_uncertainty *quaternion_attitude_uncertainty)
{
  byteswap_inplace((void *)(& quaternion_attitude_uncertainty->q0),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& quaternion_attitude_uncertainty->q1),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& quaternion_attitude_uncertainty->q2),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& quaternion_attitude_uncertainty->q3),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& quaternion_attitude_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_wgs84_gravity_mag_byteswap(mip_filter_wgs84_gravity_mag *wgs84_gravity_mag)
{
  byteswap_inplace((void *)(& wgs84_gravity_mag->magnitude),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& wgs84_gravity_mag->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_heading_update_state_byteswap(mip_filter_heading_update_state *heading_update_state)
{
  byteswap_inplace((void *)(& heading_update_state->heading),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& heading_update_state->heading_1sigma),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& heading_update_state->source),(u16)sizeof(u16));
  byteswap_inplace((void *)(& heading_update_state->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_magnetic_model_byteswap(mip_filter_magnetic_model *magnetic_model)
{
  byteswap_inplace((void *)(& magnetic_model->intensity_north),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& magnetic_model->intensity_east),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& magnetic_model->intensity_down),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& magnetic_model->inclination),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& magnetic_model->declination),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& magnetic_model->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_external_heading_update_with_time_byteswap(mip_filter_external_heading_with_time_command *external_heading_command)
{
  byteswap_inplace((void *)(& external_heading_command->gps_tow),
                   (u16)sizeof(double));
  byteswap_inplace((void *)(& external_heading_command->gps_week_number),
                   (u16)sizeof(u16));
  byteswap_inplace((void *)(& external_heading_command->heading_angle_rads),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& external_heading_command->heading_angle_sigma_rads),
                   (u16)sizeof(float));
  return;
}

void mip_filter_accel_scale_factor_byteswap(mip_filter_accel_scale_factor_mip_field *accel_scale_factor)
{
  byteswap_inplace((void *)(& accel_scale_factor->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_accel_scale_factor_uncertainty_byteswap(mip_filter_accel_scale_factor_uncertainty_mip_field *accel_scale_factor_uncertainty)
{
  byteswap_inplace((void *)(& accel_scale_factor_uncertainty->x),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor_uncertainty->y),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor_uncertainty->z),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& accel_scale_factor_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_gyro_scale_factor_byteswap(mip_filter_gyro_scale_factor_mip_field *gyro_scale_factor)
{
  byteswap_inplace((void *)(& gyro_scale_factor->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_gyro_scale_factor_uncertainty_byteswap(mip_filter_gyro_scale_factor_uncertainty_mip_field *gyro_scale_factor_uncertainty)
{
  byteswap_inplace((void *)(& gyro_scale_factor_uncertainty->x),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor_uncertainty->y),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor_uncertainty->z),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& gyro_scale_factor_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_mag_bias_byteswap(mip_filter_mag_bias_mip_field *mag_bias)
{
  byteswap_inplace((void *)(& mag_bias->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_filter_mag_bias_uncertainty_byteswap(mip_filter_mag_bias_uncertainty_mip_field *mag_bias_uncertainty)
{
  byteswap_inplace((void *)(& mag_bias_uncertainty->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias_uncertainty->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias_uncertainty->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& mag_bias_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_compensated_mag_vector_byteswap(mip_filter_compensated_mag_vector_mip_field *compensated_mag_vector)
{
  byteswap_inplace((void *)(& compensated_mag_vector->x),(u16)sizeof(float));
  byteswap_inplace((void *)(& compensated_mag_vector->y),(u16)sizeof(float));
  byteswap_inplace((void *)(& compensated_mag_vector->z),(u16)sizeof(float));
  byteswap_inplace((void *)(& compensated_mag_vector->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_standard_atmosphere_byteswap(mip_filter_standard_atmosphere_mip_field *standard_atmosphere)
{
  byteswap_inplace((void *)(& standard_atmosphere->geometric_altitude),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& standard_atmosphere->geopotential_altitude),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& standard_atmosphere->standard_temperature),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& standard_atmosphere->standard_pressure),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& standard_atmosphere->standard_density),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& standard_atmosphere->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_pressure_altitude_byteswap(mip_filter_pressure_altitude_mip_field *pressure_altitude)
{
  byteswap_inplace((void *)(& pressure_altitude->pressure_altitude),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& pressure_altitude->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_density_altitude_byteswap(mip_filter_density_altitude_mip_field *density_altitude)
{
  byteswap_inplace((void *)(& density_altitude->density_altitude),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& density_altitude->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_antenna_offset_correction_byteswap(mip_filter_antenna_offset_correction_mip_field *antenna_offset_correction)
{
  byteswap_inplace((void *)(& antenna_offset_correction->x),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction->y),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction->z),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction->valid_flags),
                   (u16)sizeof(u16));
  return;
}

void mip_filter_antenna_offset_correction_uncertainty_byteswap(mip_filter_antenna_offset_correction_uncertainty_mip_field *antenna_offset_correction_uncertainty)
{
  byteswap_inplace((void *)(& antenna_offset_correction_uncertainty->x),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction_uncertainty->y),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction_uncertainty->z),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& antenna_offset_correction_uncertainty->valid_flags),
                   (u16)sizeof(u16));
  return;
}

u16 mip_filter_reset_filter(mip_interface *device_interface_0)
{
  u16 tmp;
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x01,
                                   (u8 *)0,(u16)0,(u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_set_init_attitude(mip_interface *device_interface_0,
                                 float euler_angles[3])
{
  u8 i;
  float local_angles[3];
  u16 tmp;
  memcpy((void *)(local_angles),(void const *)euler_angles,
         sizeof(float) * (unsigned int)3);
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& local_angles[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x02,
                                   (u8 *)(local_angles),
                                   (u16)(sizeof(float) * (unsigned int)3),
                                   (u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_set_init_heading(mip_interface *device_interface_0,
                                float heading)
{
  float local_heading;
  u16 tmp;
  memcpy((void *)(& local_heading),(void const *)(& heading),sizeof(float));
  byteswap_inplace((void *)(& local_heading),(u16)sizeof(float));
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x03,
                                   (u8 *)(& local_heading),
                                   (u16)sizeof(float),(u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_set_init_attitude_from_ahrs(mip_interface *device_interface_0,
                                           float declination)
{
  float local_declination;
  u16 tmp;
  memcpy((void *)(& local_declination),(void const *)(& declination),
         sizeof(float));
  byteswap_inplace((void *)(& local_declination),(u16)sizeof(float));
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x04,
                                   (u8 *)(& local_declination),
                                   (u16)sizeof(float),(u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_vehicle_dynamics_mode(mip_interface *device_interface_0,
                                     u8 function_selector, u8 *dynamics_mode)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *dynamics_mode;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x10,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x80) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)dynamics_mode,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_sensor2vehicle_tranformation(mip_interface *device_interface_0,
                                            u8 function_selector,
                                            float euler_angles[3])
{
  u8 i;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 *response_data = (u8 *)0;
  u16 response_data_size = (u16)0;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)euler_angles,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x11,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x81) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)euler_angles,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(euler_angles + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_sensor2vehicle_offset(mip_interface *device_interface_0,
                                     u8 function_selector, float offset[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)offset,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x12,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x82) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)offset,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(offset + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_antenna_offset(mip_interface *device_interface_0,
                              u8 function_selector, float offset[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)offset,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x13,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x83) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)offset,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(offset + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_gps_source(mip_interface *device_interface_0,
                          u8 function_selector, u8 *gps_source)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[2];
  mip_field_header *field_header_ptr;
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *gps_source;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x15,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x86) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)gps_source,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_external_gps_update(mip_interface *device_interface_0,
                                   mip_filter_external_gps_update_command *command)
{
  u8 i;
  mip_filter_external_gps_update_command local_command;
  u16 tmp;
  memcpy((void *)(& local_command),(void const *)command,
         sizeof(mip_filter_external_gps_update_command));
  byteswap_inplace((void *)(& local_command.tow),(u16)sizeof(double));
  byteswap_inplace((void *)(& local_command.week_number),(u16)sizeof(u16));
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& local_command.pos[i]),(u16)sizeof(double));
    byteswap_inplace((void *)(& local_command.vel[i]),(u16)sizeof(float));
    byteswap_inplace((void *)(& local_command.pos_1sigma[i]),
                     (u16)sizeof(float));
    byteswap_inplace((void *)(& local_command.vel_1sigma[i]),
                     (u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x16,
                                   (u8 *)(& local_command),
                                   (u16)sizeof(mip_filter_external_gps_update_command),
                                   (u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_external_heading_update(mip_interface *device_interface_0,
                                       mip_filter_external_heading_update_command *command)
{
  mip_filter_external_heading_update_command local_command;
  u16 tmp;
  memcpy((void *)(& local_command),(void const *)command,
         sizeof(mip_filter_external_heading_update_command));
  byteswap_inplace((void *)(& local_command.heading_angle),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& local_command.heading_angle_1sigma),
                   (u16)sizeof(float));
  tmp = mip_interface_send_command(device_interface_0,(u8)0x0D,(u8)0x17,
                                   (u8 *)(& local_command),
                                   (u16)sizeof(mip_filter_external_heading_update_command),
                                   (u8)1,(u32)1000);
  return tmp;
}

u16 mip_filter_heading_source(mip_interface *device_interface_0,
                              u8 function_selector, u8 *heading_source)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *heading_source;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x18,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x87) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)heading_source,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_auto_initialization(mip_interface *device_interface_0,
                                   u8 function_selector, u8 *enable)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *enable;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x19,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x88) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)enable,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_accel_noise(mip_interface *device_interface_0,
                           u8 function_selector, float noise_1sigma[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)noise_1sigma,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x1A,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x89) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)noise_1sigma,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(noise_1sigma + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_gyro_noise(mip_interface *device_interface_0,
                          u8 function_selector, float noise_1sigma[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)noise_1sigma,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x1B,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8A) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)noise_1sigma,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(noise_1sigma + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_gyro_bias_model(mip_interface *device_interface_0,
                               u8 function_selector, float bias_beta[3],
                               float bias_noise_1sigma[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)6] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)bias_beta,
           sizeof(float) * (unsigned int)3);
    memcpy((void *)(float_ptr + 3),(void const *)bias_noise_1sigma,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 6) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x1D,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)6),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8C) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)6) {
          float_ptr = (float *)(response_data + sizeof(mip_field_header));
          memcpy((void *)bias_beta,(void const *)float_ptr,
                 sizeof(float) * (unsigned int)3);
          memcpy((void *)bias_noise_1sigma,(void const *)(float_ptr + 3),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(bias_beta + i),(u16)sizeof(float));
            byteswap_inplace((void *)(bias_noise_1sigma + i),
                             (u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_accel_bias_model(mip_interface *device_interface_0,
                                u8 function_selector, float bias_beta[3],
                                float bias_noise_1sigma[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)6] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)bias_beta,
           sizeof(float) * (unsigned int)3);
    memcpy((void *)(float_ptr + 3),(void const *)bias_noise_1sigma,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 6) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x1C,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)6),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8B) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)6) {
          float_ptr = (float *)(response_data + sizeof(mip_field_header));
          memcpy((void *)bias_beta,(void const *)float_ptr,
                 sizeof(float) * (unsigned int)3);
          memcpy((void *)bias_noise_1sigma,(void const *)(float_ptr + 3),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(bias_beta + i),(u16)sizeof(float));
            byteswap_inplace((void *)(bias_noise_1sigma + i),
                             (u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_zero_velocity_update_control(mip_interface *device_interface_0,
                                            u8 function_selector,
                                            mip_filter_zero_update_command *zero_velocity_control)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_filter_zero_update_command)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = zero_velocity_control->enable;
    float_ptr = (float *)(& command_data[2]);
    memcpy((void *)float_ptr,
           (void const *)(& zero_velocity_control->threshold),sizeof(float));
    byteswap_inplace((void *)float_ptr,(u16)sizeof(float));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x1E,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_filter_zero_update_command)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8D) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_filter_zero_update_command)) {
          zero_velocity_control->enable = *(response_data + sizeof(mip_field_header));
          float_ptr = (float *)((response_data + sizeof(mip_field_header)) + sizeof(u8));
          memcpy((void *)(& zero_velocity_control->threshold),
                 (void const *)float_ptr,sizeof(float));
          byteswap_inplace((void *)(& zero_velocity_control->threshold),
                           (u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_zero_angular_rate_update_control(mip_interface *device_interface_0,
                                                u8 function_selector,
                                                mip_filter_zero_update_command *zero_angular_rate_control)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_filter_zero_update_command)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = zero_angular_rate_control->enable;
    float_ptr = (float *)(& command_data[2]);
    memcpy((void *)float_ptr,
           (void const *)(& zero_angular_rate_control->threshold),
           sizeof(float));
    byteswap_inplace((void *)float_ptr,(u16)sizeof(float));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x20,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_filter_zero_update_command)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x8E) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_filter_zero_update_command)) {
          zero_angular_rate_control->enable = *(response_data + sizeof(mip_field_header));
          float_ptr = (float *)((response_data + sizeof(mip_field_header)) + sizeof(u8));
          memcpy((void *)(& zero_angular_rate_control->threshold),
                 (void const *)float_ptr,sizeof(float));
          byteswap_inplace((void *)(& zero_angular_rate_control->threshold),
                           (u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_tare_orientation(mip_interface *device_interface_0,
                                u8 function_selector, u8 tare_bitfield)
{
  u16 return_code;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = tare_bitfield;
  return_code = mip_interface_send_command(device_interface_0,(u8)0x0D,
                                           (u8)0x21,command_data,(u16)2,
                                           (u8)1,(u32)1000);
  return return_code;
}

u16 mip_filter_commanded_zero_velocity_update(mip_interface *device_interface_0)
{
  u16 return_code;
  return_code = mip_interface_send_command(device_interface_0,(u8)0x0D,
                                           (u8)0x22,(u8 *)0,(u16)0,(u8)1,
                                           (u32)1000);
  return return_code;
}

u16 mip_filter_commanded_zero_angular_rate_update(mip_interface *device_interface_0)
{
  u16 return_code;
  return_code = mip_interface_send_command(device_interface_0,(u8)0x0D,
                                           (u8)0x23,(u8 *)0,(u16)0,(u8)1,
                                           (u32)1000);
  return return_code;
}

u16 mip_filter_external_heading_update_with_time(mip_interface *device_interface_0,
                                                 mip_filter_external_heading_with_time_command *heading_with_time_command)
{
  u16 return_code;
  u8 command_data[sizeof(mip_filter_external_heading_with_time_command)] =
    {(u8)0};
  memcpy((void *)(command_data),(void const *)heading_with_time_command,
         sizeof(mip_filter_external_heading_with_time_command));
  mip_filter_external_heading_update_with_time_byteswap((mip_filter_external_heading_with_time_command *)(command_data));
  return_code = mip_interface_send_command(device_interface_0,(u8)0x0D,
                                           (u8)0x1F,command_data,
                                           (u16)sizeof(mip_filter_external_heading_with_time_command),
                                           (u8)1,(u32)1000);
  return return_code;
}

u16 mip_filter_mag_noise(mip_interface *device_interface_0,
                         u8 function_selector, float noise_1sigma[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(float) * (unsigned int)3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    float_ptr = (float *)(& command_data[1]);
    memcpy((void *)float_ptr,(void const *)noise_1sigma,
           sizeof(float) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x42,
                                                         command_data,
                                                         (u16)(sizeof(u8) + 
                                                               sizeof(float) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB1) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + 
                                                    sizeof(float) * (unsigned int)3) {
          memcpy((void *)noise_1sigma,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(float) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(noise_1sigma + i),(u16)sizeof(float));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_reference_position(mip_interface *device_interface_0,
                                  u8 function_selector, u8 *reference_enable,
                                  double reference_position[3])
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  double *double_ptr;
  u8 command_data[(sizeof(u8) + sizeof(u8)) + sizeof(double) * (unsigned int)3] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = *reference_enable;
    double_ptr = (double *)(& command_data[2]);
    memcpy((void *)double_ptr,(void const *)reference_position,
           sizeof(double) * (unsigned int)3);
    i = (u8)0;
    while ((int)i < 3) {
      byteswap_inplace((void *)(double_ptr + i),(u16)sizeof(double));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x26,
                                                         command_data,
                                                         (u16)((sizeof(u8) + sizeof(u8)) + 
                                                               sizeof(double) * (unsigned int)3),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x90) 
        if ((unsigned int)field_header_ptr->size >= (sizeof(mip_field_header) + sizeof(u8)) + 
                                                    sizeof(double) * (unsigned int)3) {
          memcpy((void *)reference_enable,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
          memcpy((void *)reference_position,
                 (void const *)((response_data + sizeof(mip_field_header)) + sizeof(u8)),
                 sizeof(double) * (unsigned int)3);
          i = (u8)0;
          while ((int)i < 3) {
            byteswap_inplace((void *)(reference_position + i),
                             (u16)sizeof(double));
            i = (u8)((int)i + 1);
          }
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_estimation_control(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u16 *estimation_control)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u16 *short_ptr;
  u8 command_data[3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    short_ptr = (u16 *)(& command_data[1]);
    *short_ptr = *estimation_control;
    byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x14,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x84) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) {
          memcpy((void *)estimation_control,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u16));
          byteswap_inplace((void *)estimation_control,(u16)sizeof(u16));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_enable_measurement(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u16 *measurement_enable)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u16 *short_ptr;
  u8 command_data[3] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    short_ptr = (u16 *)(& command_data[1]);
    *short_ptr = *measurement_enable;
    byteswap_inplace((void *)short_ptr,(u16)sizeof(u16));
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x41,
                                                         command_data,(u16)3,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB0) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) {
          memcpy((void *)measurement_enable,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u16));
          byteswap_inplace((void *)measurement_enable,(u16)sizeof(u16));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_declination_source(mip_interface *device_interface_0,
                                  u8 function_selector,
                                  u8 *declination_source)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  u8 command_data[2] = {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) command_data[1] = *declination_source;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x43,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB2) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)declination_source,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_accel_magnitude_error_adaptive_measurement(mip_interface *device_interface_0,
                                                          u8 function_selector,
                                                          mip_filter_accel_magnitude_error_adaptive_measurement_command *params)
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_filter_accel_magnitude_error_adaptive_measurement_command)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = params->enable;
    float_ptr = (float *)(& command_data[2]);
    memcpy((void *)float_ptr,(void const *)(& params->low_pass_cutoff),
           sizeof(float) * (unsigned int)6);
    i = (u8)0;
    while ((int)i < 6) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x44,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_filter_accel_magnitude_error_adaptive_measurement_command)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB3) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_filter_accel_magnitude_error_adaptive_measurement_command)) {
          params->enable = *(response_data + sizeof(mip_field_header));
          float_ptr = (float *)((response_data + sizeof(mip_field_header)) + sizeof(u8));
          memcpy((void *)(& params->low_pass_cutoff),(void const *)float_ptr,
                 sizeof(float) * (unsigned int)6);
          byteswap_inplace((void *)(& params->low_pass_cutoff),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->low_limit),(u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit),(u16)sizeof(float));
          byteswap_inplace((void *)(& params->low_limit_1sigma),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit_1sigma),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->min_1sigma),(u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_mag_magnitude_error_adaptive_measurement(mip_interface *device_interface_0,
                                                        u8 function_selector,
                                                        mip_filter_magnetometer_magnitude_error_adaptive_measurement_command *params)
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_filter_magnetometer_magnitude_error_adaptive_measurement_command)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = params->enable;
    float_ptr = (float *)(& command_data[2]);
    memcpy((void *)float_ptr,(void const *)(& params->low_pass_cutoff),
           sizeof(float) * (unsigned int)6);
    i = (u8)0;
    while ((int)i < 6) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x45,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_filter_magnetometer_magnitude_error_adaptive_measurement_command)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB4) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_filter_magnetometer_magnitude_error_adaptive_measurement_command)) {
          params->enable = *(response_data + sizeof(mip_field_header));
          float_ptr = (float *)((response_data + sizeof(mip_field_header)) + sizeof(u8));
          memcpy((void *)(& params->low_pass_cutoff),(void const *)float_ptr,
                 sizeof(float) * (unsigned int)6);
          byteswap_inplace((void *)(& params->low_pass_cutoff),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->low_limit),(u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit),(u16)sizeof(float));
          byteswap_inplace((void *)(& params->low_limit_1sigma),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit_1sigma),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->min_1sigma),(u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 mip_filter_mag_dip_angle_error_adaptive_measurement(mip_interface *device_interface_0,
                                                        u8 function_selector,
                                                        mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command *params)
{
  u8 i;
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  mip_field_header *field_header_ptr;
  float *float_ptr;
  u8 command_data[sizeof(u8) + sizeof(mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command)] =
    {(u8)0};
  command_data[0] = function_selector;
  if ((int)function_selector == 0x01) {
    command_data[1] = params->enable;
    float_ptr = (float *)(& command_data[2]);
    memcpy((void *)float_ptr,(void const *)(& params->low_pass_cutoff),
           sizeof(float) * (unsigned int)4);
    i = (u8)0;
    while ((int)i < 4) {
      byteswap_inplace((void *)(float_ptr + i),(u16)sizeof(float));
      i = (u8)((int)i + 1);
    }
  }
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x0D,(u8)0x46,
                                                         command_data,
                                                         (u16)(sizeof(u8) + sizeof(mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command)),
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0xB5) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command)) {
          params->enable = *(response_data + sizeof(mip_field_header));
          float_ptr = (float *)((response_data + sizeof(mip_field_header)) + sizeof(u8));
          memcpy((void *)(& params->low_pass_cutoff),(void const *)float_ptr,
                 sizeof(float) * (unsigned int)4);
          byteswap_inplace((void *)(& params->low_pass_cutoff),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit),(u16)sizeof(float));
          byteswap_inplace((void *)(& params->high_limit_1sigma),
                           (u16)sizeof(float));
          byteswap_inplace((void *)(& params->min_1sigma),(u16)sizeof(float));
        }
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

void mip_gps_llh_pos_byteswap(mip_gps_llh_pos *llh_pos)
{
  byteswap_inplace((void *)(& llh_pos->latitude),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->longitude),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->ellipsoid_height),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->msl_height),(u16)sizeof(double));
  byteswap_inplace((void *)(& llh_pos->horizontal_accuracy),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& llh_pos->vertical_accuracy),(u16)sizeof(float));
  byteswap_inplace((void *)(& llh_pos->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_ecef_pos_byteswap(mip_gps_ecef_pos *ecef_pos)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& ecef_pos->x[i]),(u16)sizeof(double));
    i = (u8)((int)i + 1);
  }
  byteswap_inplace((void *)(& ecef_pos->x_accuracy),(u16)sizeof(float));
  byteswap_inplace((void *)(& ecef_pos->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_ned_vel_byteswap(mip_gps_ned_vel *ned_vel)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& ned_vel->v[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  byteswap_inplace((void *)(& ned_vel->speed),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel->ground_speed),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel->heading),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel->speed_accuracy),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel->heading_accuracy),(u16)sizeof(float));
  byteswap_inplace((void *)(& ned_vel->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_ecef_vel_byteswap(mip_gps_ecef_vel *ecef_vel)
{
  u8 i;
  i = (u8)0;
  while ((int)i < 3) {
    byteswap_inplace((void *)(& ecef_vel->v[i]),(u16)sizeof(float));
    i = (u8)((int)i + 1);
  }
  byteswap_inplace((void *)(& ecef_vel->v_accuracy),(u16)sizeof(float));
  byteswap_inplace((void *)(& ecef_vel->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_fix_info_byteswap(mip_gps_fix_info *fix_info)
{
  byteswap_inplace((void *)(& fix_info->fix_flags),(u16)sizeof(u16));
  byteswap_inplace((void *)(& fix_info->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_sv_info_byteswap(mip_gps_sv_info *sv_info)
{
  byteswap_inplace((void *)(& sv_info->carrier_noise_ratio),(u16)sizeof(u16));
  byteswap_inplace((void *)(& sv_info->azimuth),(u16)sizeof(s16));
  byteswap_inplace((void *)(& sv_info->elevation),(u16)sizeof(s16));
  byteswap_inplace((void *)(& sv_info->sv_flags),(u16)sizeof(u16));
  byteswap_inplace((void *)(& sv_info->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_dop_byteswap(mip_gps_dop *dop)
{
  byteswap_inplace((void *)(& dop->gdop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->pdop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->hdop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->vdop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->tdop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->ndop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->edop),(u16)sizeof(float));
  byteswap_inplace((void *)(& dop->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_utc_time_byteswap(mip_gps_utc_time *utc_time)
{
  byteswap_inplace((void *)(& utc_time->year),(u16)sizeof(u16));
  byteswap_inplace((void *)(& utc_time->msec),(u16)sizeof(u32));
  byteswap_inplace((void *)(& utc_time->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_time_byteswap(mip_gps_time *gps_time)
{
  byteswap_inplace((void *)(& gps_time->tow),(u16)sizeof(double));
  byteswap_inplace((void *)(& gps_time->week_number),(u16)sizeof(u16));
  byteswap_inplace((void *)(& gps_time->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_clock_info_byteswap(mip_gps_clock_info *clock_info)
{
  byteswap_inplace((void *)(& clock_info->bias),(u16)sizeof(double));
  byteswap_inplace((void *)(& clock_info->drift),(u16)sizeof(double));
  byteswap_inplace((void *)(& clock_info->accuracy_estimate),
                   (u16)sizeof(double));
  byteswap_inplace((void *)(& clock_info->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_hw_status_byteswap(mip_gps_hw_status *hw_status)
{
  byteswap_inplace((void *)(& hw_status->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_dgps_info_byteswap(mip_gps_dgps_info *dgps_info)
{
  byteswap_inplace((void *)(& dgps_info->age),(u16)sizeof(float));
  byteswap_inplace((void *)(& dgps_info->base_station_id),(u16)sizeof(s16));
  byteswap_inplace((void *)(& dgps_info->base_station_status),
                   (u16)sizeof(s16));
  byteswap_inplace((void *)(& dgps_info->num_dgps_channels),(u16)sizeof(u16));
  byteswap_inplace((void *)(& dgps_info->valid_flags),(u16)sizeof(u16));
  return;
}

void mip_gps_dgps_channel_status_byteswap(mip_gps_dgps_channel_status *dgps_channel_status)
{
  byteswap_inplace((void *)(& dgps_channel_status->age),(u16)sizeof(float));
  byteswap_inplace((void *)(& dgps_channel_status->pseudorange_correction),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& dgps_channel_status->pseudorange_rate_correction),
                   (u16)sizeof(float));
  byteswap_inplace((void *)(& dgps_channel_status->valid_flags),
                   (u16)sizeof(u16));
  return;
}

u16 mip_interface_init(char const *portstr, u32 baudrate,
                       mip_interface *device_interface_0,
                       u32 packet_timeout_val)
{
  u16 __retres;
  u16 i;
  u16 tmp;
  u16 tmp_0;
  device_interface_0->port_handle = (void *)0;
  tmp = mip_sdk_port_open(& device_interface_0->port_handle,portstr,
                          (int)baudrate);
  if ((int)tmp != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  tmp_0 = ring_buffer_init_static(& device_interface_0->input_buffer,
                                  device_interface_0->input_buffer_bytes,
                                  (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2,
                                  (u32)1);
  if ((int)tmp_0 != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  memset((void *)(device_interface_0->mip_packet),0,
         (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2);
  device_interface_0->mip_packet_byte_count = (u16)0;
  device_interface_0->parser_start_time = (u32)0;
  device_interface_0->parser_num_bad_checksums = (u32)0;
  device_interface_0->parser_timeouts = (u32)0;
  device_interface_0->parser_in_sync = (u8)0;
  device_interface_0->parser_headers_skipped = (u32)0;
  device_interface_0->packet_timeout = packet_timeout_val;
  i = (u16)0;
  while ((int)i < 10 + 1) {
    device_interface_0->callback_data_set_list[i] = (u8)0;
    device_interface_0->callback_function_list[i] = (parser_callback_ptr)0;
    device_interface_0->callback_user_ptr_list[i] = (void *)0;
    i = (u16)((int)i + 1);
  }
  device_interface_0->command_response_received = (u8)0;
  device_interface_0->command_acknack_response = (u8)0;
  device_interface_0->command_response_data = (u8 *)0;
  device_interface_0->command_response_data_size = (u8)0;
  device_interface_0->command_id = (u8)0;
  device_interface_0->callback_function_list[0] = & __mip_interface_command_response_handler;
  device_interface_0->callback_user_ptr_list[0] = (void *)device_interface_0;
  device_interface_0->state = (u8)1;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_interface_close(mip_interface *device_interface_0)
{
  u16 __retres;
  u16 tmp;
  tmp = mip_sdk_port_close(device_interface_0->port_handle);
  if ((int)tmp != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_interface_update(mip_interface *device_interface_0)
{
  u16 __retres;
  u32 num_bytes;
  u8 local_buffer[(sizeof(mip_header) + (unsigned int)255) + (unsigned int)2];
  u32 port_bytes;
  u32 tmp;
  u32 bytes_read = (u32)0;
  u32 bytes_written = (u32)0;
  if ((int)device_interface_0->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  num_bytes = (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2;
  tmp = ring_buffer_remaining_entries(& device_interface_0->input_buffer);
  ;
  if (tmp < num_bytes) num_bytes = ring_buffer_remaining_entries(& device_interface_0->input_buffer);
  port_bytes = mip_sdk_port_read_count(device_interface_0->port_handle);
  if (num_bytes > port_bytes) num_bytes = port_bytes;
  if (num_bytes > (u32)0) mip_sdk_port_read(device_interface_0->port_handle,
                                            local_buffer,num_bytes,
                                            & bytes_read,(u32)10);
  if (bytes_read > (u32)0) ring_buffer_write_multi(& device_interface_0->input_buffer,
                                                   local_buffer,bytes_read,
                                                   & bytes_written);
  __mip_interface_parse_input_buffer(device_interface_0);
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_interface_add_descriptor_set_callback(mip_interface *device_interface_0,
                                              u8 data_set, void *user_ptr,
                                              void (*packet_callback)
                                              (void *user_ptr, u8 *packet,
                                               u16 packet_size,
                                               u8 callback_type))
{
  u16 __retres;
  u16 i;
  i = (u16)1;
  while ((int)i < 10 + 1) {
    if ((int)device_interface_0->callback_data_set_list[i] == 0) 
      if (device_interface_0->callback_function_list[i] == (parser_callback_ptr)0) 
        if (device_interface_0->callback_user_ptr_list[i] == (void *)0) {
          device_interface_0->callback_data_set_list[i] = data_set;
          device_interface_0->callback_function_list[i] = packet_callback;
          device_interface_0->callback_user_ptr_list[i] = user_ptr;
          __retres = (u16)0;
          goto return_label;
        }
    i = (u16)((int)i + 1);
  }
  __retres = (u16)1;
  return_label: return __retres;
}

u16 mip_interface_delete_descriptor_set_callback(mip_interface *device_interface_0,
                                                 u8 data_set)
{
  u16 __retres;
  u16 i;
  u16 found = (u16)0;
  i = (u16)1;
  while ((int)i < 10 + 1) {
    if ((int)device_interface_0->callback_data_set_list[i] == (int)data_set) {
      device_interface_0->callback_data_set_list[i] = (u8)0;
      device_interface_0->callback_function_list[i] = (parser_callback_ptr)0;
      device_interface_0->callback_user_ptr_list[i] = (void *)0;
      found = (u16)1;
    }
    i = (u16)((int)i + 1);
  }
  if (! found) {
    __retres = (u16)1;
    goto return_label;
  }
  else {
    __retres = (u16)0;
    goto return_label;
  }
  return_label: return __retres;
}

u16 mip_interface_write(mip_interface *device_interface_0, u8 *data,
                        u32 num_bytes, u32 *bytes_written)
{
  u16 __retres;
  u32 i;
  if ((int)device_interface_0->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  *bytes_written = (u32)0;
  if (num_bytes == (u32)0) {
    __retres = (u16)0;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_bytes) {
    {
      u16 tmp;
      tmp = ring_buffer_write(& device_interface_0->input_buffer,data + i,
                              (u32)1);
      if ((int)tmp == 0) (*bytes_written) ++; else break;
    }
    i ++;
  }
  if (num_bytes != *bytes_written) {
    __retres = (u16)1;
    goto return_label;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_interface_write_blocking(mip_interface *device_interface_0, u8 *data,
                                 u32 num_bytes, u32 *bytes_written,
                                 u32 timeout_ms)
{
  u16 __retres;
  u16 tmp_2;
  u32 initial_time = mip_sdk_get_time_ms();
  if ((int)device_interface_0->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if (num_bytes > (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) {
    __retres = (u16)1;
    goto return_label;
  }
  while (1) {
    u32 tmp_1;
    tmp_1 = ring_buffer_remaining_entries(& device_interface_0->input_buffer);
    ;
    if (! (num_bytes > tmp_1)) break;
    {
      u16 tmp_0;
      tmp_0 = __mip_interface_time_timeout(initial_time,timeout_ms);
      if ((int)tmp_0 == 0) {
        __retres = (u16)1;
        goto return_label;
      }
    }
  }
  tmp_2 = mip_interface_write(device_interface_0,data,num_bytes,
                              bytes_written);
  __retres = tmp_2;
  return_label: return __retres;
}

u16 __mip_interface_parse_input_buffer(mip_interface *device_interface_0)
{
  u16 __retres;
  u16 i;
  u16 ret;
  mip_header *header_ptr = (mip_header *)(device_interface_0->mip_packet);
  void (*callback_function)(void *, u8 *, u16 , u8 ) =
    (void (*)(void *, u8 *, u16 , u8 ))0;
  void *callback_user_ptr = (void *)0;
  if ((int)device_interface_0->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((unsigned int)device_interface_0->mip_packet_byte_count < sizeof(mip_header)) {
    while (1) {
      if ((int)device_interface_0->mip_packet_byte_count == 0) {
        u32 tmp;
        tmp = ring_buffer_count(& device_interface_0->input_buffer);
        if (! tmp) break;
      }
      else break;
      ret = ring_buffer_read(& device_interface_0->input_buffer,
                             & device_interface_0->mip_packet[0],(u32)1);
      if ((int)ret == 0) 
        if ((int)device_interface_0->mip_packet[0] == 0x75) {
          device_interface_0->mip_packet_byte_count = (u16)1;
          device_interface_0->parser_start_time = mip_sdk_get_time_ms();
        }
    }
    if ((int)device_interface_0->mip_packet_byte_count > 0) {
      u32 tmp_1;
      tmp_1 = ring_buffer_count(& device_interface_0->input_buffer);
      if (tmp_1 >= sizeof(mip_header) - (unsigned int)1) {
        i = (u16)0;
        while ((unsigned int)i < sizeof(mip_header) - (unsigned int)1) {
          ring_buffer_lookahead_read(& device_interface_0->input_buffer,
                                     (u32)i,
                                     & device_interface_0->mip_packet[
                                     (int)i + 1],(u32)1);
          i = (u16)((int)i + 1);
        }
        if ((int)header_ptr->sync2 == 0x65) {
          if (((unsigned int)header_ptr->payload_size + sizeof(mip_header)) + (unsigned int)2 <= 
              (sizeof(mip_header) + (unsigned int)255) + (unsigned int)2) 
            device_interface_0->mip_packet_byte_count = (u16)sizeof(mip_header);
          else goto _LAND;
        }
        else {
          _LAND:
          {
            device_interface_0->parser_in_sync = (u8)0;
            device_interface_0->mip_packet_byte_count = (u16)0;
            (device_interface_0->parser_headers_skipped) ++;
          }
        }
      }
      else {
        u16 tmp_0;
        tmp_0 = __mip_interface_time_timeout(device_interface_0->parser_start_time,
                                             device_interface_0->packet_timeout);
        if ((int)tmp_0 == 0) {
          (device_interface_0->parser_timeouts) ++;
          device_interface_0->mip_packet_byte_count = (u16)0;
          device_interface_0->parser_in_sync = (u8)0;
        }
      }
    }
  }
  if ((unsigned int)device_interface_0->mip_packet_byte_count >= sizeof(mip_header)) {
    u32 tmp_7;
    tmp_7 = ring_buffer_count(& device_interface_0->input_buffer);
    ;
    if (tmp_7 >= ((sizeof(mip_header) - (unsigned int)1) + (unsigned int)header_ptr->payload_size) + (unsigned int)2) {
      u16 tmp_4;
      i = (u16)0;
      while ((int)i < (int)header_ptr->payload_size + 2) {
        ring_buffer_lookahead_read(& device_interface_0->input_buffer,
                                   (sizeof(mip_header) - (unsigned int)1) + (unsigned int)i,
                                   & device_interface_0->mip_packet[sizeof(mip_header) + (unsigned int)i],
                                   (u32)1);
        i = (u16)((int)i + 1);
      }
      tmp_4 = mip_is_checksum_valid(device_interface_0->mip_packet);
      if ((int)tmp_4 == 0) {
        u16 tmp_2;
        device_interface_0->mip_packet_byte_count = (u16)((int)device_interface_0->mip_packet_byte_count + (
                                                          (int)header_ptr->payload_size + 2));
        tmp_2 = __mip_interface_find_callback(device_interface_0,
                                              header_ptr->descriptor_set,
                                              & callback_user_ptr,
                                              & callback_function);
        if ((int)tmp_2 == 0) (*callback_function)(callback_user_ptr,
                                                  device_interface_0->mip_packet,
                                                  device_interface_0->mip_packet_byte_count,
                                                  (u8)0);
        ring_buffer_consume_entries(& device_interface_0->input_buffer,
                                    (u32)((int)device_interface_0->mip_packet_byte_count - 1));
        device_interface_0->parser_in_sync = (u8)1;
        device_interface_0->mip_packet_byte_count = (u16)0;
      }
      else {
        u16 tmp_3;
        tmp_3 = __mip_interface_find_callback(device_interface_0,
                                              header_ptr->descriptor_set,
                                              & callback_user_ptr,
                                              & callback_function);
        if ((int)tmp_3 == 0) (*callback_function)(callback_user_ptr,
                                                  device_interface_0->mip_packet,
                                                  device_interface_0->mip_packet_byte_count,
                                                  (u8)1);
        if (device_interface_0->parser_in_sync) (device_interface_0->parser_num_bad_checksums) ++;
        device_interface_0->parser_in_sync = (u8)0;
      }
      device_interface_0->mip_packet_byte_count = (u16)0;
    }
    else {
      u16 tmp_6;
      tmp_6 = __mip_interface_time_timeout(device_interface_0->parser_start_time,
                                           device_interface_0->packet_timeout);
      if ((int)tmp_6 == 0) {
        u16 tmp_5;
        tmp_5 = __mip_interface_find_callback(device_interface_0,
                                              header_ptr->descriptor_set,
                                              & callback_user_ptr,
                                              & callback_function);
        if ((int)tmp_5 == 0) (*callback_function)(callback_user_ptr,
                                                  device_interface_0->mip_packet,
                                                  device_interface_0->mip_packet_byte_count,
                                                  (u8)2);
        (device_interface_0->parser_timeouts) ++;
        device_interface_0->parser_in_sync = (u8)0;
        device_interface_0->mip_packet_byte_count = (u16)0;
      }
    }
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 __mip_interface_find_callback(mip_interface *device_interface_0,
                                  u8 data_set, void **callback_user_ptr,
                                  parser_callback_ptr *callback_function)
{
  u16 __retres;
  u16 i;
  *callback_user_ptr = (void *)0;
  if ((int)data_set == 0) {
    __retres = (u16)1;
    goto return_label;
  }
  i = (u16)0;
  while ((int)i < 10 + 1) {
    if ((int)device_interface_0->callback_data_set_list[i] == (int)data_set) 
      if (device_interface_0->callback_function_list[i] != (parser_callback_ptr)0) {
        *callback_user_ptr = device_interface_0->callback_user_ptr_list[i];
        *callback_function = device_interface_0->callback_function_list[i];
        __retres = (u16)0;
        goto return_label;
      }
    i = (u16)((int)i + 1);
  }
  __retres = (u16)1;
  return_label: return __retres;
}

u16 __mip_interface_time_timeout(u32 initial_time, u32 timeout_ms)
{
  u16 __retres;
  u32 current_time = mip_sdk_get_time_ms();
  if (initial_time > current_time) {
    if ((0xFFFFFFFF - initial_time) + current_time >= timeout_ms) {
      __retres = (u16)0;
      goto return_label;
    }
  }
  else 
    if (current_time - initial_time >= timeout_ms) {
      __retres = (u16)0;
      goto return_label;
    }
  __retres = (u16)1;
  return_label: return __retres;
}

void __mip_interface_command_response_handler(void *user_ptr, u8 *packet,
                                              u16 packet_size,
                                              u8 callback_type)
{
  u16 payload_size;
  global_ack_nack_field *ack_nack_field_ptr;
  mip_field_header *field_header_ptr;
  u8 *field_data_ptr;
  u16 field_offset = (u16)0;
  mip_interface *device_interface_0 = (mip_interface *)user_ptr;
  if (device_interface_0 == (mip_interface *)0) goto return_label;
  device_interface_0->command_response_received = (u8)1;
  if ((int)callback_type == 0) {
    u8 tmp;
    u16 tmp_0;
    u16 tmp_1;
    tmp = mip_get_payload_size(packet);
    payload_size = (u16)tmp;
    tmp_0 = mip_get_first_field(packet,& field_header_ptr,& field_data_ptr,
                                & field_offset);
    if ((int)tmp_0 == 0) {
      ack_nack_field_ptr = (global_ack_nack_field *)field_data_ptr;
      device_interface_0->command_id = ack_nack_field_ptr->command_echo_byte;
      device_interface_0->command_acknack_response = ack_nack_field_ptr->error_code;
    }
    tmp_1 = mip_get_next_field(packet,& field_header_ptr,& field_data_ptr,
                               & field_offset);
    if ((int)tmp_1 == 0) {
      device_interface_0->command_response_data = (u8 *)field_header_ptr;
      device_interface_0->command_response_data_size = (u8)((unsigned int)payload_size - (
                                                            sizeof(mip_field_header) + sizeof(global_ack_nack_field)));
    }
  }
  else {
    device_interface_0->command_id = (u8)0;
    device_interface_0->command_acknack_response = (u8)0;
    device_interface_0->command_response_data = (u8 *)0;
    device_interface_0->command_response_data_size = (u8)0;
  }
  return_label: return;
}

u16 mip_interface_send_command(mip_interface *device_interface_0,
                               u8 command_set, u8 command_descriptor,
                               u8 *command_data, u16 command_data_size,
                               u8 wait_for_response, u32 timeout_ms)
{
  u8 mip_packet[(sizeof(mip_header) + (unsigned int)255) + (unsigned int)2];
  u16 packet_size;
  u16 tmp;
  mip_init(mip_packet,
           (u16)((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2),
           command_set);
  mip_add_field(mip_packet,
                (u16)((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2),
                (void *)command_data,command_data_size,
                (u16)command_descriptor);
  packet_size = mip_finalize(mip_packet);
  tmp = mip_interface_send_preformatted_command(device_interface_0,
                                                mip_packet,packet_size,
                                                wait_for_response,timeout_ms);
  return tmp;
}

u16 mip_interface_send_preformatted_command(mip_interface *device_interface_0,
                                            u8 *command, u16 command_size,
                                            u8 wait_for_response,
                                            u32 timeout_ms)
{
  u16 __retres;
  u16 return_code;
  u32 bytes_written;
  u8 command_set;
  u8 command_descriptor;
  mip_field_header *field_header_ptr;
  u8 *field_data_ptr;
  u8 *response_data;
  u16 response_data_size;
  u16 tmp;
  u16 tmp_0;
  u8 acknack_response = (u8)0x04;
  mip_header *header_ptr = (mip_header *)command;
  u16 field_offset = (u16)0;
  if (device_interface_0 == (mip_interface *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  else 
    if (command == (u8 *)0) {
      __retres = (u16)1;
      goto return_label;
    }
    else 
      if ((int)command_size == 0) {
        __retres = (u16)1;
        goto return_label;
      }
  tmp = mip_sdk_port_write(device_interface_0->port_handle,command,
                           (u32)command_size,& bytes_written,timeout_ms);
  if ((int)tmp != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  if (! wait_for_response) {
    __retres = (u16)0;
    goto return_label;
  }
  command_set = header_ptr->descriptor_set;
  tmp_0 = mip_get_first_field(command,& field_header_ptr,& field_data_ptr,
                              & field_offset);
  if ((int)tmp_0 != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  command_descriptor = field_header_ptr->descriptor;
  return_code = __mip_interface_wait_for_response(device_interface_0,
                                                  command_set,
                                                  command_descriptor,
                                                  & acknack_response,
                                                  & response_data,
                                                  & response_data_size,
                                                  timeout_ms);
  if ((int)return_code != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  else 
    if ((int)acknack_response != 0x00) {
      __retres = (u16)1;
      goto return_label;
    }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_interface_send_command_with_response(mip_interface *device_interface_0,
                                             u8 command_set,
                                             u8 command_descriptor,
                                             u8 *command_data,
                                             u16 command_data_size,
                                             u8 **response_data,
                                             u16 *response_data_size,
                                             u32 timeout_ms)
{
  u8 mip_packet[(sizeof(mip_header) + (unsigned int)255) + (unsigned int)2];
  u16 packet_size;
  u16 tmp;
  mip_init(mip_packet,
           (u16)((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2),
           command_set);
  mip_add_field(mip_packet,
                (u16)((sizeof(mip_header) + (unsigned int)255) + (unsigned int)2),
                (void *)command_data,command_data_size,
                (u16)command_descriptor);
  packet_size = mip_finalize(mip_packet);
  tmp = mip_interface_send_preformatted_command_with_response(device_interface_0,
                                                              mip_packet,
                                                              packet_size,
                                                              response_data,
                                                              response_data_size,
                                                              timeout_ms);
  return tmp;
}

u16 mip_interface_send_preformatted_command_with_response(mip_interface *device_interface_0,
                                                          u8 *command,
                                                          u16 command_size,
                                                          u8 **response_data,
                                                          u16 *response_data_size,
                                                          u32 timeout_ms)
{
  u16 __retres;
  u16 return_code;
  u32 bytes_written;
  u8 command_set;
  u8 command_descriptor;
  mip_field_header *field_header_ptr;
  u8 *field_data_ptr;
  u16 tmp;
  u16 tmp_0;
  u8 acknack_response = (u8)0x04;
  mip_header *header_ptr = (mip_header *)command;
  u16 field_offset = (u16)0;
  if (device_interface_0 == (mip_interface *)0) goto _LOR;
  else 
    if (command == (u8 *)0) goto _LOR;
    else 
      if ((int)command_size == 0) {
        _LOR: {
                __retres = (u16)1;
                goto return_label;
              }
      }
  tmp = mip_sdk_port_write(device_interface_0->port_handle,command,
                           (u32)command_size,& bytes_written,timeout_ms);
  if ((int)tmp != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  command_set = header_ptr->descriptor_set;
  tmp_0 = mip_get_first_field(command,& field_header_ptr,& field_data_ptr,
                              & field_offset);
  if ((int)tmp_0 != 0) {
    __retres = (u16)1;
    goto return_label;
  }
  command_descriptor = field_header_ptr->descriptor;
  return_code = __mip_interface_wait_for_response(device_interface_0,
                                                  command_set,
                                                  command_descriptor,
                                                  & acknack_response,
                                                  response_data,
                                                  response_data_size,
                                                  timeout_ms);
  if ((int)return_code != 0) goto _LOR_0;
  else 
    if ((int)acknack_response != 0x00) {
      _LOR_0:
      {
        if ((int)return_code != 0) ;
        if ((int)acknack_response != 0x00) {
          __retres = (u16)1;
          goto return_label;
        }
        __retres = (u16)1;
        goto return_label;
      }
    }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 __mip_interface_wait_for_response(mip_interface *device_interface_0,
                                      u8 command_set, u8 command_descriptor,
                                      u8 *acknack_response,
                                      u8 **response_data,
                                      u16 *response_data_size, u32 timeout_ms)
{
  u32 start_time = mip_sdk_get_time_ms();
  u16 return_code = (u16)1;
  device_interface_0->callback_data_set_list[0] = command_set;
  device_interface_0->command_id = (u8)0;
  device_interface_0->command_acknack_response = (u8)0;
  device_interface_0->command_response_data = (u8 *)0;
  device_interface_0->command_response_data_size = (u8)0;
  while (1) {
    u16 tmp_0;
    tmp_0 = __mip_interface_time_timeout(start_time,timeout_ms);
    if (! ((int)tmp_0 == 1)) break;
    mip_interface_update(device_interface_0);
    if ((int)device_interface_0->command_response_received == 1) 
      if ((int)device_interface_0->command_id == (int)command_descriptor) {
        *acknack_response = device_interface_0->command_acknack_response;
        *response_data = device_interface_0->command_response_data;
        *response_data_size = (u16)device_interface_0->command_response_data_size;
        return_code = (u16)0;
        break;
      }
  }
  device_interface_0->callback_data_set_list[0] = (u8)0;
  device_interface_0->command_id = (u8)0;
  device_interface_0->command_acknack_response = (u8)0;
  device_interface_0->command_response_data = (u8 *)0;
  device_interface_0->command_response_data_size = (u8)0;
  return return_code;
}

u16 mip_system_com_mode(mip_interface *device_interface_0,
                        u8 function_selector, u8 *com_mode)
{
  u8 *response_data;
  u16 response_data_size;
  u16 return_code;
  u8 command_data[2];
  mip_field_header *field_header_ptr;
  command_data[0] = function_selector;
  command_data[1] = *com_mode;
  return_code = mip_interface_send_command_with_response(device_interface_0,
                                                         (u8)0x7F,(u8)0x10,
                                                         command_data,(u16)2,
                                                         & response_data,
                                                         & response_data_size,
                                                         (u32)1000);
  if ((int)return_code == 0) 
    if (response_data != (u8 *)0) {
      field_header_ptr = (mip_field_header *)response_data;
      if ((int)field_header_ptr->descriptor == 0x90) 
        if ((unsigned int)field_header_ptr->size >= sizeof(mip_field_header) + sizeof(u8)) 
          memcpy((void *)com_mode,
                 (void const *)(response_data + sizeof(mip_field_header)),
                 sizeof(u8));
        else return_code = (u16)1;
      else return_code = (u16)1;
    }
  return return_code;
}

u16 ring_buffer_init_static(ring_buffer *buffer, u8 *data_buffer_ptr,
                            u32 max_entries, u32 entry_size)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  buffer->state = (u8)0;
  if (data_buffer_ptr == (u8 *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  __ring_buffer_reset(buffer);
  buffer->entries = data_buffer_ptr;
  buffer->max_entries = max_entries;
  buffer->entry_size = entry_size;
  buffer->type = (u8)0;
  buffer->state = (u8)1;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_init_malloc(ring_buffer *buffer, u32 max_entries,
                            u32 entry_size)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  buffer->state = (u8)0;
  buffer->entries = (u8 *)malloc(max_entries * entry_size);
  if (buffer->entries == (u8 *)0) {
    __retres = (u16)2;
    goto return_label;
  }
  __ring_buffer_reset(buffer);
  buffer->max_entries = max_entries;
  buffer->entry_size = entry_size;
  buffer->type = (u8)1;
  buffer->state = (u8)1;
  __retres = (u16)0;
  return_label: return __retres;
}

u32 ring_buffer_count(ring_buffer *buffer)
{
  u32 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u32)0;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u32)0;
    goto return_label;
  }
  __retres = buffer->current_count;
  return_label: return __retres;
}

u32 ring_buffer_remaining_entries(ring_buffer *buffer)
{
  u32 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u32)0;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u32)0;
    goto return_label;
  }
  __retres = buffer->max_entries - buffer->current_count;
  return_label: return __retres;
}

u16 ring_buffer_flush(ring_buffer *buffer)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  buffer->position = (u32)0;
  buffer->current_count = (u32)0;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_write(ring_buffer *buffer, u8 *entry, u32 num_bytes)
{
  u16 __retres;
  u32 i;
  u32 entry_pos = (u32)0;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if (buffer->current_count >= buffer->max_entries) {
    (buffer->total_overruns) ++;
    __retres = (u16)5;
    goto return_label;
  }
  if (num_bytes == (u32)0) {
    __retres = (u16)0;
    goto return_label;
  }
  if (num_bytes > buffer->entry_size) {
    __retres = (u16)2;
    goto return_label;
  }
  entry_pos = buffer->position + buffer->current_count;
  if (entry_pos >= buffer->max_entries) entry_pos -= buffer->max_entries;
  i = (u32)0;
  while (i < num_bytes) {
    *(buffer->entries + (entry_pos * buffer->entry_size + i)) = *(entry + i);
    i ++;
  }
  (buffer->current_count) ++;
  (buffer->total_entries_written) ++;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_write_multi(ring_buffer *buffer, u8 *entry_buff,
                            u32 num_entries, u32 *num_written)
{
  u16 __retres;
  u32 i;
  u32 j;
  u32 entry_pos = (u32)0;
  *num_written = (u32)0;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if (num_entries == (u32)0) {
    __retres = (u16)0;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_entries) {
    if (buffer->current_count >= buffer->max_entries) {
      buffer->total_overruns += num_entries - i;
      __retres = (u16)5;
      goto return_label;
    }
    entry_pos = buffer->position + buffer->current_count;
    if (entry_pos >= buffer->max_entries) entry_pos -= buffer->max_entries;
    j = (u32)0;
    while (j < buffer->entry_size) {
      *(buffer->entries + (entry_pos * buffer->entry_size + j)) = *(entry_buff + (
                                                                    i * buffer->entry_size + j));
      j ++;
    }
    (buffer->current_count) ++;
    (buffer->total_entries_written) ++;
    (*num_written) ++;
    i ++;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_read(ring_buffer *buffer, u8 *entry, u32 max_bytes)
{
  u16 __retres;
  u32 i;
  if (buffer->current_count == (u32)0) {
    __retres = (u16)4;
    goto return_label;
  }
  i = (u32)0;
  while (i < buffer->entry_size) {
    *(entry + i) = *(buffer->entries + (buffer->position * buffer->entry_size + i));
    i ++;
  }
  (buffer->position) ++;
  ;
  if (buffer->position >= buffer->max_entries) buffer->position -= buffer->max_entries;
  (buffer->current_count) --;
  (buffer->total_entries_read) ++;
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_lookahead_read(ring_buffer *buffer, u32 offset, u8 *entry,
                               u32 max_bytes)
{
  u16 __retres;
  u32 local_position;
  u32 i;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if (buffer->current_count == (u32)0) {
    __retres = (u16)4;
    goto return_label;
  }
  if (max_bytes < buffer->entry_size) {
    __retres = (u16)2;
    goto return_label;
  }
  if (buffer->current_count <= offset) {
    __retres = (u16)1;
    goto return_label;
  }
  local_position = buffer->position + offset;
  if (local_position >= buffer->max_entries) local_position -= buffer->max_entries;
  i = (u32)0;
  while (i < buffer->entry_size) {
    *(entry + i) = *(buffer->entries + (local_position * buffer->entry_size + i));
    i ++;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_read_multi(ring_buffer *buffer, u8 *entry_buff,
                           u32 entry_buff_size, u32 num_requested,
                           u32 *num_read)
{
  u16 __retres;
  u32 i;
  u32 j;
  *num_read = (u32)0;
  if (entry_buff_size < num_requested * buffer->entry_size) {
    __retres = (u16)2;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_requested) {
    if (buffer->current_count == (u32)0) {
      __retres = (u16)4;
      goto return_label;
    }
    j = (u32)0;
    while (j < buffer->entry_size) {
      *(entry_buff + (i * buffer->entry_size + j)) = *(buffer->entries + (
                                                       buffer->position * buffer->entry_size + j));
      j ++;
    }
    (buffer->position) ++;
    ;
    if (buffer->position >= buffer->max_entries) buffer->position -= buffer->max_entries;
    (buffer->current_count) --;
    (buffer->total_entries_read) ++;
    *num_read += (u32)1;
    i ++;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 ring_buffer_lookahead_read_multi(ring_buffer *buffer, u32 offset,
                                     u8 *entry_buff, u32 entry_buff_size,
                                     u32 num_requested, u32 *num_read)
{
  u16 __retres;
  u32 local_position;
  u32 i;
  u32 j;
  *num_read = (u32)0;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if (buffer->current_count == (u32)0) {
    __retres = (u16)4;
    goto return_label;
  }
  if (entry_buff_size < num_requested * buffer->entry_size) {
    __retres = (u16)2;
    goto return_label;
  }
  if (buffer->current_count < offset + num_requested) {
    __retres = (u16)1;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_requested) {
    local_position = (buffer->position + offset) + i;
    if (local_position >= buffer->max_entries) local_position -= buffer->max_entries;
    j = (u32)0;
    while (j < buffer->entry_size) {
      *(entry_buff + (i * buffer->entry_size + j)) = *(buffer->entries + (
                                                       local_position * buffer->entry_size + j));
      j ++;
    }
    *num_read += (u32)1;
    i ++;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

u32 ring_buffer_copy(ring_buffer *to, ring_buffer *from, u32 num_entries)
{
  u32 __retres;
  u32 i;
  u32 j;
  u32 write_pos;
  u32 num_copied = (u32)0;
  if (from->entry_size != to->entry_size) {
    __retres = (u32)0;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_entries) {
    if (from->current_count == (u32)0) {
      __retres = num_copied;
      goto return_label;
    }
    if (to->current_count >= to->max_entries) {
      __retres = num_copied;
      goto return_label;
    }
    write_pos = to->position + to->current_count;
    if (write_pos >= to->max_entries) write_pos -= to->max_entries;
    j = (u32)0;
    while (j < to->entry_size) {
      *(to->entries + (write_pos * to->entry_size + j)) = *(from->entries + (
                                                            from->position * from->entry_size + j));
      j ++;
    }
    (to->current_count) ++;
    (to->total_entries_written) ++;
    (from->position) ++;
    ;
    if (from->position >= from->max_entries) from->position -= from->max_entries;
    (from->current_count) --;
    (from->total_entries_read) ++;
    num_copied ++;
    i ++;
  }
  __retres = num_copied;
  return_label: return __retres;
}

u32 ring_buffer_lookahead_copy(ring_buffer *to, u32 offset,
                               ring_buffer *from, u32 num_entries)
{
  u32 __retres;
  u32 i;
  u32 j;
  u32 write_pos;
  u32 read_pos;
  u32 tmp;
  if (to == (ring_buffer *)0) {
    __retres = (u32)0;
    goto return_label;
  }
  if (from == (ring_buffer *)0) {
    __retres = (u32)0;
    goto return_label;
  }
  if ((int)to->state != 1) {
    __retres = (u32)0;
    goto return_label;
  }
  if ((int)from->state != 1) {
    __retres = (u32)0;
    goto return_label;
  }
  if (from->entry_size != to->entry_size) {
    __retres = (u32)0;
    goto return_label;
  }
  tmp = ring_buffer_count(from);
  ;
  if (num_entries + offset > tmp) {
    __retres = (u32)0;
    goto return_label;
  }
  i = (u32)0;
  while (i < num_entries) {
    if (from->current_count == (u32)0) {
      __retres = i;
      goto return_label;
    }
    if (to->current_count >= to->max_entries) {
      __retres = i;
      goto return_label;
    }
    write_pos = to->position + to->current_count;
    if (write_pos >= to->max_entries) write_pos -= to->max_entries;
    read_pos = (from->position + offset) + i;
    if (read_pos >= from->max_entries) read_pos -= from->max_entries;
    j = (u32)0;
    while (j < to->entry_size) {
      *(to->entries + (write_pos * to->entry_size + j)) = *(from->entries + (
                                                            read_pos * from->entry_size + j));
      j ++;
    }
    (to->current_count) ++;
    (to->total_entries_written) ++;
    i ++;
  }
  __retres = i;
  return_label: return __retres;
}

u16 ring_buffer_consume_entries(ring_buffer *buffer, u32 num_entries)
{
  u16 __retres;
  u32 num_consume;
  if (num_entries > buffer->current_count) num_consume = buffer->current_count;
  else num_consume = num_entries;
  buffer->position += num_consume;
  if (buffer->position >= buffer->max_entries) buffer->position -= buffer->max_entries;
  buffer->current_count -= num_consume;
  buffer->total_entries_read += num_consume;
  __retres = (u16)num_consume;
  return __retres;
}

u16 ring_buffer_malloc_free(ring_buffer *buffer)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->type != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  free((void *)buffer->entries);
  __retres = (u16)0;
  return_label: return __retres;
}

u8 *ring_buffer_get_first_element_ptr(ring_buffer *buffer)
{
  u8 *__retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u8 *)0;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u8 *)0;
    goto return_label;
  }
  if (buffer->current_count == (u32)0) {
    __retres = (u8 *)0;
    goto return_label;
  }
  __retres = buffer->entries + buffer->position * buffer->entry_size;
  return_label: return __retres;
}

u16 ring_buffer_remove_first_element(ring_buffer *buffer)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if (buffer->current_count == (u32)0) {
    __retres = (u16)4;
    goto return_label;
  }
  (buffer->position) ++;
  ;
  if (buffer->position >= buffer->max_entries) buffer->position -= buffer->max_entries;
  (buffer->current_count) --;
  (buffer->total_entries_read) ++;
  __retres = (u16)0;
  return_label: return __retres;
}

u8 *ring_buffer_get_available_element_ptr(ring_buffer *buffer)
{
  u8 *__retres;
  u32 entry_pos;
  if (buffer == (ring_buffer *)0) {
    __retres = (u8 *)0;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u8 *)0;
    goto return_label;
  }
  if (buffer->current_count >= buffer->max_entries) {
    __retres = (u8 *)0;
    goto return_label;
  }
  entry_pos = buffer->position + buffer->current_count;
  if (entry_pos >= buffer->max_entries) entry_pos -= buffer->max_entries;
  __retres = buffer->entries + entry_pos * buffer->entry_size;
  return_label: return __retres;
}

u16 ring_buffer_increment_count(ring_buffer *buffer)
{
  u16 __retres;
  if (buffer == (ring_buffer *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  if ((int)buffer->state != 1) {
    __retres = (u16)1;
    goto return_label;
  }
  if (buffer->current_count >= buffer->max_entries) {
    __retres = (u16)5;
    goto return_label;
  }
  (buffer->current_count) ++;
  (buffer->total_entries_written) ++;
  __retres = (u16)0;
  return_label: return __retres;
}

void __ring_buffer_reset(ring_buffer *buffer)
{
  buffer->state = (u8)0;
  buffer->position = (u32)0;
  buffer->current_count = (u32)0;
  buffer->total_entries_written = (u32)0;
  buffer->total_entries_read = (u32)0;
  buffer->total_overruns = (u32)0;
  return;
}

void byteswap(void *in, void *out, u16 size)
{
  u16 i;
  u8 *byte_ptr_in = (u8 *)in;
  u8 *byte_ptr_out = (u8 *)out;
  if (byte_ptr_in == (u8 *)0) goto return_label;
  if (byte_ptr_out == (u8 *)0) goto return_label;
  i = (u16)0;
  while ((int)i < (int)size) {
    *(byte_ptr_out + i) = *(byte_ptr_in + (((int)size - (int)i) - 1));
    i = (u16)((int)i + 1);
  }
  return_label: return;
}

void byteswap_inplace(void *data, u16 size)
{
  u8 temp;
  u8 *start = (u8 *)data;
  u8 *end = ((u8 *)data + (int)size) - 1;
  while (end > start) {
    temp = *start;
    *start = *end;
    *end = temp;
    start ++;
    end --;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

u16 purge(ComPortHandle comPortHandle)
{
  u16 __retres;
  int tmp;
  tmp = tcflush(comPortHandle,2);
  if (tmp == -1) {
    printf("flush failed\n"); /* printf_va_1 */
    __retres = (u16)1;
    goto return_label;
  }
  __retres = (u16)0;
  return_label: return __retres;
}

static ComPortHandle mip_sdk_port_open_local_port_handle;
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_5(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_6(char const * restrict format);

u16 mip_sdk_port_open(void **port_handle, char const *portstr, int baudrate)
{
  u16 __retres;
  int hardware_bit_baud;
  int status;
  struct termios options;
  u16 tmp;
  u16 tmp_0;
  char port_name[100] = {(char)0};
  strcat(port_name,portstr);
  mip_sdk_port_open_local_port_handle = open((char const *)(port_name),
                                             2 | 0x100); /* __va_open_void */
  if (mip_sdk_port_open_local_port_handle == -1) {
    printf("Unable to open com Port %s\n Errno = %i\n",port_name,__fc_errno); /* printf_va_2 */
    __retres = (u16)1;
    goto return_label;
  }
  switch (baudrate) {
    case 0: hardware_bit_baud = 0000000;
    break;
    case 50: hardware_bit_baud = 0000001;
    break;
    case 75: hardware_bit_baud = 0000002;
    break;
    case 110: hardware_bit_baud = 0000003;
    break;
    case 134: hardware_bit_baud = 0000004;
    break;
    case 150: hardware_bit_baud = 0000005;
    break;
    case 200: hardware_bit_baud = 0000006;
    break;
    case 300: hardware_bit_baud = 0000007;
    break;
    case 600: hardware_bit_baud = 0000010;
    break;
    case 1200: hardware_bit_baud = 0000011;
    break;
    case 1800: hardware_bit_baud = 0000012;
    break;
    case 2400: hardware_bit_baud = 0000013;
    break;
    case 4800: hardware_bit_baud = 0000014;
    break;
    case 9600: hardware_bit_baud = 0000015;
    break;
    case 19200: hardware_bit_baud = 0000016;
    break;
    case 38400: hardware_bit_baud = 0000017;
    break;
    case 57600: hardware_bit_baud = 0010001;
    break;
    case 115200: hardware_bit_baud = 0010002;
    break;
    case 230400: hardware_bit_baud = 0010003;
    break;
    case 460800: hardware_bit_baud = 0010004;
    break;
    case 500000: hardware_bit_baud = 0010005;
    break;
    case 576000: hardware_bit_baud = 0010006;
    break;
    case 921600: hardware_bit_baud = 0010007;
    break;
    case 1000000: hardware_bit_baud = 0010010;
    break;
    case 1152000: hardware_bit_baud = 0010011;
    break;
    case 2000000: hardware_bit_baud = 0010013;
    break;
    case 3000000: hardware_bit_baud = 0010015;
    break;
    case 3500000: hardware_bit_baud = 0010016;
    break;
    case 4000000: hardware_bit_baud = 0010017;
    break;
    default: printf("Unsupported baud specified\n"); /* printf_va_3 */
    __retres = (u16)1;
    goto return_label;
  }
  tcgetattr(mip_sdk_port_open_local_port_handle,& options);
  cfsetospeed(& options,(speed_t)hardware_bit_baud);
  cfsetispeed(& options,(speed_t)hardware_bit_baud);
  options.c_cflag &= (unsigned int)(~ 0000060);
  options.c_cflag |= (unsigned int)0000060;
  options.c_cflag &= (unsigned int)(~ 0000100);
  options.c_cflag &= (unsigned int)(~ 0000400);
  options.c_iflag = (tcflag_t)0000004;
  options.c_oflag = (tcflag_t)0;
  options.c_lflag = (tcflag_t)0;
  options.c_cc[6] = (cc_t)0;
  options.c_cc[5] = (cc_t)1;
  options.c_cflag |= (unsigned int)(0004000 | 0000200);
  tmp = purge(mip_sdk_port_open_local_port_handle);
  if ((int)tmp != 0) {
    printf("Flushing old serial buffer data failed\n"); /* printf_va_4 */
    __retres = (u16)1;
    goto return_label;
  }
  status = tcsetattr(mip_sdk_port_open_local_port_handle,0,& options);
  if (status != 0) {
    printf("Configuring comport failed\n"); /* printf_va_5 */
    __retres = (u16)1;
    goto return_label;
  }
  tmp_0 = purge(mip_sdk_port_open_local_port_handle);
  if ((int)tmp_0 != 0) {
    printf("Post configuration serial buffer flush failed\n"); /* printf_va_6 */
    __retres = (u16)1;
    goto return_label;
  }
  *port_handle = (void *)(& mip_sdk_port_open_local_port_handle);
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_sdk_port_close(void *port_handle)
{
  u16 __retres;
  int local_port_handle = *((int *)port_handle);
  if (port_handle == (void *)0) {
    __retres = (u16)1;
    goto return_label;
  }
  close(local_port_handle);
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_sdk_port_write(void *port_handle, u8 *buffer, u32 num_bytes,
                       u32 *bytes_written, u32 timeout_ms)
{
  u16 __retres;
  int local_port_handle = *((int *)port_handle);
  int local_bytes_written =
    write(local_port_handle,(void const *)buffer,num_bytes);
  if (local_bytes_written == -1) {
    __retres = (u16)1;
    goto return_label;
  }
  *bytes_written = (u32)local_bytes_written;
  if (*bytes_written == num_bytes) {
    __retres = (u16)0;
    goto return_label;
  }
  else {
    __retres = (u16)1;
    goto return_label;
  }
  return_label: return __retres;
}

u16 mip_sdk_port_read(void *port_handle, u8 *buffer, u32 num_bytes,
                      u32 *bytes_read, u32 timeout_ms)
{
  u16 __retres;
  int local_port_handle = *((int *)port_handle);
  int local_bytes_read = read(local_port_handle,(void *)buffer,num_bytes);
  *bytes_read = (u32)local_bytes_read;
  if (*bytes_read == num_bytes) {
    __retres = (u16)0;
    goto return_label;
  }
  else {
    __retres = (u16)1;
    goto return_label;
  }
  return_label: return __retres;
}

u32 mip_sdk_port_read_count(void *port_handle)
{
  u32 __retres;
  int bytes_available;
  int local_port_handle = *((int *)port_handle);
  ioctl(local_port_handle,0x541B,(void *)(& bytes_available)); /* __va_ioctl_ptr */
  __retres = (u32)bytes_available;
  return __retres;
}

u32 mip_sdk_get_time_ms(void)
{
  u32 __retres;
  struct timespec ts;
  int tmp;
  tmp = clock_gettime(1,& ts);
  if (tmp != 0) {
    __retres = (u32)(-1);
    goto return_label;
  }
  __retres = (u32)((long long)ts.tv_sec * 1000ll + (long long)(ts.tv_nsec / (long)1000000));
  return_label: return __retres;
}

void print_header(void);

void print_command_line_usage(void);

void print_packet_stats(void);

void filter_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                            u8 callback_type);

void ahrs_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                          u8 callback_type);

void gps_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                         u8 callback_type);

u16 mip_3dm_cmd_hw_specific_device_status(mip_interface *device_interface_0,
                                          u16 model_number,
                                          u8 status_selector,
                                          u8 *response_buffer);

u16 mip_3dm_cmd_hw_specific_imu_device_status(mip_interface *device_interface_0,
                                              u16 model_number,
                                              u8 status_selector,
                                              u8 *response_buffer);

u8 enable_data_stats_output = (u8)0;
mip_interface device_interface;
u32 filter_valid_packet_count = (u32)0;
u32 ahrs_valid_packet_count = (u32)0;
u32 gps_valid_packet_count = (u32)0;
u32 filter_timeout_packet_count = (u32)0;
u32 ahrs_timeout_packet_count = (u32)0;
u32 gps_timeout_packet_count = (u32)0;
u32 filter_checksum_error_packet_count = (u32)0;
u32 ahrs_checksum_error_packet_count = (u32)0;
u32 gps_checksum_error_packet_count = (u32)0;
mip_ahrs_scaled_gyro curr_ahrs_gyro;
mip_ahrs_scaled_accel curr_ahrs_accel;
mip_ahrs_scaled_mag curr_ahrs_mag;
mip_gps_llh_pos curr_llh_pos;
mip_gps_ned_vel curr_ned_vel;
mip_gps_time curr_gps_time;
mip_filter_llh_pos curr_filter_pos;
mip_filter_ned_velocity curr_filter_vel;
mip_filter_attitude_euler_angles curr_filter_angles;
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_7(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_8(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_9(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_10(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_11(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_12(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_13(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_14(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_15(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_16(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_17(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_18(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_19(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_20(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_21(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_22(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_23(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_24(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_25(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_26(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_27(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_28(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_29(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_30(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_31(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_32(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_33(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_34(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_35(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_36(char const * restrict format, unsigned int param0,
                 unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_37(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_38(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_39(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_40(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_41(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_42(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_43(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_44(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_45(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_46(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_47(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_48(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_49(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_50(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_51(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_52(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_53(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_54(char const * restrict format, unsigned long long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_55(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_56(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_57(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_58(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_59(char const * restrict format, unsigned long long param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_60(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_61(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_62(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_63(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_64(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_65(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_66(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_67(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_68(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_69(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_70(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_71(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_72(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_73(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_74(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_75(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_76(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_77(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_78(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_79(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_80(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_81(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_82(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_83(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_84(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_85(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_86(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_87(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_88(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_89(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_90(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_91(char const * restrict format, double param0, double param1,
                 double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_92(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_93(char const * restrict format, double param0, double param1,
                 double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_94(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_95(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_96(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_97(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_98(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_99(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_100(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_101(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_102(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_103(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_104(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_105(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_106(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_107(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_108(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_109(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_110(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_111(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_112(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_113(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_114(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_115(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_116(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_117(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_118(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_119(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_120(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_121(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_122(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_123(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param8),
            (indirect: param7), (indirect: param6), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param8, param7, param6, param5, param4, param3, param2, param1,
            param0;
 */
int printf_va_124(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6, double param7, double param8);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param8),
            (indirect: param7), (indirect: param6), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param8, param7, param6, param5, param4, param3, param2, param1,
            param0;
 */
int printf_va_125(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6, double param7, double param8);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_126(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_127(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_128(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_129(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_130(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_131(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_132(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_133(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_134(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_135(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_136(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_137(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_138(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_139(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_140(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_141(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_142(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_143(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_144(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_145(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_146(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_147(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_148(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_149(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_150(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_151(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_152(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_153(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_154(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_155(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_156(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_157(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_158(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_159(char const * restrict format, int param0, int param1,
                  int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_160(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_161(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_162(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_163(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_164(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_165(char const * restrict format, unsigned int param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_166(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_167(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_168(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_169(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_170(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_171(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_172(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_173(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_174(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_175(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_176(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_177(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_178(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_179(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_180(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_181(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_182(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_183(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_184(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_185(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_186(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_187(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_188(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_189(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_190(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_191(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_192(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_193(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_194(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_195(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_196(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_197(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_198(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_199(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_200(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_201(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_202(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_203(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_204(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_205(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_206(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_207(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_208(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_209(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_210(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_211(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_212(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_213(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_214(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_215(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_216(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_217(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_218(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_219(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_220(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_221(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_222(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_223(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_224(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_225(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_226(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_227(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_228(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_229(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_230(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_231(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_232(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param8),
            (indirect: param7), (indirect: param6), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param8, param7, param6, param5, param4, param3, param2, param1,
            param0;
 */
int printf_va_233(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6, double param7, double param8);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param8),
            (indirect: param7), (indirect: param6), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param8, param7, param6, param5, param4, param3, param2, param1,
            param0;
 */
int printf_va_234(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6, double param7, double param8);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_235(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_236(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_237(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_238(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_239(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_240(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_241(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_242(char const * restrict format, int param0, int param1,
                  double param2, double param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_243(char const * restrict format, int param0, int param1,
                  double param2, double param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_244(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_245(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_246(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_247(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_248(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_249(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_250(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_251(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_252(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_253(char const * restrict format, unsigned long long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_254(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_255(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_256(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_257(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_258(char const * restrict format, unsigned long long param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_259(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_260(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_261(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_262(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_263(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_264(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_265(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_266(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_267(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_268(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_269(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_270(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_271(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_272(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_273(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_274(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_275(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_276(char const * restrict format, unsigned int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_277(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_278(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_279(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_280(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_281(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_282(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_283(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_284(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_285(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_286(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_287(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_288(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_289(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_290(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_291(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_292(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_293(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_294(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_295(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_296(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_297(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_298(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_299(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_300(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_301(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_302(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_303(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_304(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_305(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_306(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_307(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_308(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_309(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_310(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_311(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_312(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_313(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_314(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_315(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_316(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_317(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_318(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_319(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_320(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_321(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_322(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_323(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_324(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_325(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_326(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_327(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_328(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_329(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_330(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_331(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_332(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_333(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_334(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_335(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_336(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_337(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_338(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_339(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_340(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_341(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_342(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_343(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_344(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_345(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_346(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_347(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_348(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_349(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_350(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_351(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_352(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_353(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_354(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_355(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_356(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_357(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_358(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_359(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_360(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_361(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_362(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_363(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_364(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_365(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_366(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_367(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_368(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_369(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_370(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_371(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_372(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_373(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_374(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_375(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_376(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_377(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_378(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_379(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_380(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_381(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_382(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_383(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_384(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_385(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_386(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_387(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_388(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_389(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_390(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_391(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_392(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_393(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_394(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_395(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_396(char const * restrict format, double param0, double param1,
                  double param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_397(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_398(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_399(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_400(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_401(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_402(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_403(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, param3, param2, param1, param0;
 */
int printf_va_404(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, param3, param2, param1, param0;
 */
int printf_va_405(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_406(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_407(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_408(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_409(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_410(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_411(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_412(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, param3, param2, param1, param0;
 */
int printf_va_413(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, param3, param2, param1, param0;
 */
int printf_va_414(char const * restrict format, double param0, double param1,
                  double param2, double param3, double param4, double param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_415(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_416(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_417(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_418(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_419(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_420(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_421(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_422(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_423(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_424(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_425(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_426(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_427(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_428(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_429(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_430(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_431(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_432(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_433(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_434(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_435(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_436(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_437(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_438(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_439(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_440(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_441(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_442(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_443(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_444(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_445(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_446(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_447(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_448(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_449(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_450(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_451(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_452(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_453(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_454(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_455(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_456(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_457(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_458(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_459(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_460(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_461(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_462(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_463(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_464(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_465(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_466(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_467(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_468(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_469(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_470(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_471(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_472(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param6),
            (indirect: param5), (indirect: param4), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param6, param5, param4, param3, param2, param1, param0;
 */
int printf_va_473(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param6),
            (indirect: param5), (indirect: param4), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param6, param5, param4, param3, param2, param1, param0;
 */
int printf_va_474(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_475(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_476(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_477(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_478(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_479(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_480(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_481(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param6),
            (indirect: param5), (indirect: param4), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param6, param5, param4, param3, param2, param1, param0;
 */
int printf_va_482(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param6),
            (indirect: param5), (indirect: param4), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param6, param5, param4, param3, param2, param1, param0;
 */
int printf_va_483(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4, double param5,
                  double param6);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_484(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_485(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_486(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_487(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_488(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_489(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_490(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, param0;
 */
int printf_va_491(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, param0;
 */
int printf_va_492(char const * restrict format, int param0, double param1,
                  double param2, double param3, double param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_493(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_494(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_495(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_496(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_497(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_498(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_499(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_500(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_501(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_502(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_503(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_504(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_505(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_506(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_507(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_508(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_509(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_510(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_511(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_512(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_513(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_514(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_515(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_516(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_517(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_518(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_519(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_520(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_521(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_522(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_523(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_524(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_525(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_526(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_527(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_528(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_529(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_530(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_531(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_532(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_533(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_534(char const * restrict format);

int main(int argc, char **argv)
{
  int __retres;
  u32 baudrate;
  base_device_info_field device_info;
  u32 bit_result;
  u8 data_stream_format_descriptors[10];
  u16 data_stream_format_decimation[10];
  s16 i;
  u16 j;
  mip_low_pass_filter_settings filter_settings;
  gx4_imu_diagnostic_device_status_field imu_diagnostic_field;
  gx4_imu_basic_status_field imu_basic_field;
  gx4_45_diagnostic_device_status_field diagnostic_field;
  gx4_45_basic_status_field basic_field;
  mip_filter_external_gps_update_command external_gps_update;
  mip_filter_external_heading_update_command external_heading_update;
  mip_filter_zero_update_command zero_update_control;
  mip_filter_zero_update_command zero_update_readback;
  mip_filter_external_heading_with_time_command external_heading_with_time;
  mip_complementary_filter_settings comp_filter_command;
  mip_complementary_filter_settings comp_filter_readback;
  u8 declination_source_command;
  u8 declination_source_readback;
  mip_filter_accel_magnitude_error_adaptive_measurement_command accel_magnitude_error_command;
  mip_filter_accel_magnitude_error_adaptive_measurement_command accel_magnitude_error_readback;
  mip_filter_magnetometer_magnitude_error_adaptive_measurement_command mag_magnitude_error_command;
  mip_filter_magnetometer_magnitude_error_adaptive_measurement_command mag_magnitude_error_readback;
  mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command mag_dip_angle_error_command;
  mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command mag_dip_angle_error_readback;
  int tmp;
  u16 tmp_0;
  u8 temp_string[22] = {(u8)0};
  u8 enable = (u8)1;
  u8 data_stream_format_num_entries = (u8)0;
  u8 readback_data_stream_format_descriptors[10] = {(u8)0};
  u16 readback_data_stream_format_decimation[10] = {(u16)0};
  u8 readback_data_stream_format_num_entries = (u8)0;
  u16 base_rate = (u16)0;
  u16 device_descriptors[128] = {(u16)0};
  u16 device_descriptors_size = (u16)(128 * 2);
  u8 com_mode = (u8)0;
  u8 readback_com_mode = (u8)0;
  float angles[3] = {(float)0};
  float readback_angles[3] = {(float)0};
  float offset[3] = {(float)0};
  float readback_offset[3] = {(float)0};
  float hard_iron[3] = {(float)0};
  float hard_iron_readback[3] = {(float)0};
  float soft_iron[9] = {(float)0};
  float soft_iron_readback[9] = {(float)0};
  u8 dynamics_mode = (u8)0;
  u8 readback_dynamics_mode = (u8)0;
  u16 estimation_control = (u16)0;
  u16 estimation_control_readback = (u16)0;
  u8 gps_source = (u8)0;
  u8 heading_source = (u8)0;
  u8 auto_init = (u8)0;
  float noise[3] = {(float)0};
  float readback_noise[3] = {(float)0};
  float beta[3] = {(float)0};
  float readback_beta[3] = {(float)0};
  float bias_vector[3] = {(float)0};
  u16 duration = (u16)0;
  if (argc != 3) {
    print_command_line_usage();
    __retres = -1;
    goto return_label;
  }
  char *com_port = *(argv + 1);
  tmp = atoi((char const *)*(argv + 2));
  baudrate = (u32)tmp;
  tmp_0 = mip_interface_init((char const *)com_port,baudrate,
                             & device_interface,(u32)1000);
  if ((int)tmp_0 != 0) {
    __retres = -1;
    goto return_label;
  }
  com_mode = (u8)0x02;
  printf("----------------------------------------------------------------------\n"); /* printf_va_7 */
  printf("Attempting to set communications mode to IMU Direct mode\n"); /* printf_va_8 */
  printf("----------------------------------------------------------------------\n\n"); /* printf_va_9 */
  while (1) {
    u16 tmp_1;
    tmp_1 = mip_system_com_mode(& device_interface,(u8)0x01,& com_mode);
    if (! ((int)tmp_1 != 0)) break;
  }
  while (1) {
    u16 tmp_2;
    tmp_2 = mip_system_com_mode(& device_interface,(u8)0x02,& com_mode);
    if (! ((int)tmp_2 != 0)) break;
  }
  if ((int)com_mode == 0x02) {
    char const *tmp_10;
    char const *tmp_12;
    char const *tmp_13;
    char const *tmp_14;
    char const *tmp_15;
    char const *tmp_16;
    char const *tmp_19;
    char const *tmp_22;
    int tmp_32;
    int tmp_38;
    printf("Communications mode IMU Direct.\n"); /* printf_va_10 */
    printf("\n\n"); /* printf_va_11 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_12 */
    printf("Idling Device\n"); /* printf_va_13 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_14 */
    while (1) {
      u16 tmp_3;
      tmp_3 = mip_base_cmd_idle(& device_interface);
      if (! ((int)tmp_3 != 0)) break;
    }
    printf("\n\n"); /* printf_va_15 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_16 */
    printf("Pinging Device\n"); /* printf_va_17 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_18 */
    while (1) {
      u16 tmp_4;
      tmp_4 = mip_base_cmd_ping(& device_interface);
      if (! ((int)tmp_4 != 0)) break;
    }
    printf("\n\n"); /* printf_va_19 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_20 */
    printf("Getting Device Information\n"); /* printf_va_21 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_22 */
    while (1) {
      u16 tmp_5;
      tmp_5 = mip_base_cmd_get_device_info(& device_interface,& device_info);
      if (! ((int)tmp_5 != 0)) break;
    }
    printf("\n\nDevice Info:\n"); /* printf_va_23 */
    printf("---------------------------------------------\n"); /* printf_va_24 */
    memcpy((void *)(temp_string),(void const *)(device_info.model_name),
           (size_t)(8 * 2));
    printf("Model Name       => %s\n",(char *)(temp_string)); /* printf_va_25 */
    memcpy((void *)(temp_string),(void const *)(device_info.model_number),
           (size_t)(8 * 2));
    printf("Model Number     => %s\n",(char *)(temp_string)); /* printf_va_26 */
    memcpy((void *)(temp_string),(void const *)(device_info.serial_number),
           (size_t)(8 * 2));
    printf("Serial Number    => %s\n",(char *)(temp_string)); /* printf_va_27 */
    memcpy((void *)(temp_string),(void const *)(device_info.lotnumber),
           (size_t)(8 * 2));
    printf("Lot Number       => %s\n",(char *)(temp_string)); /* printf_va_28 */
    memcpy((void *)(temp_string),(void const *)(device_info.device_options),
           (size_t)(8 * 2));
    printf("Options          => %s\n",(char *)(temp_string)); /* printf_va_29 */
    printf("Firmware Version => %d.%d.%.2d\n\n",
           (int)device_info.firmware_version / 1000,
           ((int)device_info.firmware_version % 1000) / 100,
           (int)device_info.firmware_version % 100); /* printf_va_30 */
    printf("\n\n"); /* printf_va_31 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_32 */
    printf("Getting Supported descriptors\n"); /* printf_va_33 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_34 */
    while (1) {
      u16 tmp_6;
      tmp_6 = mip_base_cmd_get_device_supported_descriptors(& device_interface,
                                                            (u8 *)(device_descriptors),
                                                            & device_descriptors_size);
      if (! ((int)tmp_6 != 0)) break;
    }
    printf("\n\nSupported descriptors:\n\n"); /* printf_va_35 */
    i = (s16)0;
    while ((int)i < (int)device_descriptors_size / 2) {
      printf("Descriptor Set: %02x, Descriptor: %02x\n",
             (unsigned int)((int)device_descriptors[i] >> 8),
             (unsigned int)((int)device_descriptors[i] & 0xFF)); /* printf_va_36 */
      usleep((useconds_t)((double)100 * 1000.0));
      i = (s16)((int)i + 1);
    }
    printf("\n\n"); /* printf_va_37 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_38 */
    printf("Running Built In Test\n"); /* printf_va_39 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_40 */
    while (1) {
      u16 tmp_7;
      tmp_7 = mip_base_cmd_built_in_test(& device_interface,& bit_result);
      if (! ((int)tmp_7 != 0)) break;
    }
    printf("\nBIT Result (should be 0x00000000) => 0x%08x\n\n",bit_result); /* printf_va_41 */
    printf("\n\n"); /* printf_va_42 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_43 */
    printf("Getting the AHRS datastream base rate\n"); /* printf_va_44 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_45 */
    while (1) {
      u16 tmp_8;
      tmp_8 = mip_3dm_cmd_get_ahrs_base_rate(& device_interface,& base_rate);
      if (! ((int)tmp_8 != 0)) break;
    }
    printf("\nAHRS Base Rate => %d Hz\n\n",(int)base_rate); /* printf_va_46 */
    printf("\n\n"); /* printf_va_47 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_48 */
    printf("Requesting BASIC Status Report:\n"); /* printf_va_49 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_50 */
    while (1) {
      u16 tmp_9;
      tmp_9 = mip_3dm_cmd_hw_specific_imu_device_status(& device_interface,
                                                        (u16)6237,(u8)1,
                                                        (u8 *)(& imu_basic_field));
      if (! ((int)tmp_9 != 0)) break;
    }
    printf("Model Number: \t\t\t\t\t%04u\n",
           (unsigned int)((int)imu_basic_field.device_model)); /* printf_va_51 */
    if ((int)imu_basic_field.status_selector == 1) tmp_10 = "Basic Status Report";
    else tmp_10 = "Diagnostic Status Report";
    printf("Status Selector: \t\t\t\t%s\n",(char *)tmp_10); /* printf_va_52 */
    printf("Status Flags: \t\t\t\t\t0x%08x\n",imu_basic_field.status_flags); /* printf_va_53 */
    printf("System Millisecond Timer Count: \t\t%llu ms\n\n",
           (unsigned long long)imu_basic_field.system_timer_ms); /* printf_va_54 */
    printf("Requesting DIAGNOSTIC Status Report:\n"); /* printf_va_55 */
    while (1) {
      u16 tmp_11;
      tmp_11 = mip_3dm_cmd_hw_specific_imu_device_status(& device_interface,
                                                         (u16)6237,(u8)2,
                                                         (u8 *)(& imu_diagnostic_field));
      if (! ((int)tmp_11 != 0)) break;
    }
    printf("Model Number: \t\t\t\t\t%04u\n",
           (unsigned int)((int)imu_diagnostic_field.device_model)); /* printf_va_56 */
    if ((int)imu_diagnostic_field.status_selector == 1) tmp_12 = "Basic Status Report";
    else tmp_12 = "Diagnostic Status Report";
    printf("Status Selector: \t\t\t\t%s\n",(char *)tmp_12); /* printf_va_57 */
    printf("Status Flags: \t\t\t\t\t0x%08x\n",
           imu_diagnostic_field.status_flags); /* printf_va_58 */
    printf("System Millisecond Timer Count: \t\t%llu ms\n",
           (unsigned long long)imu_diagnostic_field.system_timer_ms); /* printf_va_59 */
    if ((int)imu_diagnostic_field.has_mag == 1) tmp_13 = "DETECTED";
    else tmp_13 = "NOT-DETECTED";
    printf("Magnetometer: \t\t\t\t\t%s\n",(char *)tmp_13); /* printf_va_60 */
    if ((int)imu_diagnostic_field.has_pressure == 1) tmp_14 = "DETECTED";
    else tmp_14 = "NOT-DETECTED";
    printf("Pressure Sensor: \t\t\t\t%s\n",(char *)tmp_14); /* printf_va_61 */
    printf("Gyro Range Reported: \t\t\t\t%u deg/s\n",
           (unsigned int)((int)imu_diagnostic_field.gyro_range)); /* printf_va_62 */
    printf("Accel Range Reported: \t\t\t\t%u G\n",
           (unsigned int)((int)imu_diagnostic_field.accel_range)); /* printf_va_63 */
    printf("Magnetometer Range Reported: \t\t\t%f Gs\n",
           (double)imu_diagnostic_field.mag_range); /* printf_va_64 */
    printf("Pressure Range Reported: \t\t\t%f hPa\n",
           (double)imu_diagnostic_field.pressure_range); /* printf_va_65 */
    printf("Measured Internal Temperature: \t\t\t%f degrees C\n",
           (double)imu_diagnostic_field.temp_degc); /* printf_va_66 */
    printf("Last Temperature Measured: \t\t\t%u ms\n",
           imu_diagnostic_field.last_temp_read_ms); /* printf_va_67 */
    if ((int)imu_diagnostic_field.temp_sensor_error == 1) tmp_15 = "TRUE";
    else tmp_15 = "FALSE";
    printf("Bad Temperature Sensor Detected: \t\t%s\n",(char *)tmp_15); /* printf_va_68 */
    printf("Number Received GPS Pulse-Per-Second Pulses: \t%u Pulses\n",
           imu_diagnostic_field.num_gps_pps_triggers); /* printf_va_69 */
    printf("Time of Last GPS Pulse-Per-Second Pulse: \t%u ms\n",
           imu_diagnostic_field.last_gps_pps_trigger_ms); /* printf_va_70 */
    if ((int)imu_diagnostic_field.stream_enabled == 1) tmp_16 = "TRUE";
    else tmp_16 = "FALSE";
    printf("Data Streaming Enabled: \t\t\t%s\n",(char *)tmp_16); /* printf_va_71 */
    printf("Number of Dropped Communication Packets: \t%u packets\n",
           imu_diagnostic_field.dropped_packets); /* printf_va_72 */
    printf("Communications Port Bytes Written: \t\t%u Bytes\n",
           imu_diagnostic_field.com_port_bytes_written); /* printf_va_73 */
    printf("Communications Port Bytes Read: \t\t%u Bytes\n",
           imu_diagnostic_field.com_port_bytes_read); /* printf_va_74 */
    printf("Communications Port Write Overruns: \t\t%u Bytes\n",
           imu_diagnostic_field.com_port_write_overruns); /* printf_va_75 */
    printf("Communications Port Read Overruns: \t\t%u Bytes\n",
           imu_diagnostic_field.com_port_read_overruns); /* printf_va_76 */
    printf("\n\n"); /* printf_va_77 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_78 */
    printf("Disabling Coning and Sculling compensation\n"); /* printf_va_79 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_80 */
    enable = (u8)0x00;
    while (1) {
      u16 tmp_17;
      tmp_17 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x01,& enable);
      if (! ((int)tmp_17 != 0)) break;
    }
    printf("Reading Coning and Sculling compensation enabled state:\n"); /* printf_va_81 */
    while (1) {
      u16 tmp_18;
      tmp_18 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x02,& enable);
      if (! ((int)tmp_18 != 0)) break;
    }
    if ((int)enable == 0x00) tmp_19 = "DISABLED"; else tmp_19 = "ENABLED";
    printf("%s\n\n",(char *)tmp_19); /* printf_va_82 */
    printf("Enabling Coning and Sculling compensation.\n"); /* printf_va_83 */
    enable = (u8)0x01;
    while (1) {
      u16 tmp_20;
      tmp_20 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x01,& enable);
      if (! ((int)tmp_20 != 0)) break;
    }
    printf("Reading Coning and Sculling compensation enabled state:\n"); /* printf_va_84 */
    while (1) {
      u16 tmp_21;
      tmp_21 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x02,& enable);
      if (! ((int)tmp_21 != 0)) break;
    }
    if ((int)enable == 0x00) tmp_22 = "DISABLED"; else tmp_22 = "ENABLED";
    printf("%s\n\n",(char *)tmp_22); /* printf_va_85 */
    printf("\n\n"); /* printf_va_86 */
    usleep((useconds_t)((double)1500 * 1000.0));
    bias_vector[0] = 1.0f;
    bias_vector[1] = 2.0f;
    bias_vector[2] = 3.0f;
    printf("----------------------------------------------------------------------\n"); /* printf_va_87 */
    printf("Accel Bias Vector\n"); /* printf_va_88 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_89 */
    printf("Setting Accel Bias Vector:\n"); /* printf_va_90 */
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_91 */
    while (1) {
      u16 tmp_23;
      tmp_23 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x01,
                                      bias_vector);
      if (! ((int)tmp_23 != 0)) break;
    }
    memset((void *)(bias_vector),0,(unsigned int)3 * sizeof(float));
    printf("Reading current Accel Bias Vector:\n"); /* printf_va_92 */
    while (1) {
      u16 tmp_24;
      tmp_24 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x02,
                                      bias_vector);
      if (! ((int)tmp_24 != 0)) break;
    }
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_93 */
    printf("Resetting Accel Bias to default state.\n\n"); /* printf_va_94 */
    while (1) {
      u16 tmp_25;
      tmp_25 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_25 != 0)) break;
    }
    printf("\n\n"); /* printf_va_95 */
    usleep((useconds_t)((double)1500 * 1000.0));
    bias_vector[0] = 4.0f;
    bias_vector[1] = 5.0f;
    bias_vector[2] = 6.0f;
    printf("----------------------------------------------------------------------\n"); /* printf_va_96 */
    printf("Gyro Bias Vector\n"); /* printf_va_97 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_98 */
    printf("Setting Gyro Bias Vector:\n"); /* printf_va_99 */
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_100 */
    while (1) {
      u16 tmp_26;
      tmp_26 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x01,bias_vector);
      if (! ((int)tmp_26 != 0)) break;
    }
    memset((void *)(bias_vector),0,(unsigned int)3 * sizeof(float));
    printf("Reading current Gyro Bias Vector:\n"); /* printf_va_101 */
    while (1) {
      u16 tmp_27;
      tmp_27 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x02,bias_vector);
      if (! ((int)tmp_27 != 0)) break;
    }
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_102 */
    printf("Resetting Gyro Bias to default state.\n\n"); /* printf_va_103 */
    while (1) {
      u16 tmp_28;
      tmp_28 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_28 != 0)) break;
    }
    printf("\n\n"); /* printf_va_104 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_105 */
    printf("Performing Gyro Bias capture.\nPlease keep device stationary during the 5 second gyro bias capture interval\n"); /* printf_va_106 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_107 */
    duration = (u16)5000;
    while (1) {
      u16 tmp_29;
      tmp_29 = mip_3dm_cmd_capture_gyro_bias(& device_interface,duration,
                                             bias_vector);
      if (! ((int)tmp_29 != 0)) break;
    }
    printf("Gyro Bias Captured:\nbias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_108 */
    printf("\n\n"); /* printf_va_109 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_110 */
    printf("Setting the hard iron offset values\n"); /* printf_va_111 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_112 */
    hard_iron[0] = (float)1.0;
    hard_iron[1] = (float)2.0;
    hard_iron[2] = (float)3.0;
    while (1) {
      u16 tmp_30;
      tmp_30 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x01,hard_iron);
      if (! ((int)tmp_30 != 0)) break;
    }
    while (1) {
      u16 tmp_31;
      tmp_31 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x02,
                                     hard_iron_readback);
      if (! ((int)tmp_31 != 0)) break;
    }
    tmp_32 = abs((int)(hard_iron_readback[0] - hard_iron[0]));
    if ((double)tmp_32 < 0.001) {
      int tmp_33;
      tmp_33 = abs((int)(hard_iron_readback[1] - hard_iron[1]));
      if ((double)tmp_33 < 0.001) {
        int tmp_34;
        tmp_34 = abs((int)(hard_iron_readback[2] - hard_iron[2]));
        if ((double)tmp_34 < 0.001) printf("Hard iron offset values successfully set.\n"); /* printf_va_113 */
        else goto _LAND_0;
      }
      else goto _LAND_0;
    }
    else {
      _LAND_0:
      {
        printf("ERROR: Failed to set hard iron offset values!!!\n"); /* printf_va_114 */
        printf("Sent values:     %f X %f Y %f Z\n",(double)hard_iron[0],
               (double)hard_iron[1],(double)hard_iron[2]); /* printf_va_115 */
        printf("Returned values: %f X %f Y %f Z\n",
               (double)hard_iron_readback[0],(double)hard_iron_readback[1],
               (double)hard_iron_readback[2]); /* printf_va_116 */
      }
    }
    printf("\n\nLoading the default hard iron offset values.\n\n"); /* printf_va_117 */
    while (1) {
      u16 tmp_35;
      tmp_35 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_35 != 0)) break;
    }
    printf("\n\n"); /* printf_va_118 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_119 */
    printf("Setting the soft iron matrix values\n"); /* printf_va_120 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_121 */
    i = (s16)0;
    while ((int)i < 9) {
      soft_iron[i] = (float)i;
      i = (s16)((int)i + 1);
    }
    while (1) {
      u16 tmp_36;
      tmp_36 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x01,soft_iron);
      if (! ((int)tmp_36 != 0)) break;
    }
    while (1) {
      u16 tmp_37;
      tmp_37 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x02,
                                     soft_iron_readback);
      if (! ((int)tmp_37 != 0)) break;
    }
    tmp_38 = abs((int)(soft_iron_readback[0] - soft_iron[0]));
    if ((double)tmp_38 < 0.001) {
      int tmp_39;
      tmp_39 = abs((int)(soft_iron_readback[1] - soft_iron[1]));
      if ((double)tmp_39 < 0.001) {
        int tmp_40;
        tmp_40 = abs((int)(soft_iron_readback[2] - soft_iron[2]));
        if ((double)tmp_40 < 0.001) {
          int tmp_41;
          tmp_41 = abs((int)(soft_iron_readback[3] - soft_iron[3]));
          if ((double)tmp_41 < 0.001) {
            int tmp_42;
            tmp_42 = abs((int)(soft_iron_readback[4] - soft_iron[4]));
            if ((double)tmp_42 < 0.001) {
              int tmp_43;
              tmp_43 = abs((int)(soft_iron_readback[5] - soft_iron[5]));
              if ((double)tmp_43 < 0.001) {
                int tmp_44;
                tmp_44 = abs((int)(soft_iron_readback[6] - soft_iron[6]));
                if ((double)tmp_44 < 0.001) {
                  int tmp_45;
                  tmp_45 = abs((int)(soft_iron_readback[7] - soft_iron[7]));
                  if ((double)tmp_45 < 0.001) {
                    int tmp_46;
                    tmp_46 = abs((int)(soft_iron_readback[8] - soft_iron[8]));
                    if ((double)tmp_46 < 0.001) printf("Soft iron matrix values successfully set.\n"); /* printf_va_122 */
                    else goto _LAND_8;
                  }
                  else goto _LAND_8;
                }
                else goto _LAND_8;
              }
              else goto _LAND_8;
            }
            else goto _LAND_8;
          }
          else goto _LAND_8;
        }
        else goto _LAND_8;
      }
      else goto _LAND_8;
    }
    else {
      _LAND_8:
      {
        printf("ERROR: Failed to set hard iron values!!!\n"); /* printf_va_123 */
        printf("Sent values:     [%f  %f  %f][%f  %f  %f][%f  %f  %f]\n",
               (double)soft_iron[0],(double)soft_iron[1],
               (double)soft_iron[2],(double)soft_iron[3],
               (double)soft_iron[4],(double)soft_iron[5],
               (double)soft_iron[6],(double)soft_iron[7],
               (double)soft_iron[8]); /* printf_va_124 */
        printf("Returned values: [%f  %f  %f][%f  %f  %f][%f  %f  %f]\n",
               (double)soft_iron_readback[0],(double)soft_iron_readback[1],
               (double)soft_iron_readback[2],(double)soft_iron_readback[3],
               (double)soft_iron_readback[4],(double)soft_iron_readback[5],
               (double)soft_iron_readback[6],(double)soft_iron_readback[7],
               (double)soft_iron_readback[8]); /* printf_va_125 */
      }
    }
    printf("\n\nLoading the default soft iron matrix values.\n\n"); /* printf_va_126 */
    while (1) {
      u16 tmp_47;
      tmp_47 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_47 != 0)) break;
    }
    printf("\n\n"); /* printf_va_127 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_128 */
    printf("Setting the AHRS message format\n"); /* printf_va_129 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_130 */
    data_stream_format_descriptors[0] = (u8)0x04;
    data_stream_format_descriptors[1] = (u8)0x05;
    data_stream_format_decimation[0] = (u16)0x64;
    data_stream_format_decimation[1] = (u16)0x64;
    data_stream_format_num_entries = (u8)2;
    while (1) {
      u16 tmp_48;
      tmp_48 = mip_3dm_cmd_ahrs_message_format(& device_interface,(u8)0x01,
                                               & data_stream_format_num_entries,
                                               data_stream_format_descriptors,
                                               data_stream_format_decimation);
      if (! ((int)tmp_48 != 0)) break;
    }
    printf("\n\n"); /* printf_va_131 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_132 */
    printf("Polling AHRS Data.\n"); /* printf_va_133 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_134 */
    while (1) {
      u16 tmp_49;
      tmp_49 = mip_3dm_cmd_poll_ahrs(& device_interface,(u8)0x00,
                                     data_stream_format_num_entries,
                                     data_stream_format_descriptors);
      if (! ((int)tmp_49 != 0)) break;
    }
  }
  else printf("ERROR: IMU_Direct mode not established\n\n"); /* printf_va_135 */
  printf("\n\n"); /* printf_va_136 */
  usleep((useconds_t)((double)1500 * 1000.0));
  device_descriptors_size = (u16)(128 * 2);
  com_mode = (u8)0x01;
  printf("----------------------------------------------------------------------\n"); /* printf_va_137 */
  printf("Putting Device Into Standard Mode\n"); /* printf_va_138 */
  printf("----------------------------------------------------------------------\n\n"); /* printf_va_139 */
  while (1) {
    u16 tmp_50;
    tmp_50 = mip_system_com_mode(& device_interface,(u8)0x01,& com_mode);
    if (! ((int)tmp_50 != 0)) break;
  }
  while (1) {
    u16 tmp_51;
    tmp_51 = mip_system_com_mode(& device_interface,(u8)0x02,& com_mode);
    if (! ((int)tmp_51 != 0)) break;
  }
  printf("\n\n"); /* printf_va_140 */
  usleep((useconds_t)((double)1500 * 1000.0));
  if ((int)com_mode == 0x01) {
    char const *tmp_62;
    char const *tmp_65;
    int tmp_75;
    int tmp_81;
    char const *tmp_97;
    char const *tmp_99;
    char const *tmp_100;
    char const *tmp_101;
    char const *tmp_102;
    int tmp_113;
    int tmp_119;
    int tmp_125;
    int tmp_148;
    int tmp_154;
    int tmp_160;
    int tmp_166;
    int tmp_175;
    u16 tmp_224;
    u16 tmp_225;
    u16 tmp_226;
    printf("----------------------------------------------------------------------\n"); /* printf_va_141 */
    printf("Idling Device\n"); /* printf_va_142 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_143 */
    while (1) {
      u16 tmp_52;
      tmp_52 = mip_base_cmd_idle(& device_interface);
      if (! ((int)tmp_52 != 0)) break;
    }
    printf("\n\n"); /* printf_va_144 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_145 */
    printf("Pinging Device\n"); /* printf_va_146 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_147 */
    while (1) {
      u16 tmp_53;
      tmp_53 = mip_base_cmd_ping(& device_interface);
      if (! ((int)tmp_53 != 0)) break;
    }
    printf("\n\n"); /* printf_va_148 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_149 */
    printf("Getting Device Information\n"); /* printf_va_150 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_151 */
    while (1) {
      u16 tmp_54;
      tmp_54 = mip_base_cmd_get_device_info(& device_interface,& device_info);
      if (! ((int)tmp_54 != 0)) break;
    }
    printf("Device Info:\n"); /* printf_va_152 */
    printf("---------------------------------------------\n"); /* printf_va_153 */
    memcpy((void *)(temp_string),(void const *)(device_info.model_name),
           (size_t)(8 * 2));
    printf("Model Name       => %s\n",(char *)(temp_string)); /* printf_va_154 */
    memcpy((void *)(temp_string),(void const *)(device_info.model_number),
           (size_t)(8 * 2));
    printf("Model Number     => %s\n",(char *)(temp_string)); /* printf_va_155 */
    memcpy((void *)(temp_string),(void const *)(device_info.serial_number),
           (size_t)(8 * 2));
    printf("Serial Number    => %s\n",(char *)(temp_string)); /* printf_va_156 */
    memcpy((void *)(temp_string),(void const *)(device_info.lotnumber),
           (size_t)(8 * 2));
    printf("Lot Number       => %s\n",(char *)(temp_string)); /* printf_va_157 */
    memcpy((void *)(temp_string),(void const *)(device_info.device_options),
           (size_t)(8 * 2));
    printf("Options          => %s\n",(char *)(temp_string)); /* printf_va_158 */
    printf("Firmware Version => %d.%d.%.2d\n\n",
           (int)device_info.firmware_version / 1000,
           ((int)device_info.firmware_version % 1000) / 100,
           (int)device_info.firmware_version % 100); /* printf_va_159 */
    printf("\n\n"); /* printf_va_160 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_161 */
    printf("Getting Supported descriptors\n"); /* printf_va_162 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_163 */
    while (1) {
      u16 tmp_55;
      tmp_55 = mip_base_cmd_get_device_supported_descriptors(& device_interface,
                                                             (u8 *)(device_descriptors),
                                                             & device_descriptors_size);
      if (! ((int)tmp_55 != 0)) break;
    }
    printf("\n\nSupported descriptors:\n\n"); /* printf_va_164 */
    i = (s16)0;
    while ((int)i < (int)device_descriptors_size / 2) {
      printf("Descriptor Set: %02x, Descriptor: %02x\n",
             (unsigned int)((int)device_descriptors[i] >> 8),
             (unsigned int)((int)device_descriptors[i] & 0xFF)); /* printf_va_165 */
      usleep((useconds_t)((double)100 * 1000.0));
      i = (s16)((int)i + 1);
    }
    printf("\n\n"); /* printf_va_166 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_167 */
    printf("Running Built In Test\n"); /* printf_va_168 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_169 */
    while (1) {
      u16 tmp_56;
      tmp_56 = mip_base_cmd_built_in_test(& device_interface,& bit_result);
      if (! ((int)tmp_56 != 0)) break;
    }
    printf("\nBIT Result (should be 0x00000000) => 0x%08x\n\n",bit_result); /* printf_va_170 */
    printf("\n\n"); /* printf_va_171 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_172 */
    printf("Getting the AHRS datastream base rate\n"); /* printf_va_173 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_174 */
    while (1) {
      u16 tmp_57;
      tmp_57 = mip_3dm_cmd_get_ahrs_base_rate(& device_interface,& base_rate);
      if (! ((int)tmp_57 != 0)) break;
    }
    printf("\nAHRS Base Rate => %d Hz\n",(int)base_rate); /* printf_va_175 */
    printf("\n\n"); /* printf_va_176 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_177 */
    printf("Getting the GPS datastream base rate\n"); /* printf_va_178 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_179 */
    while (1) {
      u16 tmp_58;
      tmp_58 = mip_3dm_cmd_get_gps_base_rate(& device_interface,& base_rate);
      if (! ((int)tmp_58 != 0)) break;
    }
    printf("\nGPS Base Rate => %d Hz\n",(int)base_rate); /* printf_va_180 */
    printf("\n\n"); /* printf_va_181 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_182 */
    printf("Getting the Estimation Filter datastream base rate\n"); /* printf_va_183 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_184 */
    while (1) {
      u16 tmp_59;
      tmp_59 = mip_3dm_cmd_get_filter_base_rate(& device_interface,
                                                & base_rate);
      if (! ((int)tmp_59 != 0)) break;
    }
    printf("\nFILTER Base Rate => %d Hz\n",(int)base_rate); /* printf_va_185 */
    printf("\n\n"); /* printf_va_186 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_187 */
    printf("Toggling Coning and Sculling compensation\n"); /* printf_va_188 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_189 */
    enable = (u8)0x00;
    while (1) {
      u16 tmp_60;
      tmp_60 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x01,& enable);
      if (! ((int)tmp_60 != 0)) break;
    }
    printf("Reading Coning and Sculling compensation enabled state:\n"); /* printf_va_190 */
    while (1) {
      u16 tmp_61;
      tmp_61 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x02,& enable);
      if (! ((int)tmp_61 != 0)) break;
    }
    if ((int)enable == 0x00) tmp_62 = "DISABLED"; else tmp_62 = "ENABLED";
    printf("%s\n\n",(char *)tmp_62); /* printf_va_191 */
    printf("Enabling Coning and Sculling compensation.\n"); /* printf_va_192 */
    enable = (u8)0x01;
    while (1) {
      u16 tmp_63;
      tmp_63 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x01,& enable);
      if (! ((int)tmp_63 != 0)) break;
    }
    printf("Reading Coning and Sculling compensation enabled state:\n"); /* printf_va_193 */
    while (1) {
      u16 tmp_64;
      tmp_64 = mip_3dm_cmd_coning_sculling_compensation(& device_interface,
                                                        (u8)0x02,& enable);
      if (! ((int)tmp_64 != 0)) break;
    }
    if ((int)enable == 0x00) tmp_65 = "DISABLED"; else tmp_65 = "ENABLED";
    printf("%s\n\n",(char *)tmp_65); /* printf_va_194 */
    printf("\n\n"); /* printf_va_195 */
    usleep((useconds_t)((double)1500 * 1000.0));
    bias_vector[0] = 1.0f;
    bias_vector[1] = 2.0f;
    bias_vector[2] = 3.0f;
    printf("----------------------------------------------------------------------\n"); /* printf_va_196 */
    printf("Accel Bias Vector\n"); /* printf_va_197 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_198 */
    printf("Setting Accel Bias Vector:\n"); /* printf_va_199 */
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_200 */
    while (1) {
      u16 tmp_66;
      tmp_66 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x01,
                                      bias_vector);
      if (! ((int)tmp_66 != 0)) break;
    }
    memset((void *)(bias_vector),0,(unsigned int)3 * sizeof(float));
    printf("Reading current Accel Bias Vector:\n"); /* printf_va_201 */
    while (1) {
      u16 tmp_67;
      tmp_67 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x02,
                                      bias_vector);
      if (! ((int)tmp_67 != 0)) break;
    }
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_202 */
    printf("Resetting Accel Bias to default state.\n\n"); /* printf_va_203 */
    while (1) {
      u16 tmp_68;
      tmp_68 = mip_3dm_cmd_accel_bias(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_68 != 0)) break;
    }
    printf("\n\n"); /* printf_va_204 */
    usleep((useconds_t)((double)1500 * 1000.0));
    bias_vector[0] = 4.0f;
    bias_vector[1] = 5.0f;
    bias_vector[2] = 6.0f;
    printf("----------------------------------------------------------------------\n"); /* printf_va_205 */
    printf("Gyro Bias Vector\n"); /* printf_va_206 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_207 */
    printf("Setting Gyro Bias Vector:\n"); /* printf_va_208 */
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_209 */
    while (1) {
      u16 tmp_69;
      tmp_69 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x01,bias_vector);
      if (! ((int)tmp_69 != 0)) break;
    }
    memset((void *)(bias_vector),0,(unsigned int)3 * sizeof(float));
    printf("Reading current Gyro Bias Vector:\n"); /* printf_va_210 */
    while (1) {
      u16 tmp_70;
      tmp_70 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x02,bias_vector);
      if (! ((int)tmp_70 != 0)) break;
    }
    printf("bias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_211 */
    printf("Resetting Gyro Bias to default state.\n\n"); /* printf_va_212 */
    while (1) {
      u16 tmp_71;
      tmp_71 = mip_3dm_cmd_gyro_bias(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_71 != 0)) break;
    }
    printf("\n\n"); /* printf_va_213 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_214 */
    printf("Performing Gyro Bias capture.\nPlease keep device stationary during the 5 second gyro bias capture interval\n"); /* printf_va_215 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_216 */
    duration = (u16)5000;
    while (1) {
      u16 tmp_72;
      tmp_72 = mip_3dm_cmd_capture_gyro_bias(& device_interface,duration,
                                             bias_vector);
      if (! ((int)tmp_72 != 0)) break;
    }
    printf("Gyro Bias Captured:\nbias_vector[0] = %f\nbias_vector[1] = %f\nbias_vector[2] = %f\n\n",
           (double)bias_vector[0],(double)bias_vector[1],
           (double)bias_vector[2]); /* printf_va_217 */
    printf("\n\n"); /* printf_va_218 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_219 */
    printf("Setting the hard iron offset values\n"); /* printf_va_220 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_221 */
    hard_iron[0] = (float)1.0;
    hard_iron[1] = (float)2.0;
    hard_iron[2] = (float)3.0;
    while (1) {
      u16 tmp_73;
      tmp_73 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x01,hard_iron);
      if (! ((int)tmp_73 != 0)) break;
    }
    while (1) {
      u16 tmp_74;
      tmp_74 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x02,
                                     hard_iron_readback);
      if (! ((int)tmp_74 != 0)) break;
    }
    tmp_75 = abs((int)(hard_iron_readback[0] - hard_iron[0]));
    if ((double)tmp_75 < 0.001) {
      int tmp_76;
      tmp_76 = abs((int)(hard_iron_readback[1] - hard_iron[1]));
      if ((double)tmp_76 < 0.001) {
        int tmp_77;
        tmp_77 = abs((int)(hard_iron_readback[2] - hard_iron[2]));
        if ((double)tmp_77 < 0.001) printf("Hard iron offset values successfully set.\n"); /* printf_va_222 */
        else goto _LAND_10;
      }
      else goto _LAND_10;
    }
    else {
      _LAND_10:
      {
        printf("ERROR: Failed to set hard iron offset values!!!\n"); /* printf_va_223 */
        printf("Sent values:     %f X %f Y %f Z\n",(double)hard_iron[0],
               (double)hard_iron[1],(double)hard_iron[2]); /* printf_va_224 */
        printf("Returned values: %f X %f Y %f Z\n",
               (double)hard_iron_readback[0],(double)hard_iron_readback[1],
               (double)hard_iron_readback[2]); /* printf_va_225 */
      }
    }
    printf("\n\nLoading the default hard iron offset values.\n\n"); /* printf_va_226 */
    while (1) {
      u16 tmp_78;
      tmp_78 = mip_3dm_cmd_hard_iron(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_78 != 0)) break;
    }
    printf("\n\n"); /* printf_va_227 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_228 */
    printf("Setting the soft iron matrix values\n"); /* printf_va_229 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_230 */
    i = (s16)0;
    while ((int)i < 9) {
      soft_iron[i] = (float)i;
      i = (s16)((int)i + 1);
    }
    while (1) {
      u16 tmp_79;
      tmp_79 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x01,soft_iron);
      if (! ((int)tmp_79 != 0)) break;
    }
    while (1) {
      u16 tmp_80;
      tmp_80 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x02,
                                     soft_iron_readback);
      if (! ((int)tmp_80 != 0)) break;
    }
    tmp_81 = abs((int)(soft_iron_readback[0] - soft_iron[0]));
    if ((double)tmp_81 < 0.001) {
      int tmp_82;
      tmp_82 = abs((int)(soft_iron_readback[1] - soft_iron[1]));
      if ((double)tmp_82 < 0.001) {
        int tmp_83;
        tmp_83 = abs((int)(soft_iron_readback[2] - soft_iron[2]));
        if ((double)tmp_83 < 0.001) {
          int tmp_84;
          tmp_84 = abs((int)(soft_iron_readback[3] - soft_iron[3]));
          if ((double)tmp_84 < 0.001) {
            int tmp_85;
            tmp_85 = abs((int)(soft_iron_readback[4] - soft_iron[4]));
            if ((double)tmp_85 < 0.001) {
              int tmp_86;
              tmp_86 = abs((int)(soft_iron_readback[5] - soft_iron[5]));
              if ((double)tmp_86 < 0.001) {
                int tmp_87;
                tmp_87 = abs((int)(soft_iron_readback[6] - soft_iron[6]));
                if ((double)tmp_87 < 0.001) {
                  int tmp_88;
                  tmp_88 = abs((int)(soft_iron_readback[7] - soft_iron[7]));
                  if ((double)tmp_88 < 0.001) {
                    int tmp_89;
                    tmp_89 = abs((int)(soft_iron_readback[8] - soft_iron[8]));
                    if ((double)tmp_89 < 0.001) printf("Soft iron matrix values successfully set.\n"); /* printf_va_231 */
                    else goto _LAND_18;
                  }
                  else goto _LAND_18;
                }
                else goto _LAND_18;
              }
              else goto _LAND_18;
            }
            else goto _LAND_18;
          }
          else goto _LAND_18;
        }
        else goto _LAND_18;
      }
      else goto _LAND_18;
    }
    else {
      _LAND_18:
      {
        printf("ERROR: Failed to set hard iron values!!!\n"); /* printf_va_232 */
        printf("Sent values:     [%f  %f  %f][%f  %f  %f][%f  %f  %f]\n",
               (double)soft_iron[0],(double)soft_iron[1],
               (double)soft_iron[2],(double)soft_iron[3],
               (double)soft_iron[4],(double)soft_iron[5],
               (double)soft_iron[6],(double)soft_iron[7],
               (double)soft_iron[8]); /* printf_va_233 */
        printf("Returned values: [%f  %f  %f][%f  %f  %f][%f  %f  %f]\n",
               (double)soft_iron_readback[0],(double)soft_iron_readback[1],
               (double)soft_iron_readback[2],(double)soft_iron_readback[3],
               (double)soft_iron_readback[4],(double)soft_iron_readback[5],
               (double)soft_iron_readback[6],(double)soft_iron_readback[7],
               (double)soft_iron_readback[8]); /* printf_va_234 */
      }
    }
    printf("\n\nLoading the default soft iron matrix values.\n\n"); /* printf_va_235 */
    while (1) {
      u16 tmp_90;
      tmp_90 = mip_3dm_cmd_soft_iron(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_90 != 0)) break;
    }
    printf("\n\n"); /* printf_va_236 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_237 */
    printf("Setting the complementary filter values\n"); /* printf_va_238 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_239 */
    comp_filter_command.north_compensation_enable = (u8)0;
    comp_filter_command.up_compensation_enable = (u8)0;
    comp_filter_command.north_compensation_time_constant = (float)30;
    comp_filter_command.up_compensation_time_constant = (float)30;
    while (1) {
      u16 tmp_91;
      tmp_91 = mip_3dm_cmd_complementary_filter_settings(& device_interface,
                                                         (u8)0x01,
                                                         & comp_filter_command);
      if (! ((int)tmp_91 != 0)) break;
    }
    while (1) {
      u16 tmp_92;
      tmp_92 = mip_3dm_cmd_complementary_filter_settings(& device_interface,
                                                         (u8)0x02,
                                                         & comp_filter_readback);
      if (! ((int)tmp_92 != 0)) break;
    }
    if ((int)comp_filter_command.north_compensation_enable == (int)comp_filter_readback.north_compensation_enable) {
      if ((int)comp_filter_command.up_compensation_enable == (int)comp_filter_readback.up_compensation_enable) {
        int tmp_93;
        tmp_93 = abs((int)(comp_filter_command.north_compensation_time_constant - comp_filter_readback.north_compensation_time_constant));
        if ((double)tmp_93 < 0.001) {
          int tmp_94;
          tmp_94 = abs((int)(comp_filter_command.up_compensation_time_constant - comp_filter_readback.up_compensation_time_constant));
          if ((double)tmp_94 < 0.001) printf("Complementary filter values successfully set.\n"); /* printf_va_240 */
          else goto _LAND_21;
        }
        else goto _LAND_21;
      }
      else goto _LAND_21;
    }
    else {
      _LAND_21:
      {
        printf("ERROR: Failed to set complementary filter values!!!\n"); /* printf_va_241 */
        printf("Sent values:     Up Enable: %d North Enable: %d Up Time Constant: %f North Time Constant: %f \n",
               (int)comp_filter_command.up_compensation_enable,
               (int)comp_filter_command.north_compensation_enable,
               (double)comp_filter_command.up_compensation_time_constant,
               (double)comp_filter_command.north_compensation_time_constant); /* printf_va_242 */
        printf("Returned values: Up Enable: %d North Enable: %d Up Time Constant: %f North Time Constant: %f \n",
               (int)comp_filter_readback.up_compensation_enable,
               (int)comp_filter_readback.north_compensation_enable,
               (double)comp_filter_readback.up_compensation_time_constant,
               (double)comp_filter_readback.north_compensation_time_constant); /* printf_va_243 */
      }
    }
    printf("\n\nLoading the default complementary filter values.\n\n"); /* printf_va_244 */
    while (1) {
      u16 tmp_95;
      tmp_95 = mip_3dm_cmd_complementary_filter_settings(& device_interface,
                                                         (u8)0x05,
                                                         (mip_complementary_filter_settings *)0);
      if (! ((int)tmp_95 != 0)) break;
    }
    printf("\n\n"); /* printf_va_245 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_246 */
    printf("Requesting BASIC Status Report\n"); /* printf_va_247 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_248 */
    while (1) {
      u16 tmp_96;
      tmp_96 = mip_3dm_cmd_hw_specific_device_status(& device_interface,
                                                     (u16)6236,(u8)1,
                                                     (u8 *)(& basic_field));
      if (! ((int)tmp_96 != 0)) break;
    }
    printf("Model Number: \t\t\t\t\t%04u\n",
           (unsigned int)((int)basic_field.device_model)); /* printf_va_249 */
    if ((int)basic_field.status_selector == 1) tmp_97 = "Basic Status Report";
    else tmp_97 = "Diagnostic Status Report";
    printf("Status Selector: \t\t\t\t%s\n",(char *)tmp_97); /* printf_va_250 */
    printf("Status Flags: \t\t\t\t\t0x%08x\n",basic_field.status_flags); /* printf_va_251 */
    if ((int)basic_field.system_state == 0x01) strcpy((char *)(temp_string),
                                                      "System Initialization");
    else 
      if ((int)basic_field.system_state == 0x02) strcpy((char *)(temp_string),
                                                        "Sensor Start-up");
      else 
        if ((int)basic_field.system_state == 0x03) strcpy((char *)(temp_string),
                                                          "System Running");
    printf("System State: \t\t\t\t\t%s\n",(char *)(temp_string)); /* printf_va_252 */
    printf("System Microsecond Timer Count: \t\t%llu ms\n\n",
           (unsigned long long)basic_field.system_timer_ms); /* printf_va_253 */
    printf("Requesting DIAGNOSTIC Status Report:\n"); /* printf_va_254 */
    while (1) {
      u16 tmp_98;
      tmp_98 = mip_3dm_cmd_hw_specific_device_status(& device_interface,
                                                     (u16)6236,(u8)2,
                                                     (u8 *)(& diagnostic_field));
      if (! ((int)tmp_98 != 0)) break;
    }
    printf("Model Number: \t\t\t\t\t%04u\n",
           (unsigned int)((int)diagnostic_field.device_model)); /* printf_va_255 */
    if ((int)diagnostic_field.status_selector == 1) tmp_99 = "Basic Status Report";
    else tmp_99 = "Diagnostic Status Report";
    printf("Status Selector: \t\t\t\t%s\n",(char *)tmp_99); /* printf_va_256 */
    printf("Status Flags: \t\t\t\t\t0x%08x\n",diagnostic_field.status_flags); /* printf_va_257 */
    printf("System Millisecond Timer Count: \t\t%llu ms\n",
           (unsigned long long)diagnostic_field.system_timer_ms); /* printf_va_258 */
    printf("Number Received GPS Pulse-Per-Second Pulses: \t%u Pulses\n",
           diagnostic_field.num_gps_pps_triggers); /* printf_va_259 */
    printf("Time of Last GPS Pulse-Per-Second Pulse: \t%u ms\n",
           diagnostic_field.last_gps_pps_trigger_ms); /* printf_va_260 */
    if ((int)diagnostic_field.imu_stream_enabled == 1) tmp_100 = "TRUE";
    else tmp_100 = "FALSE";
    printf("IMU Streaming Enabled: \t\t\t\t%s\n",(char *)tmp_100); /* printf_va_261 */
    if ((int)diagnostic_field.gps_stream_enabled == 1) tmp_101 = "TRUE";
    else tmp_101 = "FALSE";
    printf("GPS Streaming Enabled: \t\t\t\t%s\n",(char *)tmp_101); /* printf_va_262 */
    if ((int)diagnostic_field.filter_stream_enabled == 1) tmp_102 = "TRUE";
    else tmp_102 = "FALSE";
    printf("FILTER Streaming Enabled: \t\t\t\t%s\n",(char *)tmp_102); /* printf_va_263 */
    printf("Number of Dropped IMU Packets: \t\t\t%u packets\n",
           diagnostic_field.imu_dropped_packets); /* printf_va_264 */
    printf("Number of Dropped GPS Packets: \t\t\t%u packets\n",
           diagnostic_field.gps_dropped_packets); /* printf_va_265 */
    printf("Number of Dropped FILTER Packets: \t\t\t%u packets\n",
           diagnostic_field.filter_dropped_packets); /* printf_va_266 */
    printf("Communications Port Bytes Written: \t\t%u Bytes\n",
           diagnostic_field.com1_port_bytes_written); /* printf_va_267 */
    printf("Communications Port Bytes Read: \t\t%u Bytes\n",
           diagnostic_field.com1_port_bytes_read); /* printf_va_268 */
    printf("Communications Port Write Overruns: \t\t%u Bytes\n",
           diagnostic_field.com1_port_write_overruns); /* printf_va_269 */
    printf("Communications Port Read Overruns: \t\t%u Bytes\n",
           diagnostic_field.com1_port_read_overruns); /* printf_va_270 */
    printf("IMU Parser Errors: \t\t\t\t%u Errors\n",
           diagnostic_field.imu_parser_errors); /* printf_va_271 */
    printf("IMU Message Count: \t\t\t\t%u Messages\n",
           diagnostic_field.imu_message_count); /* printf_va_272 */
    printf("IMU Last Message Received: \t\t\t%u ms\n",
           diagnostic_field.imu_last_message_ms); /* printf_va_273 */
    printf("GPS Parser Errors: \t\t\t\t%u Errors\n",
           diagnostic_field.gps_parser_errors); /* printf_va_274 */
    printf("GPS Message Count: \t\t\t\t%u Messages\n",
           diagnostic_field.gps_message_count); /* printf_va_275 */
    printf("GPS Last Message Received: \t\t\t%u ms\n",
           diagnostic_field.gps_last_message_ms); /* printf_va_276 */
    printf("\n\n"); /* printf_va_277 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_278 */
    printf("Resetting the Filter\n"); /* printf_va_279 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_280 */
    while (1) {
      u16 tmp_103;
      tmp_103 = mip_filter_reset_filter(& device_interface);
      if (! ((int)tmp_103 != 0)) break;
    }
    printf("\n\n"); /* printf_va_281 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_282 */
    printf("Initializing the Filter with Euler angles\n"); /* printf_va_283 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_284 */
    angles[2] = (float)0;
    angles[1] = angles[2];
    angles[0] = angles[1];
    while (1) {
      u16 tmp_104;
      tmp_104 = mip_filter_set_init_attitude(& device_interface,angles);
      if (! ((int)tmp_104 != 0)) break;
    }
    printf("\n\n"); /* printf_va_285 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_286 */
    printf("Resetting the Filter\n"); /* printf_va_287 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_288 */
    while (1) {
      u16 tmp_105;
      tmp_105 = mip_filter_reset_filter(& device_interface);
      if (! ((int)tmp_105 != 0)) break;
    }
    printf("\n\n"); /* printf_va_289 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_290 */
    printf("Initializing the Filter with a heading angle\n"); /* printf_va_291 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_292 */
    while (1) {
      u16 tmp_106;
      tmp_106 = mip_filter_set_init_heading(& device_interface,angles[0]);
      if (! ((int)tmp_106 != 0)) break;
    }
    printf("\n\n"); /* printf_va_293 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_294 */
    printf("Resetting the Filter\n"); /* printf_va_295 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_296 */
    while (1) {
      u16 tmp_107;
      tmp_107 = mip_filter_reset_filter(& device_interface);
      if (! ((int)tmp_107 != 0)) break;
    }
    printf("\n\n"); /* printf_va_297 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_298 */
    printf("Cycle through available Vehicle Dynamics Modes\n"); /* printf_va_299 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_300 */
    i = (s16)3;
    while ((int)i >= 1) {
      dynamics_mode = (u8)i;
      while (1) {
        u16 tmp_108;
        tmp_108 = mip_filter_vehicle_dynamics_mode(& device_interface,
                                                   (u8)0x01,& dynamics_mode);
        if (! ((int)tmp_108 != 0)) break;
      }
      readback_dynamics_mode = (u8)0;
      while (1) {
        u16 tmp_109;
        tmp_109 = mip_filter_vehicle_dynamics_mode(& device_interface,
                                                   (u8)0x02,
                                                   & readback_dynamics_mode);
        if (! ((int)tmp_109 != 0)) break;
      }
      if ((int)dynamics_mode == (int)readback_dynamics_mode) printf("Vehicle dynamics mode successfully set to %d\n",
                                                                    (int)dynamics_mode); /* printf_va_301 */
      else printf("ERROR: Failed to set vehicle dynamics mode to %d!!!\n",
                  (int)dynamics_mode); /* printf_va_302 */
      i = (s16)((int)i - 1);
    }
    printf("\nLoading the default vehicle dynamics mode\n\n"); /* printf_va_303 */
    while (1) {
      u16 tmp_110;
      tmp_110 = mip_filter_vehicle_dynamics_mode(& device_interface,(u8)0x05,
                                                 (u8 *)0);
      if (! ((int)tmp_110 != 0)) break;
    }
    printf("\n\n"); /* printf_va_304 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_305 */
    printf("Setting the sensor to vehicle frame transformation\n"); /* printf_va_306 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_307 */
    angles[0] = (float)(3.14 / 4.0);
    angles[1] = (float)(3.14 / 8.0);
    angles[2] = (float)(3.14 / 12.0);
    while (1) {
      u16 tmp_111;
      tmp_111 = mip_filter_sensor2vehicle_tranformation(& device_interface,
                                                        (u8)0x01,angles);
      if (! ((int)tmp_111 != 0)) break;
    }
    while (1) {
      u16 tmp_112;
      tmp_112 = mip_filter_sensor2vehicle_tranformation(& device_interface,
                                                        (u8)0x02,
                                                        readback_angles);
      if (! ((int)tmp_112 != 0)) break;
    }
    tmp_113 = abs((int)(readback_angles[0] - angles[0]));
    if ((double)tmp_113 < 0.001) {
      int tmp_114;
      tmp_114 = abs((int)(readback_angles[1] - angles[1]));
      if ((double)tmp_114 < 0.001) {
        int tmp_115;
        tmp_115 = abs((int)(readback_angles[2] - angles[2]));
        if ((double)tmp_115 < 0.001) printf("Transformation successfully set.\n"); /* printf_va_308 */
        else goto _LAND_23;
      }
      else goto _LAND_23;
    }
    else {
      _LAND_23:
      {
        printf("ERROR: Failed to set transformation!!!\n"); /* printf_va_309 */
        printf("Sent angles:     %f roll %f pitch %f yaw\n",
               (double)angles[0],(double)angles[1],(double)angles[2]); /* printf_va_310 */
        printf("Returned angles: %f roll %f pitch %f yaw\n",
               (double)readback_angles[0],(double)readback_angles[1],
               (double)readback_angles[2]); /* printf_va_311 */
      }
    }
    printf("\n\nLoading the default sensor to vehicle transformation.\n\n"); /* printf_va_312 */
    while (1) {
      u16 tmp_116;
      tmp_116 = mip_filter_sensor2vehicle_tranformation(& device_interface,
                                                        (u8)0x05,(float *)0);
      if (! ((int)tmp_116 != 0)) break;
    }
    printf("\n\n"); /* printf_va_313 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_314 */
    printf("Setting the sensor to vehicle frame offset\n"); /* printf_va_315 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_316 */
    offset[0] = (float)1.0;
    offset[1] = (float)2.0;
    offset[2] = (float)3.0;
    while (1) {
      u16 tmp_117;
      tmp_117 = mip_filter_sensor2vehicle_offset(& device_interface,(u8)0x01,
                                                 offset);
      if (! ((int)tmp_117 != 0)) break;
    }
    while (1) {
      u16 tmp_118;
      tmp_118 = mip_filter_sensor2vehicle_offset(& device_interface,(u8)0x02,
                                                 readback_offset);
      if (! ((int)tmp_118 != 0)) break;
    }
    tmp_119 = abs((int)(readback_offset[0] - offset[0]));
    if ((double)tmp_119 < 0.001) {
      int tmp_120;
      tmp_120 = abs((int)(readback_offset[1] - offset[1]));
      if ((double)tmp_120 < 0.001) {
        int tmp_121;
        tmp_121 = abs((int)(readback_offset[2] - offset[2]));
        if ((double)tmp_121 < 0.001) printf("Offset successfully set.\n"); /* printf_va_317 */
        else goto _LAND_25;
      }
      else goto _LAND_25;
    }
    else {
      _LAND_25:
      {
        printf("ERROR: Failed to set offset!!!\n"); /* printf_va_318 */
        printf("Sent offset:     %f X %f Y %f Z\n",(double)offset[0],
               (double)offset[1],(double)offset[2]); /* printf_va_319 */
        printf("Returned offset: %f X %f Y %f Z\n",
               (double)readback_offset[0],(double)readback_offset[1],
               (double)readback_offset[2]); /* printf_va_320 */
      }
    }
    printf("\n\nLoading the default sensor to vehicle offset.\n\n"); /* printf_va_321 */
    while (1) {
      u16 tmp_122;
      tmp_122 = mip_filter_sensor2vehicle_offset(& device_interface,(u8)0x05,
                                                 (float *)0);
      if (! ((int)tmp_122 != 0)) break;
    }
    printf("\n\n"); /* printf_va_322 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_323 */
    printf("Setting the GPS antenna offset\n"); /* printf_va_324 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_325 */
    offset[0] = (float)1.0;
    offset[1] = (float)2.0;
    offset[2] = (float)3.0;
    while (1) {
      u16 tmp_123;
      tmp_123 = mip_filter_antenna_offset(& device_interface,(u8)0x01,offset);
      if (! ((int)tmp_123 != 0)) break;
    }
    while (1) {
      u16 tmp_124;
      tmp_124 = mip_filter_antenna_offset(& device_interface,(u8)0x02,
                                          readback_offset);
      if (! ((int)tmp_124 != 0)) break;
    }
    tmp_125 = abs((int)(readback_offset[0] - offset[0]));
    if ((double)tmp_125 < 0.001) {
      int tmp_126;
      tmp_126 = abs((int)(readback_offset[1] - offset[1]));
      if ((double)tmp_126 < 0.001) {
        int tmp_127;
        tmp_127 = abs((int)(readback_offset[2] - offset[2]));
        if ((double)tmp_127 < 0.001) printf("Offset successfully set.\n"); /* printf_va_326 */
        else goto _LAND_27;
      }
      else goto _LAND_27;
    }
    else {
      _LAND_27:
      {
        printf("ERROR: Failed to set offset!!!\n"); /* printf_va_327 */
        printf("Sent offset:     %f X %f Y %f Z\n",(double)offset[0],
               (double)offset[1],(double)offset[2]); /* printf_va_328 */
        printf("Returned offset: %f X %f Y %f Z\n",
               (double)readback_offset[0],(double)readback_offset[1],
               (double)readback_offset[2]); /* printf_va_329 */
      }
    }
    printf("\n\nLoading the default antenna offset.\n\n"); /* printf_va_330 */
    while (1) {
      u16 tmp_128;
      tmp_128 = mip_filter_antenna_offset(& device_interface,(u8)0x05,
                                          (float *)0);
      if (! ((int)tmp_128 != 0)) break;
    }
    printf("\n\n"); /* printf_va_331 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_332 */
    printf("Cycling through Estimation Control Flags\n"); /* printf_va_333 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_334 */
    j = (u16)0;
    while ((int)j < 0x0020) {
      estimation_control = (u16)(0xFFFF & ~ ((int)j));
      while (1) {
        u16 tmp_129;
        tmp_129 = mip_filter_estimation_control(& device_interface,(u8)0x01,
                                                & estimation_control);
        if (! ((int)tmp_129 != 0)) break;
      }
      while (1) {
        u16 tmp_130;
        tmp_130 = mip_filter_estimation_control(& device_interface,(u8)0x02,
                                                & estimation_control_readback);
        if (! ((int)tmp_130 != 0)) break;
      }
      if ((int)estimation_control != (int)estimation_control_readback) {
        printf("ERROR:\n"); /* printf_va_335 */
        if (((int)estimation_control_readback & 0x0001) != 0) 
          if (((int)estimation_control & 0x0001) == 0) printf("Gyroscope Bias Estimation NOT DISABLED\n"); /* printf_va_336 */
        if (((int)estimation_control_readback & 0x0002) != 0) 
          if (((int)estimation_control & 0x0002) == 0) printf("Accelerometer Bias Estimation NOT DISABLED\n"); /* printf_va_337 */
        if (((int)estimation_control_readback & 0x0004) != 0) 
          if (((int)estimation_control & 0x0004) == 0) printf("Gyroscope Scale Factor Estimation NOT DISABLED\n"); /* printf_va_338 */
        if (((int)estimation_control_readback & 0x0008) != 0) 
          if (((int)estimation_control & 0x0008) == 0) printf("Accelerometer Scale Factor Estimation NOT DISABLED\n"); /* printf_va_339 */
        if (((int)estimation_control_readback & 0x0010) != 0) 
          if (((int)estimation_control & 0x0010) == 0) printf("GPS Antenna Offset Estimation NOT DISABLED\n"); /* printf_va_340 */
      }
      j = (u16)((int)j + 1);
    }
    printf("\n\nResetting Estimation Control Flags to default state.\n\n"); /* printf_va_341 */
    while (1) {
      u16 tmp_131;
      tmp_131 = mip_filter_estimation_control(& device_interface,(u8)0x05,
                                              & estimation_control);
      if (! ((int)tmp_131 != 0)) break;
    }
    printf("\n\n"); /* printf_va_342 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_343 */
    printf("Cycle through available GPS sources\n"); /* printf_va_344 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_345 */
    i = (s16)2;
    while ((int)i >= 1) {
      gps_source = (u8)i;
      while (1) {
        u16 tmp_132;
        tmp_132 = mip_filter_gps_source(& device_interface,(u8)0x01,
                                        & gps_source);
        if (! ((int)tmp_132 != 0)) break;
      }
      while (1) {
        u16 tmp_133;
        tmp_133 = mip_filter_gps_source(& device_interface,(u8)0x02,
                                        & gps_source);
        if (! ((int)tmp_133 != 0)) break;
      }
      if ((int)gps_source == (int)i) printf("GPS source successfully set to %d\n",
                                            (int)i); /* printf_va_346 */
      else printf("ERROR: Failed to set GPS source to %d!!!\n",(int)i); /* printf_va_347 */
      i = (s16)((int)i - 1);
    }
    printf("\n\nLoading the default gps source.\n\n"); /* printf_va_348 */
    while (1) {
      u16 tmp_134;
      tmp_134 = mip_filter_gps_source(& device_interface,(u8)0x05,(u8 *)0);
      if (! ((int)tmp_134 != 0)) break;
    }
    printf("\n\n"); /* printf_va_349 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_350 */
    printf("Performing External GPS Update with externally supplied GPS information\n"); /* printf_va_351 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_352 */
    gps_source = (u8)0x2;
    while (1) {
      u16 tmp_135;
      tmp_135 = mip_filter_gps_source(& device_interface,(u8)0x01,
                                      & gps_source);
      if (! ((int)tmp_135 != 0)) break;
    }
    external_gps_update.tow = (double)0;
    external_gps_update.week_number = (u16)0;
    external_gps_update.pos[0] = 44.43753433;
    external_gps_update.pos[1] = - 73.10612488;
    external_gps_update.pos[2] = 134.029999;
    external_gps_update.vel[0] = (float)0.0;
    external_gps_update.vel[1] = (float)0.0;
    external_gps_update.vel[2] = (float)0.0;
    external_gps_update.pos_1sigma[0] = (float)0.1;
    external_gps_update.pos_1sigma[1] = (float)0.1;
    external_gps_update.pos_1sigma[2] = (float)0.1;
    external_gps_update.vel_1sigma[0] = (float)0.1;
    external_gps_update.vel_1sigma[1] = (float)0.1;
    external_gps_update.vel_1sigma[2] = (float)0.1;
    while (1) {
      u16 tmp_136;
      tmp_136 = mip_filter_external_gps_update(& device_interface,
                                               & external_gps_update);
      if (! ((int)tmp_136 != 0)) break;
    }
    gps_source = (u8)0x01;
    while (1) {
      u16 tmp_137;
      tmp_137 = mip_filter_gps_source(& device_interface,(u8)0x01,
                                      & gps_source);
      if (! ((int)tmp_137 != 0)) break;
    }
    printf("\n\n"); /* printf_va_353 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_354 */
    printf("Performing External Heading Update with externally supplied heading information\n"); /* printf_va_355 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_356 */
    heading_source = (u8)0x3;
    while (1) {
      u16 tmp_138;
      tmp_138 = mip_filter_heading_source(& device_interface,(u8)0x01,
                                          & heading_source);
      if (! ((int)tmp_138 != 0)) break;
    }
    external_heading_update.heading_angle = (float)0.0;
    external_heading_update.heading_angle_1sigma = (float)0.01;
    external_heading_update.type = (u8)0x1;
    while (1) {
      u16 tmp_139;
      tmp_139 = mip_filter_external_heading_update(& device_interface,
                                                   & external_heading_update);
      if (! ((int)tmp_139 != 0)) break;
    }
    while (1) {
      u16 tmp_140;
      tmp_140 = mip_filter_heading_source(& device_interface,(u8)0x05,
                                          & heading_source);
      if (! ((int)tmp_140 != 0)) break;
    }
    printf("\n\n"); /* printf_va_357 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_358 */
    printf("Cycle through available Heading sources\n"); /* printf_va_359 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_360 */
    i = (s16)3;
    while ((int)i >= 0) {
      heading_source = (u8)i;
      mip_filter_heading_source(& device_interface,(u8)0x01,& heading_source);
      while (1) {
        u16 tmp_141;
        tmp_141 = mip_filter_heading_source(& device_interface,(u8)0x02,
                                            & heading_source);
        if (! ((int)tmp_141 != 0)) break;
      }
      if ((int)heading_source == (int)i) printf("Heading source successfully set to %d\n",
                                                (int)i); /* printf_va_361 */
      else printf("ERROR: Failed to set heading source to %d!!!\n",(int)i); /* printf_va_362 */
      i = (s16)((int)i - 1);
    }
    printf("\n\nLoading the default heading source.\n\n"); /* printf_va_363 */
    while (1) {
      u16 tmp_142;
      tmp_142 = mip_filter_heading_source(& device_interface,(u8)0x05,
                                          (u8 *)0);
      if (! ((int)tmp_142 != 0)) break;
    }
    printf("\n\n"); /* printf_va_364 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_365 */
    printf("Cycle through available auto-init values\n"); /* printf_va_366 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_367 */
    i = (s16)1;
    while ((int)i >= 0) {
      auto_init = (u8)i;
      while (1) {
        u16 tmp_143;
        tmp_143 = mip_filter_auto_initialization(& device_interface,(u8)0x01,
                                                 & auto_init);
        if (! ((int)tmp_143 != 0)) break;
      }
      while (1) {
        u16 tmp_144;
        tmp_144 = mip_filter_auto_initialization(& device_interface,(u8)0x02,
                                                 & auto_init);
        if (! ((int)tmp_144 != 0)) break;
      }
      if ((int)auto_init == (int)i) printf("Auto-init successfully set to %d\n",
                                           (int)i); /* printf_va_368 */
      else printf("ERROR: Failed to set auto-init to %d!!!\n",(int)i); /* printf_va_369 */
      i = (s16)((int)i - 1);
    }
    printf("\n\nLoading the default auto-init value.\n\n"); /* printf_va_370 */
    while (1) {
      u16 tmp_145;
      tmp_145 = mip_filter_auto_initialization(& device_interface,(u8)0x05,
                                               (u8 *)0);
      if (! ((int)tmp_145 != 0)) break;
    }
    printf("\n\n"); /* printf_va_371 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_372 */
    printf("Setting the accel noise values\n"); /* printf_va_373 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_374 */
    noise[0] = (float)0.1;
    noise[1] = (float)0.2;
    noise[2] = (float)0.3;
    while (1) {
      u16 tmp_146;
      tmp_146 = mip_filter_accel_noise(& device_interface,(u8)0x01,noise);
      if (! ((int)tmp_146 != 0)) break;
    }
    while (1) {
      u16 tmp_147;
      tmp_147 = mip_filter_accel_noise(& device_interface,(u8)0x02,
                                       readback_noise);
      if (! ((int)tmp_147 != 0)) break;
    }
    tmp_148 = abs((int)(readback_noise[0] - noise[0]));
    if ((double)tmp_148 < 0.001) {
      int tmp_149;
      tmp_149 = abs((int)(readback_noise[1] - noise[1]));
      if ((double)tmp_149 < 0.001) {
        int tmp_150;
        tmp_150 = abs((int)(readback_noise[2] - noise[2]));
        if ((double)tmp_150 < 0.001) printf("Accel noise values successfully set.\n"); /* printf_va_375 */
        else goto _LAND_29;
      }
      else goto _LAND_29;
    }
    else {
      _LAND_29:
      {
        printf("ERROR: Failed to set accel noise values!!!\n"); /* printf_va_376 */
        printf("Sent values:     %f X %f Y %f Z\n",(double)noise[0],
               (double)noise[1],(double)noise[2]); /* printf_va_377 */
        printf("Returned values: %f X %f Y %f Z\n",(double)readback_noise[0],
               (double)readback_noise[1],(double)readback_noise[2]); /* printf_va_378 */
      }
    }
    printf("\n\nLoading the default accel noise values.\n\n"); /* printf_va_379 */
    while (1) {
      u16 tmp_151;
      tmp_151 = mip_filter_accel_noise(& device_interface,(u8)0x05,
                                       (float *)0);
      if (! ((int)tmp_151 != 0)) break;
    }
    printf("\n\n"); /* printf_va_380 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_381 */
    printf("Setting the gyro noise values\n"); /* printf_va_382 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_383 */
    noise[0] = (float)0.1;
    noise[1] = (float)0.2;
    noise[2] = (float)0.3;
    while (1) {
      u16 tmp_152;
      tmp_152 = mip_filter_gyro_noise(& device_interface,(u8)0x01,noise);
      if (! ((int)tmp_152 != 0)) break;
    }
    while (1) {
      u16 tmp_153;
      tmp_153 = mip_filter_gyro_noise(& device_interface,(u8)0x02,
                                      readback_noise);
      if (! ((int)tmp_153 != 0)) break;
    }
    tmp_154 = abs((int)(readback_noise[0] - noise[0]));
    if ((double)tmp_154 < 0.001) {
      int tmp_155;
      tmp_155 = abs((int)(readback_noise[1] - noise[1]));
      if ((double)tmp_155 < 0.001) {
        int tmp_156;
        tmp_156 = abs((int)(readback_noise[2] - noise[2]));
        if ((double)tmp_156 < 0.001) printf("Gyro noise values successfully set.\n"); /* printf_va_384 */
        else goto _LAND_31;
      }
      else goto _LAND_31;
    }
    else {
      _LAND_31:
      {
        printf("ERROR: Failed to set gyro noise values!!!\n"); /* printf_va_385 */
        printf("Sent values:     %f X %f Y %f Z\n",(double)noise[0],
               (double)noise[1],(double)noise[2]); /* printf_va_386 */
        printf("Returned values: %f X %f Y %f Z\n",(double)readback_noise[0],
               (double)readback_noise[1],(double)readback_noise[2]); /* printf_va_387 */
      }
    }
    printf("\n\nLoading the default gyro noise values.\n\n"); /* printf_va_388 */
    while (1) {
      u16 tmp_157;
      tmp_157 = mip_filter_gyro_noise(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_157 != 0)) break;
    }
    printf("\n\n"); /* printf_va_389 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_390 */
    printf("Setting the mag noise values\n"); /* printf_va_391 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_392 */
    noise[0] = (float)0.1;
    noise[1] = (float)0.2;
    noise[2] = (float)0.3;
    while (1) {
      u16 tmp_158;
      tmp_158 = mip_filter_mag_noise(& device_interface,(u8)0x01,noise);
      if (! ((int)tmp_158 != 0)) break;
    }
    while (1) {
      u16 tmp_159;
      tmp_159 = mip_filter_mag_noise(& device_interface,(u8)0x02,
                                     readback_noise);
      if (! ((int)tmp_159 != 0)) break;
    }
    tmp_160 = abs((int)(readback_noise[0] - noise[0]));
    if ((double)tmp_160 < 0.001) {
      int tmp_161;
      tmp_161 = abs((int)(readback_noise[1] - noise[1]));
      if ((double)tmp_161 < 0.001) {
        int tmp_162;
        tmp_162 = abs((int)(readback_noise[2] - noise[2]));
        if ((double)tmp_162 < 0.001) printf("Mag noise values successfully set.\n"); /* printf_va_393 */
        else goto _LAND_33;
      }
      else goto _LAND_33;
    }
    else {
      _LAND_33:
      {
        printf("ERROR: Failed to set mag noise values!!!\n"); /* printf_va_394 */
        printf("Sent values:     %f X %f Y %f Z\n",(double)noise[0],
               (double)noise[1],(double)noise[2]); /* printf_va_395 */
        printf("Returned values: %f X %f Y %f Z\n",(double)readback_noise[0],
               (double)readback_noise[1],(double)readback_noise[2]); /* printf_va_396 */
      }
    }
    printf("\n\nLoading the default mag noise values.\n\n"); /* printf_va_397 */
    while (1) {
      u16 tmp_163;
      tmp_163 = mip_filter_mag_noise(& device_interface,(u8)0x05,(float *)0);
      if (! ((int)tmp_163 != 0)) break;
    }
    printf("\n\n"); /* printf_va_398 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_399 */
    printf("Setting the accel bias model values\n"); /* printf_va_400 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_401 */
    noise[0] = (float)0.1;
    noise[1] = (float)0.2;
    noise[2] = (float)0.3;
    beta[0] = (float)0.1;
    beta[1] = (float)0.2;
    beta[2] = (float)0.3;
    while (1) {
      u16 tmp_164;
      tmp_164 = mip_filter_accel_bias_model(& device_interface,(u8)0x01,beta,
                                            noise);
      if (! ((int)tmp_164 != 0)) break;
    }
    while (1) {
      u16 tmp_165;
      tmp_165 = mip_filter_accel_bias_model(& device_interface,(u8)0x02,
                                            readback_beta,readback_noise);
      if (! ((int)tmp_165 != 0)) break;
    }
    tmp_166 = abs((int)(readback_noise[0] - noise[0]));
    if ((double)tmp_166 < 0.001) {
      int tmp_167;
      tmp_167 = abs((int)(readback_noise[1] - noise[1]));
      if ((double)tmp_167 < 0.001) {
        int tmp_168;
        tmp_168 = abs((int)(readback_noise[2] - noise[2]));
        if ((double)tmp_168 < 0.001) {
          int tmp_169;
          tmp_169 = abs((int)(readback_beta[0] - beta[0]));
          if ((double)tmp_169 < 0.001) {
            int tmp_170;
            tmp_170 = abs((int)(readback_beta[1] - beta[1]));
            if ((double)tmp_170 < 0.001) {
              int tmp_171;
              tmp_171 = abs((int)(readback_beta[2] - beta[2]));
              if ((double)tmp_171 < 0.001) printf("Accel bias model values successfully set.\n"); /* printf_va_402 */
              else goto _LAND_38;
            }
            else goto _LAND_38;
          }
          else goto _LAND_38;
        }
        else goto _LAND_38;
      }
      else goto _LAND_38;
    }
    else {
      _LAND_38:
      {
        printf("ERROR: Failed to set accel bias model values!!!\n"); /* printf_va_403 */
        printf("Sent values:     Beta: %f X %f Y %f Z, White Noise: %f X %f Y %f Z\n",
               (double)beta[0],(double)beta[1],(double)beta[2],
               (double)noise[0],(double)noise[1],(double)noise[2]); /* printf_va_404 */
        printf("Returned values:  Beta: %f X %f Y %f Z, White Noise: %f X %f Y %f Z\n",
               (double)readback_beta[0],(double)readback_beta[1],
               (double)readback_beta[2],(double)readback_noise[0],
               (double)readback_noise[1],(double)readback_noise[2]); /* printf_va_405 */
      }
    }
    printf("\n\nLoading the default accel bias model values.\n\n"); /* printf_va_406 */
    while (1) {
      u16 tmp_172;
      tmp_172 = mip_filter_accel_bias_model(& device_interface,(u8)0x05,
                                            (float *)0,(float *)0);
      if (! ((int)tmp_172 != 0)) break;
    }
    printf("\n\n"); /* printf_va_407 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_408 */
    printf("Setting the gyro bias model values\n"); /* printf_va_409 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_410 */
    noise[0] = (float)0.1;
    noise[1] = (float)0.2;
    noise[2] = (float)0.3;
    beta[0] = (float)0.1;
    beta[1] = (float)0.2;
    beta[2] = (float)0.3;
    while (1) {
      u16 tmp_173;
      tmp_173 = mip_filter_gyro_bias_model(& device_interface,(u8)0x01,beta,
                                           noise);
      if (! ((int)tmp_173 != 0)) break;
    }
    while (1) {
      u16 tmp_174;
      tmp_174 = mip_filter_gyro_bias_model(& device_interface,(u8)0x02,
                                           readback_beta,readback_noise);
      if (! ((int)tmp_174 != 0)) break;
    }
    tmp_175 = abs((int)(readback_noise[0] - noise[0]));
    if ((double)tmp_175 < 0.001) {
      int tmp_176;
      tmp_176 = abs((int)(readback_noise[1] - noise[1]));
      if ((double)tmp_176 < 0.001) {
        int tmp_177;
        tmp_177 = abs((int)(readback_noise[2] - noise[2]));
        if ((double)tmp_177 < 0.001) {
          int tmp_178;
          tmp_178 = abs((int)(readback_beta[0] - beta[0]));
          if ((double)tmp_178 < 0.001) {
            int tmp_179;
            tmp_179 = abs((int)(readback_beta[1] - beta[1]));
            if ((double)tmp_179 < 0.001) {
              int tmp_180;
              tmp_180 = abs((int)(readback_beta[2] - beta[2]));
              if ((double)tmp_180 < 0.001) printf("Gyro bias model values successfully set.\n"); /* printf_va_411 */
              else goto _LAND_43;
            }
            else goto _LAND_43;
          }
          else goto _LAND_43;
        }
        else goto _LAND_43;
      }
      else goto _LAND_43;
    }
    else {
      _LAND_43:
      {
        printf("ERROR: Failed to set gyro bias model values!!!\n"); /* printf_va_412 */
        printf("Sent values:     Beta: %f X %f Y %f Z, White Noise: %f X %f Y %f Z\n",
               (double)beta[0],(double)beta[1],(double)beta[2],
               (double)noise[0],(double)noise[1],(double)noise[2]); /* printf_va_413 */
        printf("Returned values:  Beta: %f X %f Y %f Z, White Noise: %f X %f Y %f Z\n",
               (double)readback_beta[0],(double)readback_beta[1],
               (double)readback_beta[2],(double)readback_noise[0],
               (double)readback_noise[1],(double)readback_noise[2]); /* printf_va_414 */
      }
    }
    printf("\n\nLoading the default gyro bias model values.\n\n"); /* printf_va_415 */
    while (1) {
      u16 tmp_181;
      tmp_181 = mip_filter_gyro_bias_model(& device_interface,(u8)0x05,
                                           (float *)0,(float *)0);
      if (! ((int)tmp_181 != 0)) break;
    }
    printf("\n\n"); /* printf_va_416 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_417 */
    printf("Setting Zero Velocity-Update threshold\n"); /* printf_va_418 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_419 */
    zero_update_control.threshold = (float)0.1;
    zero_update_control.enable = (u8)1;
    while (1) {
      u16 tmp_182;
      tmp_182 = mip_filter_zero_velocity_update_control(& device_interface,
                                                        (u8)0x01,
                                                        & zero_update_control);
      if (! ((int)tmp_182 != 0)) break;
    }
    while (1) {
      u16 tmp_183;
      tmp_183 = mip_filter_zero_velocity_update_control(& device_interface,
                                                        (u8)0x02,
                                                        & zero_update_readback);
      if (! ((int)tmp_183 != 0)) break;
    }
    if ((int)zero_update_control.enable != (int)zero_update_readback.enable) 
      printf("ERROR configuring Zero Velocity Update.\n"); /* printf_va_420 */
    else 
      if (zero_update_control.threshold != zero_update_readback.threshold) 
        printf("ERROR configuring Zero Velocity Update.\n"); /* printf_va_421 */
    printf("\n\nResetting Zero Velocity Update Control to default parameters.\n\n"); /* printf_va_422 */
    while (1) {
      u16 tmp_184;
      tmp_184 = mip_filter_zero_velocity_update_control(& device_interface,
                                                        (u8)0x05,
                                                        (mip_filter_zero_update_command *)0);
      if (! ((int)tmp_184 != 0)) break;
    }
    printf("\n\n"); /* printf_va_423 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_424 */
    printf("Applying External Heading Update with Timestamp\n"); /* printf_va_425 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_426 */
    heading_source = (u8)0x3;
    while (1) {
      u16 tmp_185;
      tmp_185 = mip_filter_heading_source(& device_interface,(u8)0x01,
                                          & heading_source);
      if (! ((int)tmp_185 != 0)) break;
    }
    external_heading_with_time.gps_tow = 0.0;
    external_heading_with_time.gps_week_number = (u16)0;
    external_heading_with_time.heading_angle_rads = (float)0.0;
    external_heading_with_time.heading_angle_sigma_rads = (float)0.05;
    external_heading_with_time.heading_type = (u8)0x01;
    while (1) {
      u16 tmp_186;
      tmp_186 = mip_filter_external_heading_update_with_time(& device_interface,
                                                             & external_heading_with_time);
      if (! ((int)tmp_186 != 0)) break;
    }
    printf("\n\nResetting default heading update.\n\n"); /* printf_va_427 */
    while (1) {
      u16 tmp_187;
      tmp_187 = mip_filter_heading_source(& device_interface,(u8)0x05,
                                          (u8 *)0);
      if (! ((int)tmp_187 != 0)) break;
    }
    printf("\n\n"); /* printf_va_428 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_429 */
    printf("Setting Zero Angular-Rate-Update threshold\n"); /* printf_va_430 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_431 */
    zero_update_control.threshold = (float)0.05;
    zero_update_control.enable = (u8)1;
    while (1) {
      u16 tmp_188;
      tmp_188 = mip_filter_zero_angular_rate_update_control(& device_interface,
                                                            (u8)0x01,
                                                            & zero_update_control);
      if (! ((int)tmp_188 != 0)) break;
    }
    while (1) {
      u16 tmp_189;
      tmp_189 = mip_filter_zero_angular_rate_update_control(& device_interface,
                                                            (u8)0x02,
                                                            & zero_update_readback);
      if (! ((int)tmp_189 != 0)) break;
    }
    if ((int)zero_update_control.enable != (int)zero_update_readback.enable) 
      printf("ERROR configuring Zero Angular Rate Update.\n"); /* printf_va_432 */
    else 
      if (zero_update_control.threshold != zero_update_readback.threshold) 
        printf("ERROR configuring Zero Angular Rate Update.\n"); /* printf_va_433 */
    printf("\n\nResetting Zero Angular Rate Update Control to default parameters.\n\n"); /* printf_va_434 */
    while (1) {
      u16 tmp_190;
      tmp_190 = mip_filter_zero_angular_rate_update_control(& device_interface,
                                                            (u8)0x05,
                                                            (mip_filter_zero_update_command *)0);
      if (! ((int)tmp_190 != 0)) break;
    }
    printf("\n\n"); /* printf_va_435 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_436 */
    printf("Performing Tare Orientation Command\n"); /* printf_va_437 */
    printf("(This will only pass if the internal GPS solution is valid)\n"); /* printf_va_438 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_439 */
    printf("Re-initializing filter (required for tare)\n\n"); /* printf_va_440 */
    angles[2] = (float)0;
    angles[1] = angles[2];
    angles[0] = angles[1];
    while (1) {
      u16 tmp_191;
      tmp_191 = mip_filter_set_init_attitude(& device_interface,angles);
      if (! ((int)tmp_191 != 0)) break;
    }
    usleep((useconds_t)((double)5000 * 1000.0));
    i = (s16)1;
    while ((int)i < 8) {
      {
        u16 tmp_192;
        tmp_192 = mip_filter_tare_orientation(& device_interface,(u8)0x01,
                                              (u8)i);
        if ((int)tmp_192 != 0) {
          printf("ERROR: Failed Axis - "); /* printf_va_441 */
          if ((int)i & 0x01) printf(" Roll Axis "); /* printf_va_442 */
          if ((int)i & 0x02) printf(" Pitch Axis "); /* printf_va_443 */
          if ((int)i & 0x04) printf(" Yaw Axis "); /* printf_va_444 */
        }
        else {
          printf("Tare Configuration = %d\n",(int)i); /* printf_va_445 */
          printf("Tared -"); /* printf_va_446 */
          if ((int)i & 0x01) printf(" Roll Axis "); /* printf_va_447 */
          if ((int)i & 0x02) printf(" Pitch Axis "); /* printf_va_448 */
          if ((int)i & 0x04) printf(" Yaw Axis "); /* printf_va_449 */
          printf("\n\n"); /* printf_va_450 */
        }
        usleep((useconds_t)((double)1000 * 1000.0));
      }
      i = (s16)((int)i + 1);
    }
    printf("\n\nRestoring Orientation to default value.\n\n"); /* printf_va_451 */
    while (1) {
      u16 tmp_193;
      tmp_193 = mip_filter_tare_orientation(& device_interface,(u8)0x05,
                                            (u8)0);
      if (! ((int)tmp_193 != 0)) break;
    }
    printf("\n\n"); /* printf_va_452 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_453 */
    printf("Performing Commanded Zero-Velocity Update\n"); /* printf_va_454 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_455 */
    while (1) {
      u16 tmp_194;
      tmp_194 = mip_filter_commanded_zero_velocity_update(& device_interface);
      if (! ((int)tmp_194 != 0)) break;
    }
    printf("\n\n"); /* printf_va_456 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_457 */
    printf("Performing Commanded Zero-Angular-Rate Update\n"); /* printf_va_458 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_459 */
    while (1) {
      u16 tmp_195;
      tmp_195 = mip_filter_commanded_zero_angular_rate_update(& device_interface);
      if (! ((int)tmp_195 != 0)) break;
    }
    printf("\n\n"); /* printf_va_460 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_461 */
    printf("Cycle through available declination sources\n"); /* printf_va_462 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_463 */
    i = (s16)3;
    while ((int)i >= 1) {
      declination_source_command = (u8)i;
      while (1) {
        u16 tmp_196;
        tmp_196 = mip_filter_declination_source(& device_interface,(u8)0x01,
                                                & declination_source_command);
        if (! ((int)tmp_196 != 0)) break;
      }
      while (1) {
        u16 tmp_197;
        tmp_197 = mip_filter_declination_source(& device_interface,(u8)0x02,
                                                & declination_source_readback);
        if (! ((int)tmp_197 != 0)) break;
      }
      if ((int)declination_source_command == (int)declination_source_readback) 
        printf("Declination source successfully set to %d\n",(int)i); /* printf_va_464 */
      else printf("ERROR: Failed to set the declination source to %d!!!\n",
                  (int)i); /* printf_va_465 */
      i = (s16)((int)i - 1);
    }
    printf("\n\nLoading the default declination source.\n\n"); /* printf_va_466 */
    while (1) {
      u16 tmp_198;
      tmp_198 = mip_filter_declination_source(& device_interface,(u8)0x05,
                                              (u8 *)0);
      if (! ((int)tmp_198 != 0)) break;
    }
    printf("\n\n"); /* printf_va_467 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_468 */
    printf("Setting the accel magnitude error adaptive measurement values\n"); /* printf_va_469 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_470 */
    accel_magnitude_error_command.enable = (u8)0;
    accel_magnitude_error_command.low_pass_cutoff = (float)10;
    accel_magnitude_error_command.min_1sigma = (float)2.0;
    accel_magnitude_error_command.low_limit = (float)(- 2.0);
    accel_magnitude_error_command.high_limit = (float)2.0;
    accel_magnitude_error_command.low_limit_1sigma = (float)4.0;
    accel_magnitude_error_command.high_limit_1sigma = (float)4.0;
    while (1) {
      u16 tmp_199;
      tmp_199 = mip_filter_accel_magnitude_error_adaptive_measurement
      (& device_interface,(u8)0x01,& accel_magnitude_error_command);
      if (! ((int)tmp_199 != 0)) break;
    }
    while (1) {
      u16 tmp_200;
      tmp_200 = mip_filter_accel_magnitude_error_adaptive_measurement
      (& device_interface,(u8)0x02,& accel_magnitude_error_readback);
      if (! ((int)tmp_200 != 0)) break;
    }
    if ((int)accel_magnitude_error_command.enable == (int)accel_magnitude_error_readback.enable) {
      int tmp_201;
      tmp_201 = abs((int)(accel_magnitude_error_command.low_pass_cutoff - accel_magnitude_error_readback.low_pass_cutoff));
      if ((double)tmp_201 < 0.001) {
        int tmp_202;
        tmp_202 = abs((int)(accel_magnitude_error_command.min_1sigma - accel_magnitude_error_readback.min_1sigma));
        if ((double)tmp_202 < 0.001) {
          int tmp_203;
          tmp_203 = abs((int)(accel_magnitude_error_command.low_limit - accel_magnitude_error_readback.low_limit));
          if ((double)tmp_203 < 0.001) {
            int tmp_204;
            tmp_204 = abs((int)(accel_magnitude_error_command.high_limit - accel_magnitude_error_readback.high_limit));
            if ((double)tmp_204 < 0.001) {
              int tmp_205;
              tmp_205 = abs((int)(accel_magnitude_error_command.low_limit_1sigma - accel_magnitude_error_readback.low_limit_1sigma));
              if ((double)tmp_205 < 0.001) {
                int tmp_206;
                tmp_206 = abs((int)(accel_magnitude_error_command.high_limit_1sigma - accel_magnitude_error_readback.high_limit_1sigma));
                if ((double)tmp_206 < 0.001) printf("accel magnitude error adaptive measurement values successfully set.\n"); /* printf_va_471 */
                else goto _LAND_49;
              }
              else goto _LAND_49;
            }
            else goto _LAND_49;
          }
          else goto _LAND_49;
        }
        else goto _LAND_49;
      }
      else goto _LAND_49;
    }
    else {
      _LAND_49:
      {
        printf("ERROR: Failed to set accel magnitude error adaptive measurement values!!!\n"); /* printf_va_472 */
        printf("Sent values:     Enable: %i, Parameters: %f %f %f %f %f %f\n",
               (int)accel_magnitude_error_command.enable,
               (double)accel_magnitude_error_command.low_pass_cutoff,
               (double)accel_magnitude_error_command.min_1sigma,
               (double)accel_magnitude_error_command.low_limit,
               (double)accel_magnitude_error_command.high_limit,
               (double)accel_magnitude_error_command.low_limit_1sigma,
               (double)accel_magnitude_error_command.high_limit_1sigma); /* printf_va_473 */
        printf("Returned values: Enable: %i, Parameters: %f %f %f %f %f %f\n",
               (int)accel_magnitude_error_readback.enable,
               (double)accel_magnitude_error_readback.low_pass_cutoff,
               (double)accel_magnitude_error_readback.min_1sigma,
               (double)accel_magnitude_error_readback.low_limit,
               (double)accel_magnitude_error_readback.high_limit,
               (double)accel_magnitude_error_readback.low_limit_1sigma,
               (double)accel_magnitude_error_readback.high_limit_1sigma); /* printf_va_474 */
      }
    }
    printf("\n\nLoading the default accel magnitude error adaptive measurement values.\n\n"); /* printf_va_475 */
    while (1) {
      u16 tmp_207;
      tmp_207 = mip_filter_accel_magnitude_error_adaptive_measurement
      (& device_interface,(u8)0x05,
       (mip_filter_accel_magnitude_error_adaptive_measurement_command *)0);
      if (! ((int)tmp_207 != 0)) break;
    }
    printf("\n\n"); /* printf_va_476 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_477 */
    printf("Setting the mag magnitude error adaptive measurement values\n"); /* printf_va_478 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_479 */
    mag_magnitude_error_command.enable = (u8)0;
    mag_magnitude_error_command.low_pass_cutoff = (float)10;
    mag_magnitude_error_command.min_1sigma = (float)0.1;
    mag_magnitude_error_command.low_limit = (float)(- 1.0);
    mag_magnitude_error_command.high_limit = (float)1.0;
    mag_magnitude_error_command.low_limit_1sigma = (float)1.0;
    mag_magnitude_error_command.high_limit_1sigma = (float)1.0;
    while (1) {
      u16 tmp_208;
      tmp_208 = mip_filter_mag_magnitude_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x01,
                                                                    & mag_magnitude_error_command);
      if (! ((int)tmp_208 != 0)) break;
    }
    while (1) {
      u16 tmp_209;
      tmp_209 = mip_filter_mag_magnitude_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x02,
                                                                    & mag_magnitude_error_readback);
      if (! ((int)tmp_209 != 0)) break;
    }
    if ((int)mag_magnitude_error_command.enable == (int)mag_magnitude_error_readback.enable) {
      int tmp_210;
      tmp_210 = abs((int)(mag_magnitude_error_command.low_pass_cutoff - mag_magnitude_error_readback.low_pass_cutoff));
      if ((double)tmp_210 < 0.001) {
        int tmp_211;
        tmp_211 = abs((int)(mag_magnitude_error_command.min_1sigma - mag_magnitude_error_readback.min_1sigma));
        if ((double)tmp_211 < 0.001) {
          int tmp_212;
          tmp_212 = abs((int)(mag_magnitude_error_command.low_limit - mag_magnitude_error_readback.low_limit));
          if ((double)tmp_212 < 0.001) {
            int tmp_213;
            tmp_213 = abs((int)(mag_magnitude_error_command.high_limit - mag_magnitude_error_readback.high_limit));
            if ((double)tmp_213 < 0.001) {
              int tmp_214;
              tmp_214 = abs((int)(mag_magnitude_error_command.low_limit_1sigma - mag_magnitude_error_readback.low_limit_1sigma));
              if ((double)tmp_214 < 0.001) {
                int tmp_215;
                tmp_215 = abs((int)(mag_magnitude_error_command.high_limit_1sigma - mag_magnitude_error_readback.high_limit_1sigma));
                if ((double)tmp_215 < 0.001) printf("mag magnitude error adaptive measurement values successfully set.\n"); /* printf_va_480 */
                else goto _LAND_55;
              }
              else goto _LAND_55;
            }
            else goto _LAND_55;
          }
          else goto _LAND_55;
        }
        else goto _LAND_55;
      }
      else goto _LAND_55;
    }
    else {
      _LAND_55:
      {
        printf("ERROR: Failed to set mag magnitude error adaptive measurement values!!!\n"); /* printf_va_481 */
        printf("Sent values:     Enable: %i, Parameters: %f %f %f %f %f %f\n",
               (int)mag_magnitude_error_command.enable,
               (double)mag_magnitude_error_command.low_pass_cutoff,
               (double)mag_magnitude_error_command.min_1sigma,
               (double)mag_magnitude_error_command.low_limit,
               (double)mag_magnitude_error_command.high_limit,
               (double)mag_magnitude_error_command.low_limit_1sigma,
               (double)mag_magnitude_error_command.high_limit_1sigma); /* printf_va_482 */
        printf("Returned values: Enable: %i, Parameters: %f %f %f %f %f %f\n",
               (int)mag_magnitude_error_readback.enable,
               (double)mag_magnitude_error_readback.low_pass_cutoff,
               (double)mag_magnitude_error_readback.min_1sigma,
               (double)mag_magnitude_error_readback.low_limit,
               (double)mag_magnitude_error_readback.high_limit,
               (double)mag_magnitude_error_readback.low_limit_1sigma,
               (double)mag_magnitude_error_readback.high_limit_1sigma); /* printf_va_483 */
      }
    }
    printf("\n\nLoading the default mag magnitude error adaptive measurement values.\n\n"); /* printf_va_484 */
    while (1) {
      u16 tmp_216;
      tmp_216 = mip_filter_mag_magnitude_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x05,
                                                                    (mip_filter_magnetometer_magnitude_error_adaptive_measurement_command *)0);
      if (! ((int)tmp_216 != 0)) break;
    }
    printf("\n\n"); /* printf_va_485 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_486 */
    printf("Setting the mag dip angle error adaptive measurement values\n"); /* printf_va_487 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_488 */
    mag_dip_angle_error_command.enable = (u8)0;
    mag_dip_angle_error_command.low_pass_cutoff = (float)10;
    mag_dip_angle_error_command.min_1sigma = (float)0.1;
    mag_dip_angle_error_command.high_limit = (float)((90.0 * 3.14) / 180.0);
    mag_dip_angle_error_command.high_limit_1sigma = (float)2.0;
    while (1) {
      u16 tmp_217;
      tmp_217 = mip_filter_mag_dip_angle_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x01,
                                                                    & mag_dip_angle_error_command);
      if (! ((int)tmp_217 != 0)) break;
    }
    while (1) {
      u16 tmp_218;
      tmp_218 = mip_filter_mag_dip_angle_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x02,
                                                                    & mag_dip_angle_error_readback);
      if (! ((int)tmp_218 != 0)) break;
    }
    if ((int)mag_dip_angle_error_command.enable == (int)mag_magnitude_error_readback.enable) {
      int tmp_219;
      tmp_219 = abs((int)(mag_dip_angle_error_command.low_pass_cutoff - mag_dip_angle_error_readback.low_pass_cutoff));
      if ((double)tmp_219 < 0.001) {
        int tmp_220;
        tmp_220 = abs((int)(mag_dip_angle_error_command.min_1sigma - mag_dip_angle_error_readback.min_1sigma));
        if ((double)tmp_220 < 0.001) {
          int tmp_221;
          tmp_221 = abs((int)(mag_dip_angle_error_command.high_limit - mag_dip_angle_error_readback.high_limit));
          if ((double)tmp_221 < 0.001) {
            int tmp_222;
            tmp_222 = abs((int)(mag_dip_angle_error_command.high_limit_1sigma - mag_dip_angle_error_readback.high_limit_1sigma));
            if ((double)tmp_222 < 0.001) printf("mag dip angle error adaptive measurement values successfully set.\n"); /* printf_va_489 */
            else goto _LAND_59;
          }
          else goto _LAND_59;
        }
        else goto _LAND_59;
      }
      else goto _LAND_59;
    }
    else {
      _LAND_59:
      {
        printf("ERROR: Failed to set mag dip angle error adaptive measurement values!!!\n"); /* printf_va_490 */
        printf("Sent values:     Enable: %i, Parameters: %f %f %f %f\n",
               (int)mag_dip_angle_error_command.enable,
               (double)mag_dip_angle_error_command.low_pass_cutoff,
               (double)mag_dip_angle_error_command.min_1sigma,
               (double)mag_dip_angle_error_command.high_limit,
               (double)mag_dip_angle_error_command.high_limit_1sigma); /* printf_va_491 */
        printf("Returned values: Enable: %i, Parameters: %f %f %f %f\n",
               (int)mag_dip_angle_error_readback.enable,
               (double)mag_dip_angle_error_readback.low_pass_cutoff,
               (double)mag_dip_angle_error_readback.min_1sigma,
               (double)mag_dip_angle_error_readback.high_limit,
               (double)mag_dip_angle_error_readback.high_limit_1sigma); /* printf_va_492 */
      }
    }
    printf("\n\nLoading the default mag magnitude error adaptive measurement values.\n\n"); /* printf_va_493 */
    while (1) {
      u16 tmp_223;
      tmp_223 = mip_filter_mag_dip_angle_error_adaptive_measurement(& device_interface,
                                                                    (u8)0x05,
                                                                    (mip_filter_magnetometer_dip_angle_error_adaptive_measurement_command *)0);
      if (! ((int)tmp_223 != 0)) break;
    }
    printf("\n\n"); /* printf_va_494 */
    usleep((useconds_t)((double)1500 * 1000.0));
    tmp_224 = mip_interface_add_descriptor_set_callback(& device_interface,
                                                        (u8)0x82,(void *)0,
                                                        & filter_packet_callback);
    if ((int)tmp_224 != 0) {
      __retres = -1;
      goto return_label;
    }
    tmp_225 = mip_interface_add_descriptor_set_callback(& device_interface,
                                                        (u8)0x80,(void *)0,
                                                        & ahrs_packet_callback);
    if ((int)tmp_225 != 0) {
      __retres = -1;
      goto return_label;
    }
    tmp_226 = mip_interface_add_descriptor_set_callback(& device_interface,
                                                        (u8)0x81,(void *)0,
                                                        & gps_packet_callback);
    if ((int)tmp_226 != 0) {
      __retres = -1;
      goto return_label;
    }
    enable_data_stats_output = (u8)1;
    printf("----------------------------------------------------------------------\n"); /* printf_va_495 */
    printf("Setting the AHRS message format\n"); /* printf_va_496 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_497 */
    data_stream_format_descriptors[0] = (u8)0x04;
    data_stream_format_descriptors[1] = (u8)0x05;
    data_stream_format_decimation[0] = (u16)0x32;
    data_stream_format_decimation[1] = (u16)0x32;
    data_stream_format_num_entries = (u8)2;
    while (1) {
      u16 tmp_227;
      tmp_227 = mip_3dm_cmd_ahrs_message_format(& device_interface,(u8)0x01,
                                                & data_stream_format_num_entries,
                                                data_stream_format_descriptors,
                                                data_stream_format_decimation);
      if (! ((int)tmp_227 != 0)) break;
    }
    printf("\n\n"); /* printf_va_498 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_499 */
    printf("Polling AHRS Data.\n"); /* printf_va_500 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_501 */
    while (1) {
      u16 tmp_228;
      tmp_228 = mip_3dm_cmd_poll_ahrs(& device_interface,(u8)0x00,
                                      data_stream_format_num_entries,
                                      data_stream_format_descriptors);
      if (! ((int)tmp_228 != 0)) break;
    }
    printf("\n\n"); /* printf_va_502 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_503 */
    printf("Setting the GPS datastream format\n"); /* printf_va_504 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_505 */
    data_stream_format_descriptors[0] = (u8)0x03;
    data_stream_format_descriptors[1] = (u8)0x05;
    data_stream_format_descriptors[2] = (u8)0x09;
    data_stream_format_decimation[0] = (u16)0x04;
    data_stream_format_decimation[1] = (u16)0x04;
    data_stream_format_decimation[2] = (u16)0x04;
    data_stream_format_num_entries = (u8)3;
    while (1) {
      u16 tmp_229;
      tmp_229 = mip_3dm_cmd_gps_message_format(& device_interface,(u8)0x01,
                                               & data_stream_format_num_entries,
                                               data_stream_format_descriptors,
                                               data_stream_format_decimation);
      if (! ((int)tmp_229 != 0)) break;
    }
    printf("\n\n"); /* printf_va_506 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_507 */
    printf("Polling GPS Data.\n"); /* printf_va_508 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_509 */
    while (1) {
      u16 tmp_230;
      tmp_230 = mip_3dm_cmd_poll_gps(& device_interface,(u8)0x00,
                                     data_stream_format_num_entries,
                                     data_stream_format_descriptors);
      if (! ((int)tmp_230 != 0)) break;
    }
    printf("\n\n"); /* printf_va_510 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_511 */
    printf("Setting the Estimation Filter datastream format\n"); /* printf_va_512 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_513 */
    data_stream_format_descriptors[0] = (u8)0x01;
    data_stream_format_descriptors[1] = (u8)0x02;
    data_stream_format_descriptors[2] = (u8)0x05;
    data_stream_format_decimation[0] = (u16)0x32;
    data_stream_format_decimation[1] = (u16)0x32;
    data_stream_format_decimation[2] = (u16)0x32;
    data_stream_format_num_entries = (u8)3;
    while (1) {
      u16 tmp_231;
      tmp_231 = mip_3dm_cmd_filter_message_format(& device_interface,
                                                  (u8)0x01,
                                                  & data_stream_format_num_entries,
                                                  data_stream_format_descriptors,
                                                  data_stream_format_decimation);
      if (! ((int)tmp_231 != 0)) break;
    }
    printf("\n\n"); /* printf_va_514 */
    usleep((useconds_t)((double)1500 * 1000.0));
    printf("----------------------------------------------------------------------\n"); /* printf_va_515 */
    printf("Polling Estimation Filter Data.\n"); /* printf_va_516 */
    printf("----------------------------------------------------------------------\n\n"); /* printf_va_517 */
    while (1) {
      u16 tmp_232;
      tmp_232 = mip_3dm_cmd_poll_filter(& device_interface,(u8)0x00,
                                        data_stream_format_num_entries,
                                        data_stream_format_descriptors);
      if (! ((int)tmp_232 != 0)) break;
    }
    printf("\n\n"); /* printf_va_518 */
    usleep((useconds_t)((double)1500 * 1000.0));
  }
  else printf("ERROR: Standard mode not established\n\n"); /* printf_va_519 */
  enable_data_stats_output = (u8)0;
  printf("\n----------------------------------------------------------------------\n"); /* printf_va_520 */
  printf("Enable the AHRS datastream\n"); /* printf_va_521 */
  printf("----------------------------------------------------------------------\n\n"); /* printf_va_522 */
  enable = (u8)0x01;
  while (1) {
    u16 tmp_233;
    tmp_233 = mip_3dm_cmd_continuous_data_stream(& device_interface,(u8)0x01,
                                                 (u8)0x01,& enable);
    if (! ((int)tmp_233 != 0)) break;
  }
  printf("\n\n"); /* printf_va_523 */
  usleep((useconds_t)((double)1500 * 1000.0));
  printf("----------------------------------------------------------------------\n"); /* printf_va_524 */
  printf("Enable the FILTER datastream\n"); /* printf_va_525 */
  printf("----------------------------------------------------------------------\n\n"); /* printf_va_526 */
  enable = (u8)0x01;
  while (1) {
    u16 tmp_234;
    tmp_234 = mip_3dm_cmd_continuous_data_stream(& device_interface,(u8)0x01,
                                                 (u8)0x03,& enable);
    if (! ((int)tmp_234 != 0)) break;
  }
  printf("\n\n"); /* printf_va_527 */
  usleep((useconds_t)((double)1500 * 1000.0));
  printf("----------------------------------------------------------------------\n"); /* printf_va_528 */
  printf("Enable the GPS datastream\n"); /* printf_va_529 */
  printf("----------------------------------------------------------------------\n"); /* printf_va_530 */
  enable = (u8)0x01;
  while (1) {
    u16 tmp_235;
    tmp_235 = mip_3dm_cmd_continuous_data_stream(& device_interface,(u8)0x01,
                                                 (u8)0x02,& enable);
    if (! ((int)tmp_235 != 0)) break;
  }
  printf("\n\n"); /* printf_va_531 */
  usleep((useconds_t)((double)1500 * 1000.0));
  printf("----------------------------------------------------------------------\n"); /* printf_va_532 */
  printf("Processing incoming packets\n"); /* printf_va_533 */
  printf("----------------------------------------------------------------------\n\n\n"); /* printf_va_534 */
  enable_data_stats_output = (u8)1;
  while (1) {
    mip_interface_update(& device_interface);
    usleep((useconds_t)((double)1 * 1000.0));
  }
  return_label: return __retres;
}

void filter_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                            u8 callback_type)
{
  mip_field_header *field_header;
  u8 *field_data;
  u16 field_offset = (u16)0;
  switch ((int)callback_type) {
    case 0:
    {
      filter_valid_packet_count ++;
      while (1) {
        u16 tmp;
        tmp = mip_get_next_field(packet,& field_header,& field_data,
                                 & field_offset);
        if (! ((int)tmp == 0)) break;
        switch ((int)field_header->descriptor) {
          case 0x01:
          {
            memcpy((void *)(& curr_filter_pos),(void const *)field_data,
                   sizeof(mip_filter_llh_pos));
            mip_filter_llh_pos_byteswap(& curr_filter_pos);
          }
          break;
          case 0x02:
          {
            memcpy((void *)(& curr_filter_vel),(void const *)field_data,
                   sizeof(mip_filter_ned_velocity));
            mip_filter_ned_velocity_byteswap(& curr_filter_vel);
          }
          break;
          case 0x05:
          {
            memcpy((void *)(& curr_filter_angles),(void const *)field_data,
                   sizeof(mip_filter_attitude_euler_angles));
            mip_filter_attitude_euler_angles_byteswap(& curr_filter_angles);
          }
          break;
          default: break;
        }
      }
    }
    break;
    case 1: filter_checksum_error_packet_count ++;
    break;
    case 2: filter_timeout_packet_count ++;
    break;
    default: break;
  }
  print_packet_stats();
  return;
}

void ahrs_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                          u8 callback_type)
{
  mip_field_header *field_header;
  u8 *field_data;
  u16 field_offset = (u16)0;
  switch ((int)callback_type) {
    case 0:
    {
      ahrs_valid_packet_count ++;
      while (1) {
        u16 tmp;
        tmp = mip_get_next_field(packet,& field_header,& field_data,
                                 & field_offset);
        if (! ((int)tmp == 0)) break;
        switch ((int)field_header->descriptor) {
          case 0x04:
          {
            memcpy((void *)(& curr_ahrs_accel),(void const *)field_data,
                   sizeof(mip_ahrs_scaled_accel));
            mip_ahrs_scaled_accel_byteswap(& curr_ahrs_accel);
          }
          break;
          case 0x05:
          {
            memcpy((void *)(& curr_ahrs_gyro),(void const *)field_data,
                   sizeof(mip_ahrs_scaled_gyro));
            mip_ahrs_scaled_gyro_byteswap(& curr_ahrs_gyro);
          }
          break;
          case 0x06:
          {
            memcpy((void *)(& curr_ahrs_mag),(void const *)field_data,
                   sizeof(mip_ahrs_scaled_mag));
            mip_ahrs_scaled_mag_byteswap(& curr_ahrs_mag);
          }
          break;
          default: break;
        }
      }
    }
    break;
    case 1: ahrs_checksum_error_packet_count ++;
    break;
    case 2: ahrs_timeout_packet_count ++;
    break;
    default: break;
  }
  print_packet_stats();
  return;
}

void gps_packet_callback(void *user_ptr, u8 *packet, u16 packet_size,
                         u8 callback_type)
{
  mip_field_header *field_header;
  u8 *field_data;
  u16 field_offset = (u16)0;
  switch ((int)callback_type) {
    case 0:
    {
      gps_valid_packet_count ++;
      while (1) {
        u16 tmp;
        tmp = mip_get_next_field(packet,& field_header,& field_data,
                                 & field_offset);
        if (! ((int)tmp == 0)) break;
        switch ((int)field_header->descriptor) {
          case 0x03:
          {
            memcpy((void *)(& curr_llh_pos),(void const *)field_data,
                   sizeof(mip_gps_llh_pos));
            mip_gps_llh_pos_byteswap(& curr_llh_pos);
          }
          break;
          case 0x05:
          {
            memcpy((void *)(& curr_ned_vel),(void const *)field_data,
                   sizeof(mip_gps_ned_vel));
            mip_gps_ned_vel_byteswap(& curr_ned_vel);
          }
          break;
          case 0x09:
          {
            memcpy((void *)(& curr_gps_time),(void const *)field_data,
                   sizeof(mip_gps_time));
            mip_gps_time_byteswap(& curr_gps_time);
          }
          break;
          default: break;
        }
      }
    }
    break;
    case 1: gps_checksum_error_packet_count ++;
    break;
    case 2: gps_timeout_packet_count ++;
    break;
    default: break;
  }
  print_packet_stats();
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_535(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_536(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_537(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_538(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_539(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_540(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_541(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_542(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_543(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_544(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_545(char const * restrict format);

void print_command_line_usage(void)
{
  printf("\n\n"); /* printf_va_535 */
  printf("Usage:\n"); /* printf_va_536 */
  printf("-----------------------------------------------------------------------\n\n"); /* printf_va_537 */
  printf("   GX4-45_Test [com_port_num] [baudrate]\n"); /* printf_va_538 */
  printf("\n\n"); /* printf_va_539 */
  printf("   Example: \"GX4-45_Test 1 115200\", Opens a connection to the \n"); /* printf_va_540 */
  printf("             GX4-45 on COM1, with a baudrate of 115200.\n"); /* printf_va_541 */
  printf("\n\n"); /* printf_va_542 */
  printf("   [ ] - required command input.\n"); /* printf_va_543 */
  printf("\n-----------------------------------------------------------------------\n"); /* printf_va_544 */
  printf("\n\n"); /* printf_va_545 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_546(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_547(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_548(char const * restrict format);

void print_header(void)
{
  printf("\n"); /* printf_va_546 */
  printf("GX4-45 Test Program\n"); /* printf_va_547 */
  printf("Copyright 2013. LORD Microstrain\n\n"); /* printf_va_548 */
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: param3), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, param3, param2, param1, param0;
 */
int printf_va_549(char const * restrict format, unsigned int param0,
                  unsigned int param1, unsigned int param2,
                  unsigned int param3, unsigned int param4,
                  unsigned int param5);

void print_packet_stats(void)
{
  if (enable_data_stats_output) printf("\r%u FILTER (%u errors)    %u AHRS (%u errors)    %u GPS (%u errors) Packets",
                                       filter_valid_packet_count,
                                       filter_timeout_packet_count + filter_checksum_error_packet_count,
                                       ahrs_valid_packet_count,
                                       ahrs_timeout_packet_count + ahrs_checksum_error_packet_count,
                                       gps_valid_packet_count,
                                       gps_timeout_packet_count + gps_checksum_error_packet_count); /* printf_va_549 */
  return;
}

u16 mip_3dm_cmd_hw_specific_imu_device_status(mip_interface *device_interface_0,
                                              u16 model_number,
                                              u8 status_selector,
                                              u8 *response_buffer)
{
  u16 __retres;
  gx4_imu_basic_status_field *basic_ptr;
  gx4_imu_diagnostic_device_status_field *diagnostic_ptr;
  u16 response_size = (u16)sizeof(mip_field_header);
  if ((int)status_selector == 1) response_size = (u16)((unsigned int)response_size + sizeof(gx4_imu_basic_status_field));
  else 
    if ((int)status_selector == 2) response_size = (u16)((unsigned int)response_size + sizeof(gx4_imu_diagnostic_device_status_field));
  while (1) {
    u16 tmp;
    tmp = mip_3dm_cmd_device_status(device_interface_0,model_number,
                                    status_selector,response_buffer,
                                    & response_size);
    if (! ((int)tmp != 0)) break;
  }
  if ((int)status_selector == 1) 
    if ((unsigned int)response_size != sizeof(gx4_imu_basic_status_field)) {
      __retres = (u16)1;
      goto return_label;
    }
    else {
      basic_ptr = (gx4_imu_basic_status_field *)response_buffer;
      byteswap_inplace((void *)(& basic_ptr->device_model),
                       (u16)sizeof(basic_ptr->device_model));
      byteswap_inplace((void *)(& basic_ptr->status_flags),
                       (u16)sizeof(basic_ptr->status_flags));
      byteswap_inplace((void *)(& basic_ptr->system_timer_ms),
                       (u16)sizeof(basic_ptr->system_timer_ms));
    }
  else 
    if ((int)status_selector == 2) 
      if ((unsigned int)response_size != sizeof(gx4_imu_diagnostic_device_status_field)) {
        __retres = (u16)1;
        goto return_label;
      }
      else {
        diagnostic_ptr = (gx4_imu_diagnostic_device_status_field *)response_buffer;
        byteswap_inplace((void *)(& diagnostic_ptr->device_model),
                         (u16)sizeof(diagnostic_ptr->device_model));
        byteswap_inplace((void *)(& diagnostic_ptr->status_flags),
                         (u16)sizeof(diagnostic_ptr->status_flags));
        byteswap_inplace((void *)(& diagnostic_ptr->system_timer_ms),
                         (u16)sizeof(diagnostic_ptr->system_timer_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->gyro_range),
                         (u16)sizeof(diagnostic_ptr->gyro_range));
        byteswap_inplace((void *)(& diagnostic_ptr->mag_range),
                         (u16)sizeof(diagnostic_ptr->mag_range));
        byteswap_inplace((void *)(& diagnostic_ptr->pressure_range),
                         (u16)sizeof(diagnostic_ptr->pressure_range));
        byteswap_inplace((void *)(& diagnostic_ptr->temp_degc),
                         (u16)sizeof(diagnostic_ptr->temp_degc));
        byteswap_inplace((void *)(& diagnostic_ptr->last_temp_read_ms),
                         (u16)sizeof(diagnostic_ptr->last_temp_read_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->num_gps_pps_triggers),
                         (u16)sizeof(diagnostic_ptr->num_gps_pps_triggers));
        byteswap_inplace((void *)(& diagnostic_ptr->last_gps_pps_trigger_ms),
                         (u16)sizeof(diagnostic_ptr->last_gps_pps_trigger_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->dropped_packets),
                         (u16)sizeof(diagnostic_ptr->dropped_packets));
        byteswap_inplace((void *)(& diagnostic_ptr->com_port_bytes_written),
                         (u16)sizeof(diagnostic_ptr->com_port_bytes_written));
        byteswap_inplace((void *)(& diagnostic_ptr->com_port_bytes_read),
                         (u16)sizeof(diagnostic_ptr->com_port_bytes_read));
        byteswap_inplace((void *)(& diagnostic_ptr->com_port_write_overruns),
                         (u16)sizeof(diagnostic_ptr->com_port_write_overruns));
        byteswap_inplace((void *)(& diagnostic_ptr->com_port_read_overruns),
                         (u16)sizeof(diagnostic_ptr->com_port_read_overruns));
      }
    else {
      __retres = (u16)1;
      goto return_label;
    }
  __retres = (u16)0;
  return_label: return __retres;
}

u16 mip_3dm_cmd_hw_specific_device_status(mip_interface *device_interface_0,
                                          u16 model_number,
                                          u8 status_selector,
                                          u8 *response_buffer)
{
  u16 __retres;
  gx4_45_basic_status_field *basic_ptr;
  gx4_45_diagnostic_device_status_field *diagnostic_ptr;
  u16 response_size = (u16)sizeof(mip_field_header);
  if ((int)status_selector == 1) response_size = (u16)((unsigned int)response_size + sizeof(gx4_45_basic_status_field));
  else 
    if ((int)status_selector == 2) response_size = (u16)((unsigned int)response_size + sizeof(gx4_45_diagnostic_device_status_field));
  while (1) {
    u16 tmp;
    tmp = mip_3dm_cmd_device_status(device_interface_0,model_number,
                                    status_selector,response_buffer,
                                    & response_size);
    if (! ((int)tmp != 0)) break;
  }
  if ((int)status_selector == 1) 
    if ((unsigned int)response_size != sizeof(gx4_45_basic_status_field)) {
      __retres = (u16)1;
      goto return_label;
    }
    else {
      basic_ptr = (gx4_45_basic_status_field *)response_buffer;
      byteswap_inplace((void *)(& basic_ptr->device_model),
                       (u16)sizeof(basic_ptr->device_model));
      byteswap_inplace((void *)(& basic_ptr->status_flags),
                       (u16)sizeof(basic_ptr->status_flags));
      byteswap_inplace((void *)(& basic_ptr->system_state),
                       (u16)sizeof(basic_ptr->system_state));
      byteswap_inplace((void *)(& basic_ptr->system_timer_ms),
                       (u16)sizeof(basic_ptr->system_timer_ms));
    }
  else 
    if ((int)status_selector == 2) 
      if ((unsigned int)response_size != sizeof(gx4_45_diagnostic_device_status_field)) {
        __retres = (u16)1;
        goto return_label;
      }
      else {
        diagnostic_ptr = (gx4_45_diagnostic_device_status_field *)response_buffer;
        byteswap_inplace((void *)(& diagnostic_ptr->device_model),
                         (u16)sizeof(diagnostic_ptr->device_model));
        byteswap_inplace((void *)(& diagnostic_ptr->status_flags),
                         (u16)sizeof(diagnostic_ptr->status_flags));
        byteswap_inplace((void *)(& diagnostic_ptr->system_state),
                         (u16)sizeof(diagnostic_ptr->system_state));
        byteswap_inplace((void *)(& diagnostic_ptr->system_timer_ms),
                         (u16)sizeof(diagnostic_ptr->system_timer_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->num_gps_pps_triggers),
                         (u16)sizeof(diagnostic_ptr->num_gps_pps_triggers));
        byteswap_inplace((void *)(& diagnostic_ptr->last_gps_pps_trigger_ms),
                         (u16)sizeof(diagnostic_ptr->last_gps_pps_trigger_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->imu_dropped_packets),
                         (u16)sizeof(diagnostic_ptr->imu_dropped_packets));
        byteswap_inplace((void *)(& diagnostic_ptr->gps_dropped_packets),
                         (u16)sizeof(diagnostic_ptr->gps_dropped_packets));
        byteswap_inplace((void *)(& diagnostic_ptr->filter_dropped_packets),
                         (u16)sizeof(diagnostic_ptr->filter_dropped_packets));
        byteswap_inplace((void *)(& diagnostic_ptr->com1_port_bytes_written),
                         (u16)sizeof(diagnostic_ptr->com1_port_bytes_written));
        byteswap_inplace((void *)(& diagnostic_ptr->com1_port_bytes_read),
                         (u16)sizeof(diagnostic_ptr->com1_port_bytes_read));
        byteswap_inplace((void *)(& diagnostic_ptr->com1_port_write_overruns),
                         (u16)sizeof(diagnostic_ptr->com1_port_write_overruns));
        byteswap_inplace((void *)(& diagnostic_ptr->com1_port_read_overruns),
                         (u16)sizeof(diagnostic_ptr->com1_port_read_overruns));
        byteswap_inplace((void *)(& diagnostic_ptr->imu_parser_errors),
                         (u16)sizeof(diagnostic_ptr->imu_parser_errors));
        byteswap_inplace((void *)(& diagnostic_ptr->imu_message_count),
                         (u16)sizeof(diagnostic_ptr->imu_message_count));
        byteswap_inplace((void *)(& diagnostic_ptr->imu_last_message_ms),
                         (u16)sizeof(diagnostic_ptr->imu_last_message_ms));
        byteswap_inplace((void *)(& diagnostic_ptr->gps_parser_errors),
                         (u16)sizeof(diagnostic_ptr->gps_parser_errors));
        byteswap_inplace((void *)(& diagnostic_ptr->gps_message_count),
                         (u16)sizeof(diagnostic_ptr->gps_message_count));
        byteswap_inplace((void *)(& diagnostic_ptr->gps_last_message_ms),
                         (u16)sizeof(diagnostic_ptr->gps_last_message_ms));
      }
    else {
      __retres = (u16)1;
      goto return_label;
    }
  __retres = (u16)0;
  return_label: return __retres;
}


