/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "assert.h"
#include "errno.h"
#include "math.h"
#include "signal.h"
#include "stdarg.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.c"
#include "string.h"
#include "strings.h"
#include "sys/times.h"
#include "time.h"
int dummy(float a_0[30000], float b_0[30000], float c_0[30000],
          float d_0[30000], float e_0[30000], float aa_0[256][256],
          float bb_0[256][256], float cc_0[256][256], float s)
{
  int __retres;
  __retres = 0;
  return __retres;
}

float __attribute__((__aligned__(16))) X[32000];
float __attribute__((__aligned__(16))) Y[32000];
float __attribute__((__aligned__(16))) Z[32000];
float __attribute__((__aligned__(16))) U[32000];
float __attribute__((__aligned__(16))) V[32000];
float array[256 * 256] __attribute__((__aligned__(16)));
float x[32000] __attribute__((__aligned__(16)));
float temp;
int temp_int;
float __attribute__((__aligned__(16))) a[32000];
float __attribute__((__aligned__(16))) b[32000];
float __attribute__((__aligned__(16))) c[32000];
float __attribute__((__aligned__(16))) d[32000];
float __attribute__((__aligned__(16))) e[32000];
float __attribute__((__aligned__(16))) aa[256][256];
float __attribute__((__aligned__(16))) bb[256][256];
float __attribute__((__aligned__(16))) cc[256][256];
float __attribute__((__aligned__(16))) tt[256][256];
int indx[32000] __attribute__((__aligned__(16)));
float * restrict xx;
float *yy;
int set1d(float arr[32000], float value, int stride)
{
  int __retres;
  if (stride == -1) {
    int i = 0;
    while (i < 32000) {
      *(arr + i) = (float)(1. / (double)((float)(i + 1)));
      i ++;
    }
  }
  else 
    if (stride == -2) {
      int i_0 = 0;
      while (i_0 < 32000) {
        *(arr + i_0) = (float)(1. / (double)((float)((i_0 + 1) * (i_0 + 1))));
        i_0 ++;
      }
    }
    else {
      int i_1 = 0;
      while (i_1 < 32000) {
        *(arr + i_1) = value;
        i_1 += stride;
      }
    }
  __retres = 0;
  return __retres;
}

int set1ds(int n, float arr[32000], float value, int stride)
{
  int __retres;
  if (stride == -1) {
    int i = 0;
    while (i < n) {
      *(arr + i) = (float)(1. / (double)((float)(i + 1)));
      i ++;
    }
  }
  else 
    if (stride == -2) {
      int i_0 = 0;
      while (i_0 < n) {
        *(arr + i_0) = (float)(1. / (double)((float)((i_0 + 1) * (i_0 + 1))));
        i_0 ++;
      }
    }
    else {
      int i_1 = 0;
      while (i_1 < n) {
        *(arr + i_1) = value;
        i_1 += stride;
      }
    }
  __retres = 0;
  return __retres;
}

int set2d(float arr[256][256], float value, int stride)
{
  int __retres;
  if (stride == -1) {
    int i = 0;
    while (i < 256) {
      {
        int j = 0;
        while (j < 256) {
          (*(arr + i))[j] = (float)(1. / (double)((float)(i + 1)));
          j ++;
        }
      }
      i ++;
    }
  }
  else 
    if (stride == -2) {
      int i_0 = 0;
      while (i_0 < 256) {
        {
          int j_0 = 0;
          while (j_0 < 256) {
            (*(arr + i_0))[j_0] = (float)(1. / (double)((float)((i_0 + 1) * (
                                                                i_0 + 1))));
            j_0 ++;
          }
        }
        i_0 ++;
      }
    }
    else {
      int i_1 = 0;
      while (i_1 < 256) {
        {
          int j_1 = 0;
          while (j_1 < 256) {
            (*(arr + i_1))[j_1] = value;
            j_1 += stride;
          }
        }
        i_1 ++;
      }
    }
  __retres = 0;
  return __retres;
}

float sum1d(float arr[32000])
{
  float ret = (float)0.;
  {
    int i = 0;
    while (i < 32000) {
      ret += *(arr + i);
      i ++;
    }
  }
  return ret;
}

__inline static int s471s__fc_inline(void)
{
  int __retres;
  __retres = 0;
  return __retres;
}

__inline static float f__fc_inline(float a_0, float b_0)
{
  float __retres;
  __retres = a_0 * b_0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_6(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_8(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_11(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_12(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_13(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_14(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_15(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_16(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_17(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_18(char const * restrict format, double param0);

void check(int name)
{
  float suma = (float)0;
  float sumb = (float)0;
  float sumc = (float)0;
  float sumd = (float)0;
  float sume = (float)0;
  {
    int i = 0;
    while (i < 32000) {
      suma += (float)a[i];
      sumb += (float)b[i];
      sumc += (float)c[i];
      sumd += (float)d[i];
      sume += (float)e[i];
      i ++;
    }
  }
  float sumaa = (float)0;
  float sumbb = (float)0;
  float sumcc = (float)0;
  {
    int i_0 = 0;
    while (i_0 < 256) {
      {
        int j = 0;
        while (j < 256) {
          sumaa += (float)aa[i_0][j];
          sumbb += (float)bb[i_0][j];
          sumcc += (float)cc[i_0][j];
          j ++;
        }
      }
      i_0 ++;
    }
  }
  float sumarray = (float)0;
  {
    int i_1 = 0;
    while (i_1 < 256 * 256) {
      sumarray += array[i_1];
      i_1 ++;
    }
  }
  if (name == 1) printf("%f \n",(double)suma); /* printf_va_1 */
  if (name == 2) printf("%f \n",(double)sumb); /* printf_va_2 */
  if (name == 3) printf("%f \n",(double)sumc); /* printf_va_3 */
  if (name == 4) printf("%f \n",(double)sumd); /* printf_va_4 */
  if (name == 5) printf("%f \n",(double)sume); /* printf_va_5 */
  if (name == 11) printf("%f \n",(double)sumaa); /* printf_va_6 */
  if (name == 22) printf("%f \n",(double)sumbb); /* printf_va_7 */
  if (name == 33) printf("%f \n",(double)sumcc); /* printf_va_8 */
  if (name == 0) printf("%f \n",(double)sumarray); /* printf_va_9 */
  if (name == 12) printf("%f \n",(double)(suma + sumb)); /* printf_va_10 */
  if (name == 25) printf("%f \n",(double)(sumb + sume)); /* printf_va_11 */
  if (name == 13) printf("%f \n",(double)(suma + sumc)); /* printf_va_12 */
  if (name == 123) printf("%f \n",(double)((suma + sumb) + sumc)); /* printf_va_13 */
  if (name == 1122) printf("%f \n",(double)(sumaa + sumbb)); /* printf_va_14 */
  if (name == 112233) printf("%f \n",(double)((sumaa + sumbb) + sumcc)); /* printf_va_15 */
  if (name == 111) printf("%f \n",(double)(sumaa + suma)); /* printf_va_16 */
  if (name == -1) printf("%f \n",(double)temp); /* printf_va_17 */
  if (name == -12) printf("%f \n",(double)(temp + sumb)); /* printf_va_18 */
  return;
}

int init(char *name)
{
  int __retres;
  int tmp_134;
  float any = (float)0.;
  float zero = (float)0.;
  float half = (float).5;
  float one = (float)1.;
  float two = (float)2.;
  float small = (float).000001;
  int unit = 1;
  int frac = -1;
  int frac2 = -2;
  tmp_134 = strcmp((char const *)name,"s000 ");
  if (tmp_134) {
    int tmp_133;
    tmp_133 = strcmp((char const *)name,"s111 ");
    if (tmp_133) {
      int tmp_132;
      tmp_132 = strcmp((char const *)name,"s112 ");
      if (tmp_132) {
        int tmp_131;
        tmp_131 = strcmp((char const *)name,"s113 ");
        if (tmp_131) {
          int tmp_130;
          tmp_130 = strcmp((char const *)name,"s114 ");
          if (tmp_130) {
            int tmp_129;
            tmp_129 = strcmp((char const *)name,"s115 ");
            if (tmp_129) {
              int tmp_128;
              tmp_128 = strcmp((char const *)name,"s116 ");
              if (tmp_128) {
                int tmp_127;
                tmp_127 = strcmp((char const *)name,"s118 ");
                if (tmp_127) {
                  int tmp_126;
                  tmp_126 = strcmp((char const *)name,"s119 ");
                  if (tmp_126) {
                    int tmp_125;
                    tmp_125 = strcmp((char const *)name,"s121 ");
                    if (tmp_125) {
                      int tmp_124;
                      tmp_124 = strcmp((char const *)name,"s122 ");
                      if (tmp_124) {
                        int tmp_123;
                        tmp_123 = strcmp((char const *)name,"s123 ");
                        if (tmp_123) {
                          int tmp_122;
                          tmp_122 = strcmp((char const *)name,"s124 ");
                          if (tmp_122) {
                            int tmp_121;
                            tmp_121 = strcmp((char const *)name,"s125 ");
                            if (tmp_121) {
                              int tmp_120;
                              tmp_120 = strcmp((char const *)name,"s126 ");
                              if (tmp_120) {
                                int tmp_119;
                                tmp_119 = strcmp((char const *)name,"s127 ");
                                if (tmp_119) {
                                  int tmp_118;
                                  tmp_118 = strcmp((char const *)name,
                                                   "s128 ");
                                  if (tmp_118) {
                                    int tmp_117;
                                    tmp_117 = strcmp((char const *)name,
                                                     "s131 ");
                                    if (tmp_117) {
                                      int tmp_116;
                                      tmp_116 = strcmp((char const *)name,
                                                       "s132 ");
                                      if (tmp_116) {
                                        int tmp_115;
                                        tmp_115 = strcmp((char const *)name,
                                                         "s141 ");
                                        if (tmp_115) {
                                          int tmp_114;
                                          tmp_114 = strcmp((char const *)name,
                                                           "s151 ");
                                          if (tmp_114) {
                                            int tmp_113;
                                            tmp_113 = strcmp((char const *)name,
                                                             "s152 ");
                                            if (tmp_113) {
                                              int tmp_112;
                                              tmp_112 = strcmp((char const *)name,
                                                               "s161 ");
                                              if (tmp_112) {
                                                int tmp_111;
                                                tmp_111 = strcmp((char const *)name,
                                                                 "s162 ");
                                                if (tmp_111) {
                                                  int tmp_110;
                                                  tmp_110 = strcmp((char const *)name,
                                                                   "s171 ");
                                                  if (tmp_110) {
                                                    int tmp_109;
                                                    tmp_109 = strcmp((char const *)name,
                                                                    "s172 ");
                                                    if (tmp_109) {
                                                      int tmp_108;
                                                      tmp_108 = strcmp
                                                      ((char const *)name,
                                                       "s173 ");
                                                      if (tmp_108) {
                                                        int tmp_107;
                                                        tmp_107 = strcmp
                                                        ((char const *)name,
                                                         "s174 ");
                                                        if (tmp_107) {
                                                          int tmp_106;
                                                          tmp_106 = strcmp
                                                          ((char const *)name,
                                                           "s175 ");
                                                          if (tmp_106) {
                                                            int tmp_105;
                                                            tmp_105 = strcmp
                                                            ((char const *)name,
                                                             "s176 ");
                                                            if (tmp_105) {
                                                              int tmp_104;
                                                              tmp_104 = strcmp
                                                              ((char const *)name,
                                                               "s211 ");
                                                              if (tmp_104) {
                                                                int tmp_103;
                                                                tmp_103 = strcmp
                                                                ((char const *)name,
                                                                 "s212 ");
                                                                if (tmp_103) {
                                                                  int tmp_102;
                                                                  tmp_102 = strcmp
                                                                  ((char const *)name,
                                                                   "s221 ");
                                                                  if (tmp_102) {
                                                                    int tmp_101;
                                                                    tmp_101 = strcmp
                                                                    ((char const *)name,
                                                                    "s222 ");
                                                                    if (tmp_101) {
                                                                    int tmp_100;
                                                                    tmp_100 = strcmp
                                                                    ((char const *)name,
                                                                    "s231 ");
                                                                    if (tmp_100) {
                                                                    int tmp_99;
                                                                    tmp_99 = strcmp
                                                                    ((char const *)name,
                                                                    "s232 ");
                                                                    if (tmp_99) {
                                                                    int tmp_98;
                                                                    tmp_98 = strcmp
                                                                    ((char const *)name,
                                                                    "s233 ");
                                                                    if (tmp_98) {
                                                                    int tmp_97;
                                                                    tmp_97 = strcmp
                                                                    ((char const *)name,
                                                                    "s234 ");
                                                                    if (tmp_97) {
                                                                    int tmp_96;
                                                                    tmp_96 = strcmp
                                                                    ((char const *)name,
                                                                    "s235 ");
                                                                    if (tmp_96) {
                                                                    int tmp_95;
                                                                    tmp_95 = strcmp
                                                                    ((char const *)name,
                                                                    "s241 ");
                                                                    if (tmp_95) {
                                                                    int tmp_94;
                                                                    tmp_94 = strcmp
                                                                    ((char const *)name,
                                                                    "s242 ");
                                                                    if (tmp_94) {
                                                                    int tmp_93;
                                                                    tmp_93 = strcmp
                                                                    ((char const *)name,
                                                                    "s243 ");
                                                                    if (tmp_93) {
                                                                    int tmp_92;
                                                                    tmp_92 = strcmp
                                                                    ((char const *)name,
                                                                    "s244 ");
                                                                    if (tmp_92) {
                                                                    int tmp_91;
                                                                    tmp_91 = strcmp
                                                                    ((char const *)name,
                                                                    "s251 ");
                                                                    if (tmp_91) {
                                                                    int tmp_90;
                                                                    tmp_90 = strcmp
                                                                    ((char const *)name,
                                                                    "s252 ");
                                                                    if (tmp_90) {
                                                                    int tmp_89;
                                                                    tmp_89 = strcmp
                                                                    ((char const *)name,
                                                                    "s253 ");
                                                                    if (tmp_89) {
                                                                    int tmp_88;
                                                                    tmp_88 = strcmp
                                                                    ((char const *)name,
                                                                    "s254 ");
                                                                    if (tmp_88) {
                                                                    int tmp_87;
                                                                    tmp_87 = strcmp
                                                                    ((char const *)name,
                                                                    "s255 ");
                                                                    if (tmp_87) {
                                                                    int tmp_86;
                                                                    tmp_86 = strcmp
                                                                    ((char const *)name,
                                                                    "s256 ");
                                                                    if (tmp_86) {
                                                                    int tmp_85;
                                                                    tmp_85 = strcmp
                                                                    ((char const *)name,
                                                                    "s257 ");
                                                                    if (tmp_85) {
                                                                    int tmp_84;
                                                                    tmp_84 = strcmp
                                                                    ((char const *)name,
                                                                    "s258 ");
                                                                    if (tmp_84) {
                                                                    int tmp_83;
                                                                    tmp_83 = strcmp
                                                                    ((char const *)name,
                                                                    "s261 ");
                                                                    if (tmp_83) {
                                                                    int tmp_82;
                                                                    tmp_82 = strcmp
                                                                    ((char const *)name,
                                                                    "s271 ");
                                                                    if (tmp_82) {
                                                                    int tmp_81;
                                                                    tmp_81 = strcmp
                                                                    ((char const *)name,
                                                                    "s272 ");
                                                                    if (tmp_81) {
                                                                    int tmp_80;
                                                                    tmp_80 = strcmp
                                                                    ((char const *)name,
                                                                    "s273 ");
                                                                    if (tmp_80) {
                                                                    int tmp_79;
                                                                    tmp_79 = strcmp
                                                                    ((char const *)name,
                                                                    "s274 ");
                                                                    if (tmp_79) {
                                                                    int tmp_78;
                                                                    tmp_78 = strcmp
                                                                    ((char const *)name,
                                                                    "s275 ");
                                                                    if (tmp_78) {
                                                                    int tmp_77;
                                                                    tmp_77 = strcmp
                                                                    ((char const *)name,
                                                                    "s276 ");
                                                                    if (tmp_77) {
                                                                    int tmp_76;
                                                                    tmp_76 = strcmp
                                                                    ((char const *)name,
                                                                    "s277 ");
                                                                    if (tmp_76) {
                                                                    int tmp_75;
                                                                    tmp_75 = strcmp
                                                                    ((char const *)name,
                                                                    "s278 ");
                                                                    if (tmp_75) {
                                                                    int tmp_74;
                                                                    tmp_74 = strcmp
                                                                    ((char const *)name,
                                                                    "s279 ");
                                                                    if (tmp_74) {
                                                                    int tmp_73;
                                                                    tmp_73 = strcmp
                                                                    ((char const *)name,
                                                                    "s2710");
                                                                    if (tmp_73) {
                                                                    int tmp_72;
                                                                    tmp_72 = strcmp
                                                                    ((char const *)name,
                                                                    "s2711");
                                                                    if (tmp_72) {
                                                                    int tmp_71;
                                                                    tmp_71 = strcmp
                                                                    ((char const *)name,
                                                                    "s2712");
                                                                    if (tmp_71) {
                                                                    int tmp_70;
                                                                    tmp_70 = strcmp
                                                                    ((char const *)name,
                                                                    "s281 ");
                                                                    if (tmp_70) {
                                                                    int tmp_69;
                                                                    tmp_69 = strcmp
                                                                    ((char const *)name,
                                                                    "s291 ");
                                                                    if (tmp_69) {
                                                                    int tmp_68;
                                                                    tmp_68 = strcmp
                                                                    ((char const *)name,
                                                                    "s292 ");
                                                                    if (tmp_68) {
                                                                    int tmp_67;
                                                                    tmp_67 = strcmp
                                                                    ((char const *)name,
                                                                    "s293 ");
                                                                    if (tmp_67) {
                                                                    int tmp_66;
                                                                    tmp_66 = strcmp
                                                                    ((char const *)name,
                                                                    "s2101");
                                                                    if (tmp_66) {
                                                                    int tmp_65;
                                                                    tmp_65 = strcmp
                                                                    ((char const *)name,
                                                                    "s2102");
                                                                    if (tmp_65) {
                                                                    int tmp_64;
                                                                    tmp_64 = strcmp
                                                                    ((char const *)name,
                                                                    "s2111");
                                                                    if (tmp_64) {
                                                                    int tmp_63;
                                                                    tmp_63 = strcmp
                                                                    ((char const *)name,
                                                                    "s311 ");
                                                                    if (tmp_63) {
                                                                    int tmp_62;
                                                                    tmp_62 = strcmp
                                                                    ((char const *)name,
                                                                    "s312 ");
                                                                    if (tmp_62) {
                                                                    int tmp_61;
                                                                    tmp_61 = strcmp
                                                                    ((char const *)name,
                                                                    "s313 ");
                                                                    if (tmp_61) {
                                                                    int tmp_60;
                                                                    tmp_60 = strcmp
                                                                    ((char const *)name,
                                                                    "s314 ");
                                                                    if (tmp_60) {
                                                                    int tmp_59;
                                                                    tmp_59 = strcmp
                                                                    ((char const *)name,
                                                                    "s315 ");
                                                                    if (tmp_59) {
                                                                    int tmp_58;
                                                                    tmp_58 = strcmp
                                                                    ((char const *)name,
                                                                    "s316 ");
                                                                    if (tmp_58) {
                                                                    int tmp_57;
                                                                    tmp_57 = strcmp
                                                                    ((char const *)name,
                                                                    "s317 ");
                                                                    if (tmp_57) {
                                                                    int tmp_56;
                                                                    tmp_56 = strcmp
                                                                    ((char const *)name,
                                                                    "s318 ");
                                                                    if (tmp_56) {
                                                                    int tmp_55;
                                                                    tmp_55 = strcmp
                                                                    ((char const *)name,
                                                                    "s319 ");
                                                                    if (tmp_55) {
                                                                    int tmp_54;
                                                                    tmp_54 = strcmp
                                                                    ((char const *)name,
                                                                    "s3110");
                                                                    if (tmp_54) {
                                                                    int tmp_53;
                                                                    tmp_53 = strcmp
                                                                    ((char const *)name,
                                                                    "s3111");
                                                                    if (tmp_53) {
                                                                    int tmp_52;
                                                                    tmp_52 = strcmp
                                                                    ((char const *)name,
                                                                    "s3112");
                                                                    if (tmp_52) {
                                                                    int tmp_51;
                                                                    tmp_51 = strcmp
                                                                    ((char const *)name,
                                                                    "s3113");
                                                                    if (tmp_51) {
                                                                    int tmp_50;
                                                                    tmp_50 = strcmp
                                                                    ((char const *)name,
                                                                    "s321 ");
                                                                    if (tmp_50) {
                                                                    int tmp_49;
                                                                    tmp_49 = strcmp
                                                                    ((char const *)name,
                                                                    "s322 ");
                                                                    if (tmp_49) {
                                                                    int tmp_48;
                                                                    tmp_48 = strcmp
                                                                    ((char const *)name,
                                                                    "s323 ");
                                                                    if (tmp_48) {
                                                                    int tmp_47;
                                                                    tmp_47 = strcmp
                                                                    ((char const *)name,
                                                                    "s331 ");
                                                                    if (tmp_47) {
                                                                    int tmp_46;
                                                                    tmp_46 = strcmp
                                                                    ((char const *)name,
                                                                    "s332 ");
                                                                    if (tmp_46) {
                                                                    int tmp_45;
                                                                    tmp_45 = strcmp
                                                                    ((char const *)name,
                                                                    "s341 ");
                                                                    if (tmp_45) {
                                                                    int tmp_44;
                                                                    tmp_44 = strcmp
                                                                    ((char const *)name,
                                                                    "s342 ");
                                                                    if (tmp_44) {
                                                                    int tmp_43;
                                                                    tmp_43 = strcmp
                                                                    ((char const *)name,
                                                                    "s343 ");
                                                                    if (tmp_43) {
                                                                    int tmp_42;
                                                                    tmp_42 = strcmp
                                                                    ((char const *)name,
                                                                    "s351 ");
                                                                    if (tmp_42) {
                                                                    int tmp_41;
                                                                    tmp_41 = strcmp
                                                                    ((char const *)name,
                                                                    "s352 ");
                                                                    if (tmp_41) {
                                                                    int tmp_40;
                                                                    tmp_40 = strcmp
                                                                    ((char const *)name,
                                                                    "s353 ");
                                                                    if (tmp_40) {
                                                                    int tmp_39;
                                                                    tmp_39 = strcmp
                                                                    ((char const *)name,
                                                                    "s411 ");
                                                                    if (tmp_39) {
                                                                    int tmp_38;
                                                                    tmp_38 = strcmp
                                                                    ((char const *)name,
                                                                    "s412 ");
                                                                    if (tmp_38) {
                                                                    int tmp_37;
                                                                    tmp_37 = strcmp
                                                                    ((char const *)name,
                                                                    "s413 ");
                                                                    if (tmp_37) {
                                                                    int tmp_36;
                                                                    tmp_36 = strcmp
                                                                    ((char const *)name,
                                                                    "s414 ");
                                                                    if (tmp_36) {
                                                                    int tmp_35;
                                                                    tmp_35 = strcmp
                                                                    ((char const *)name,
                                                                    "s415 ");
                                                                    if (tmp_35) {
                                                                    int tmp_34;
                                                                    tmp_34 = strcmp
                                                                    ((char const *)name,
                                                                    "s421 ");
                                                                    if (tmp_34) {
                                                                    int tmp_33;
                                                                    tmp_33 = strcmp
                                                                    ((char const *)name,
                                                                    "s422 ");
                                                                    if (tmp_33) {
                                                                    int tmp_32;
                                                                    tmp_32 = strcmp
                                                                    ((char const *)name,
                                                                    "s423 ");
                                                                    if (tmp_32) {
                                                                    int tmp_31;
                                                                    tmp_31 = strcmp
                                                                    ((char const *)name,
                                                                    "s424 ");
                                                                    if (tmp_31) {
                                                                    int tmp_30;
                                                                    tmp_30 = strcmp
                                                                    ((char const *)name,
                                                                    "s431 ");
                                                                    if (tmp_30) {
                                                                    int tmp_29;
                                                                    tmp_29 = strcmp
                                                                    ((char const *)name,
                                                                    "s432 ");
                                                                    if (tmp_29) {
                                                                    int tmp_28;
                                                                    tmp_28 = strcmp
                                                                    ((char const *)name,
                                                                    "s441 ");
                                                                    if (tmp_28) {
                                                                    int tmp_27;
                                                                    tmp_27 = strcmp
                                                                    ((char const *)name,
                                                                    "s442 ");
                                                                    if (tmp_27) {
                                                                    int tmp_26;
                                                                    tmp_26 = strcmp
                                                                    ((char const *)name,
                                                                    "s443 ");
                                                                    if (tmp_26) {
                                                                    int tmp_25;
                                                                    tmp_25 = strcmp
                                                                    ((char const *)name,
                                                                    "s451 ");
                                                                    if (tmp_25) {
                                                                    int tmp_24;
                                                                    tmp_24 = strcmp
                                                                    ((char const *)name,
                                                                    "s452 ");
                                                                    if (tmp_24) {
                                                                    int tmp_23;
                                                                    tmp_23 = strcmp
                                                                    ((char const *)name,
                                                                    "s453 ");
                                                                    if (tmp_23) {
                                                                    int tmp_22;
                                                                    tmp_22 = strcmp
                                                                    ((char const *)name,
                                                                    "s471 ");
                                                                    if (tmp_22) {
                                                                    int tmp_21;
                                                                    tmp_21 = strcmp
                                                                    ((char const *)name,
                                                                    "s481 ");
                                                                    if (tmp_21) {
                                                                    int tmp_20;
                                                                    tmp_20 = strcmp
                                                                    ((char const *)name,
                                                                    "s482 ");
                                                                    if (tmp_20) {
                                                                    int tmp_19;
                                                                    tmp_19 = strcmp
                                                                    ((char const *)name,
                                                                    "s491 ");
                                                                    if (tmp_19) {
                                                                    int tmp_18;
                                                                    tmp_18 = strcmp
                                                                    ((char const *)name,
                                                                    "s4112");
                                                                    if (tmp_18) {
                                                                    int tmp_17;
                                                                    tmp_17 = strcmp
                                                                    ((char const *)name,
                                                                    "s4113");
                                                                    if (tmp_17) {
                                                                    int tmp_16;
                                                                    tmp_16 = strcmp
                                                                    ((char const *)name,
                                                                    "s4114");
                                                                    if (tmp_16) {
                                                                    int tmp_15;
                                                                    tmp_15 = strcmp
                                                                    ((char const *)name,
                                                                    "s4115");
                                                                    if (tmp_15) {
                                                                    int tmp_14;
                                                                    tmp_14 = strcmp
                                                                    ((char const *)name,
                                                                    "s4116");
                                                                    if (tmp_14) {
                                                                    int tmp_13;
                                                                    tmp_13 = strcmp
                                                                    ((char const *)name,
                                                                    "s4117");
                                                                    if (tmp_13) {
                                                                    int tmp_12;
                                                                    tmp_12 = strcmp
                                                                    ((char const *)name,
                                                                    "s4121");
                                                                    if (tmp_12) {
                                                                    int tmp_11;
                                                                    tmp_11 = strcmp
                                                                    ((char const *)name,
                                                                    "va\t");
                                                                    if (tmp_11) {
                                                                    int tmp_10;
                                                                    tmp_10 = strcmp
                                                                    ((char const *)name,
                                                                    "vag  ");
                                                                    if (tmp_10) {
                                                                    int tmp_9;
                                                                    tmp_9 = strcmp
                                                                    ((char const *)name,
                                                                    "vas  ");
                                                                    if (tmp_9) {
                                                                    int tmp_8;
                                                                    tmp_8 = strcmp
                                                                    ((char const *)name,
                                                                    "vif  ");
                                                                    if (tmp_8) {
                                                                    int tmp_7;
                                                                    tmp_7 = strcmp
                                                                    ((char const *)name,
                                                                    "vpv  ");
                                                                    if (tmp_7) {
                                                                    int tmp_6;
                                                                    tmp_6 = strcmp
                                                                    ((char const *)name,
                                                                    "vtv  ");
                                                                    if (tmp_6) {
                                                                    int tmp_5;
                                                                    tmp_5 = strcmp
                                                                    ((char const *)name,
                                                                    "vpvtv");
                                                                    if (tmp_5) {
                                                                    int tmp_4;
                                                                    tmp_4 = strcmp
                                                                    ((char const *)name,
                                                                    "vpvts");
                                                                    if (tmp_4) {
                                                                    int tmp_3;
                                                                    tmp_3 = strcmp
                                                                    ((char const *)name,
                                                                    "vpvpv");
                                                                    if (tmp_3) {
                                                                    int tmp_2;
                                                                    tmp_2 = strcmp
                                                                    ((char const *)name,
                                                                    "vtvtv");
                                                                    if (tmp_2) {
                                                                    int tmp_1;
                                                                    tmp_1 = strcmp
                                                                    ((char const *)name,
                                                                    "vsumr");
                                                                    if (tmp_1) {
                                                                    int tmp_0;
                                                                    tmp_0 = strcmp
                                                                    ((char const *)name,
                                                                    "vdotr");
                                                                    if (tmp_0) {
                                                                    int tmp;
                                                                    tmp = strcmp
                                                                    ((char const *)name,
                                                                    "vbor ");
                                                                    if (! tmp) {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    two,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    half,
                                                                    frac);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    two,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    half,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    - one,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    small,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1ds
                                                                    (32000 / 3,
                                                                    (float *)(d),
                                                                    - one,
                                                                    unit);
                                                                    set1ds
                                                                    (32000 / 3,
                                                                    (float *)(& d[
                                                                    32000 / 3]),
                                                                    zero,
                                                                    unit);
                                                                    set1ds
                                                                    (32000 / 3 + 1,
                                                                    (float *)(& d[
                                                                    (
                                                                    2 * 32000) / 3]),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    (array,
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    (array,
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    (array,
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    a[
                                                                    32000 - 1] = (float __attribute__((
                                                                    __aligned__(16))))(- one);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(cc),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    c[0] = (float __attribute__((
                                                                    __aligned__(16))))1.;
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    c[0] = (float __attribute__((
                                                                    __aligned__(16))))1.;
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    a[
                                                                    32000 - 1] = (float __attribute__((
                                                                    __aligned__(16))))two;
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    a[
                                                                    32000 - 1] = (float __attribute__((
                                                                    __aligned__(16))))(- one);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    a[
                                                                    32000 - 1] = (float __attribute__((
                                                                    __aligned__(16))))(- two);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,
                                                                    frac2);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    aa[
                                                                    256 - 1][
                                                                    256 - 1] = (float __attribute__((
                                                                    __aligned__(16))))two;
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    a[
                                                                    32000 - 1] = (float __attribute__((
                                                                    __aligned__(16))))(- two);
                                                                    }
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    (float)1.000001,
                                                                    unit);
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else 
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    else 
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(cc),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else 
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(a),
                                                                    - one,
                                                                    unit);
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(& a[
                                                                    32000 / 2]),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(a),
                                                                    - one,
                                                                    unit);
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(& a[
                                                                    32000 / 2]),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(b),
                                                                    one,unit);
                                                                    set1ds
                                                                    (32000 / 2,
                                                                    (float *)(& b[
                                                                    32000 / 2]),
                                                                    - one,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    small,
                                                                    unit);
                                                                    set2d
                                                                    ((float (*)[256])(cc),
                                                                    small,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    two,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,
                                                                    frac2);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,
                                                                    frac2);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    zero,
                                                                    unit);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    two,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    two,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    small,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(e),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    small,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    small,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    one,unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(cc),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,frac);
                                                                    set2d
                                                                    ((float (*)[256])(cc),
                                                                    any,frac);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    zero,
                                                                    unit);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set2d
                                                                    ((float (*)[256])(aa),
                                                                    one,unit);
                                                                    set2d
                                                                    ((float (*)[256])(bb),
                                                                    any,
                                                                    frac2);
                                                                    }
                                                                    }
                                                                    else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    zero,
                                                                    unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    one,unit);
                                                                    }
                                                                  }
                                                                  else {
                                                                    set1d
                                                                    ((float *)(a),
                                                                    one,unit);
                                                                    set1d
                                                                    ((float *)(b),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(c),
                                                                    any,frac);
                                                                    set1d
                                                                    ((float *)(d),
                                                                    any,frac);
                                                                  }
                                                                }
                                                                else {
                                                                  set1d
                                                                  ((float *)(a),
                                                                   any,frac);
                                                                  set1d
                                                                  ((float *)(b),
                                                                   one,unit);
                                                                  set1d
                                                                  ((float *)(c),
                                                                   one,unit);
                                                                  set1d
                                                                  ((float *)(d),
                                                                   any,frac);
                                                                }
                                                              }
                                                              else {
                                                                set1d
                                                                ((float *)(a),
                                                                 zero,unit);
                                                                set1d
                                                                ((float *)(b),
                                                                 one,unit);
                                                                set1d
                                                                ((float *)(c),
                                                                 any,frac);
                                                                set1d
                                                                ((float *)(d),
                                                                 any,frac);
                                                                set1d
                                                                ((float *)(e),
                                                                 any,frac);
                                                              }
                                                            }
                                                            else {
                                                              set1d((float *)(a),
                                                                    one,unit);
                                                              set1d((float *)(b),
                                                                    any,frac);
                                                              set1d((float *)(c),
                                                                    any,frac);
                                                            }
                                                          }
                                                          else {
                                                            set1d((float *)(a),
                                                                  one,unit);
                                                            set1d((float *)(b),
                                                                  any,frac2);
                                                          }
                                                        }
                                                        else {
                                                          set1d((float *)(a),
                                                                one,unit);
                                                          set1d((float *)(b),
                                                                any,frac2);
                                                        }
                                                      }
                                                      else {
                                                        set1d((float *)(a),
                                                              one,unit);
                                                        set1d((float *)(b),
                                                              any,frac2);
                                                      }
                                                    }
                                                    else {
                                                      set1d((float *)(a),one,
                                                            unit);
                                                      set1d((float *)(b),any,
                                                            frac2);
                                                    }
                                                  }
                                                  else {
                                                    set1d((float *)(a),one,
                                                          unit);
                                                    set1d((float *)(b),any,
                                                          frac2);
                                                  }
                                                }
                                                else {
                                                  set1d((float *)(a),one,
                                                        unit);
                                                  set1d((float *)(b),any,
                                                        frac);
                                                  set1d((float *)(c),any,
                                                        frac);
                                                }
                                              }
                                              else {
                                                set1d((float *)(a),one,unit);
                                                set1ds(32000 / 2,
                                                       (float *)(b),one,2);
                                                set1ds(32000 / 2,
                                                       (float *)(& b[1]),
                                                       - one,2);
                                                set1d((float *)(c),one,unit);
                                                set1d((float *)(d),any,frac);
                                                set1d((float *)(e),any,frac);
                                              }
                                            }
                                            else {
                                              set1d((float *)(a),one,unit);
                                              set1d((float *)(b),zero,unit);
                                              set1d((float *)(c),any,frac);
                                              set1d((float *)(d),any,frac);
                                              set1d((float *)(e),any,frac);
                                            }
                                          }
                                          else {
                                            set1d((float *)(a),one,unit);
                                            set1d((float *)(b),any,frac2);
                                          }
                                        }
                                        else {
                                          set1ds(32000 * 32000,array,one,
                                                 unit);
                                          set2d((float (*)[256])(bb),any,
                                                frac2);
                                        }
                                      }
                                      else {
                                        set2d((float (*)[256])(aa),one,unit);
                                        set1d((float *)(b),any,frac);
                                        set1d((float *)(c),any,frac);
                                      }
                                    }
                                    else {
                                      set1d((float *)(a),one,unit);
                                      set1d((float *)(b),any,frac2);
                                    }
                                  }
                                  else {
                                    set1d((float *)(a),zero,unit);
                                    set1d((float *)(b),two,unit);
                                    set1d((float *)(c),one,unit);
                                    set1d((float *)(d),one,unit);
                                  }
                                }
                                else {
                                  set1d((float *)(a),zero,unit);
                                  set1d((float *)(b),one,unit);
                                  set1d((float *)(c),any,frac);
                                  set1d((float *)(d),any,frac);
                                  set1d((float *)(e),any,frac);
                                }
                              }
                              else {
                                set2d((float (*)[256])(bb),one,unit);
                                set1ds(32000 * 32000,array,any,frac);
                                set2d((float (*)[256])(cc),any,frac);
                              }
                            }
                            else {
                              set1ds(32000 * 32000,array,zero,unit);
                              set2d((float (*)[256])(aa),one,unit);
                              set2d((float (*)[256])(bb),half,unit);
                              set2d((float (*)[256])(cc),two,unit);
                            }
                          }
                          else {
                            set1d((float *)(a),zero,unit);
                            set1d((float *)(b),one,unit);
                            set1d((float *)(c),one,unit);
                            set1d((float *)(d),any,frac);
                            set1d((float *)(e),any,frac);
                          }
                        }
                        else {
                          set1d((float *)(a),zero,unit);
                          set1d((float *)(b),one,unit);
                          set1d((float *)(c),one,unit);
                          set1d((float *)(d),any,frac);
                          set1d((float *)(e),any,frac);
                        }
                      }
                      else {
                        set1d((float *)(a),one,unit);
                        set1d((float *)(b),any,frac2);
                      }
                    }
                    else {
                      set1d((float *)(a),one,unit);
                      set1d((float *)(b),any,frac2);
                    }
                  }
                  else {
                    set2d((float (*)[256])(aa),one,unit);
                    set2d((float (*)[256])(bb),any,frac2);
                  }
                }
                else {
                  set1d((float *)(a),one,unit);
                  set2d((float (*)[256])(bb),small,unit);
                }
              }
              else set1d((float *)(a),one,unit);
            }
            else {
              set1d((float *)(a),one,unit);
              set2d((float (*)[256])(aa),small,unit);
              set2d((float (*)[256])(bb),small,unit);
              set2d((float (*)[256])(cc),small,unit);
            }
          }
          else {
            set2d((float (*)[256])(aa),any,frac);
            set2d((float (*)[256])(bb),any,frac2);
          }
        }
        else {
          set1d((float *)(a),one,unit);
          set1d((float *)(b),any,frac2);
        }
      }
      else {
        set1d((float *)(a),one,unit);
        set1d((float *)(b),any,frac2);
      }
    }
    else {
      set1d((float *)(a),one,unit);
      set1d((float *)(b),any,frac2);
      set1d((float *)(c),any,frac2);
      set1d((float *)(d),any,frac2);
      set1d((float *)(e),any,frac2);
    }
  }
  else {
    int i = 0;
    while (i < 32000) {
      X[i] = (float __attribute__((__aligned__(16))))(1 + i);
      Y[i] = (float __attribute__((__aligned__(16))))(2 + i);
      Z[i] = (float __attribute__((__aligned__(16))))(3 + i);
      U[i] = (float __attribute__((__aligned__(16))))(4 + i);
      V[i] = (float __attribute__((__aligned__(16))))(5 + i);
      i ++;
    }
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_19(char const * restrict format, double param0);

int s000(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s000 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          X[i] = Y[i] + (float __attribute__((__aligned__(16))))1;
          i ++;
        }
      }
      dummy((float *)(X),(float *)(Y),(float *)(Z),(float *)(U),(float *)(V),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S000\t %.2f \t\t",clock_dif_sec); /* printf_va_19 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_20(char const * restrict format, double param0);

int s111(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s111 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] = a[i - 1] + b[i];
          i += 2;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S111\t %.2f \t\t",clock_dif_sec); /* printf_va_20 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_21(char const * restrict format, double param0);

int s1111(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s111 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000 / 2) {
          a[2 * i] = (((c[i] * b[i] + d[i] * b[i]) + c[i] * c[i]) + d[i] * b[i]) + 
                     d[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1111\t %.2f \t\t ",clock_dif_sec); /* printf_va_21 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_22(char const * restrict format, double param0);

int s112(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s112 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 3 * 200000) {
      {
        int i = 32000 - 2;
        while (i >= 0) {
          a[i + 1] = a[i] + b[i];
          i --;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S112\t %.2f \t\t",clock_dif_sec); /* printf_va_22 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_23(char const * restrict format, double param0);

int s1112(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s112 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 3) {
      {
        int i = 32000 - 1;
        while (i >= 0) {
          a[i] = b[i] + (float __attribute__((__aligned__(16))))((float)1.);
          i --;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1112\t %.2f \t\t ",clock_dif_sec); /* printf_va_23 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_24(char const * restrict format, double param0);

int s113(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s113 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] = a[0] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S113\t %.2f \t\t",clock_dif_sec); /* printf_va_24 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_25(char const * restrict format, double param0);

int s1113(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s113 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = a[32000 / 2] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1113\t %.2f \t\t",clock_dif_sec); /* printf_va_25 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_26(char const * restrict format, double param0);

int s114(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s114 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < i) {
              aa[i][j] = aa[j][i] + bb[i][j];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S114\t %.2f \t\t",clock_dif_sec); /* printf_va_26 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_27(char const * restrict format, double param0);

int s115(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s115 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 1000 * (200000 / 256)) {
      {
        int j = 0;
        while (j < 256) {
          {
            int i = j + 1;
            while (i < 256) {
              a[i] -= aa[j][i] * a[j];
              i ++;
            }
          }
          j ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S115\t %.2f \t\t",clock_dif_sec); /* printf_va_27 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_28(char const * restrict format, double param0);

int s1115(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s115 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              aa[i][j] = aa[i][j] * cc[j][i] + bb[i][j];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1115\t %.2f \t\t",clock_dif_sec); /* printf_va_28 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_29(char const * restrict format, double param0);

int s116(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s116 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 32000 - 5) {
          a[i] = a[i + 1] * a[i];
          a[i + 1] = a[i + 2] * a[i + 1];
          a[i + 2] = a[i + 3] * a[i + 2];
          a[i + 3] = a[i + 4] * a[i + 3];
          a[i + 4] = a[i + 5] * a[i + 4];
          i += 5;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S116\t %.2f \t\t",clock_dif_sec); /* printf_va_29 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_30(char const * restrict format, double param0);

int s118(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s118 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 0;
            while (j <= i - 1) {
              a[i] += bb[j][i] * a[(i - j) - 1];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S118\t %.2f \t\t",clock_dif_sec); /* printf_va_30 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_31(char const * restrict format, double param0);

int s119(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s119 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              aa[i][j] = aa[i - 1][j - 1] + bb[i][j];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S119\t %.2f \t\t ",clock_dif_sec); /* printf_va_31 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_32(char const * restrict format, double param0);

int s1119(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s119 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              aa[i][j] = aa[i - 1][j] + bb[i][j];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1119\t %.2f \t\t ",clock_dif_sec); /* printf_va_32 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_33(char const * restrict format, double param0);

int s121(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  init((char *)"s121 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 3 * 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          j = i + 1;
          a[i] = a[j] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S121\t %.2f \t\t",clock_dif_sec); /* printf_va_33 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_34(char const * restrict format, double param0);

int s122(int n1, int n3)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  int k;
  init((char *)"s122 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      j = 1;
      k = 0;
      {
        int i = n1 - 1;
        while (i < 32000) {
          k += j;
          a[i] += b[32000 - k];
          i += n3;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S122\t %.2f \t\t",clock_dif_sec); /* printf_va_34 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_35(char const * restrict format, double param0);

int s123(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  init((char *)"s123 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000 / 2) {
          j ++;
          a[j] = b[i] + d[i] * e[i];
          if (c[i] > (float __attribute__((__aligned__(16))))((float)0.)) {
            j ++;
            a[j] = c[i] + d[i] * e[i];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S123\t %.2f \t\t",clock_dif_sec); /* printf_va_35 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_36(char const * restrict format, double param0);

int s124(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  init((char *)"s124 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000) {
          if (b[i] > (float __attribute__((__aligned__(16))))((float)0.)) {
            j ++;
            a[j] = b[i] + d[i] * e[i];
          }
          else {
            j ++;
            a[j] = c[i] + d[i] * e[i];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S124\t %.2f \t\t",clock_dif_sec); /* printf_va_36 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_37(char const * restrict format, double param0);

int s125(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  init((char *)"s125 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      k = -1;
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              k ++;
              array[k] = (float)(aa[i][j] + bb[i][j] * cc[i][j]);
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S125\t %.2f \t\t",clock_dif_sec); /* printf_va_37 */
  check(0);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_38(char const * restrict format, double param0);

int s126(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  init((char *)"s126 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * (200000 / 256)) {
      k = 1;
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              bb[j][i] = bb[j - 1][i] + (float __attribute__((__aligned__(16))))(
                         array[k - 1] * (float)cc[j][i]);
              k ++;
              j ++;
            }
          }
          k ++;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S126\t %.2f \t\t",clock_dif_sec); /* printf_va_38 */
  check(22);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_39(char const * restrict format, double param0);

int s127(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  init((char *)"s127 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000 / 2) {
          j ++;
          a[j] = b[i] + c[i] * d[i];
          j ++;
          a[j] = b[i] + d[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S127\t %.2f \t\t",clock_dif_sec); /* printf_va_39 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_40(char const * restrict format, double param0);

int s128(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  int k;
  init((char *)"s128 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000 / 2) {
          k = j + 1;
          a[i] = b[k] - d[i];
          j = k + 1;
          b[k] = a[i] + c[k];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S128\t %.2f \t\t",clock_dif_sec); /* printf_va_40 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_41(char const * restrict format, double param0);

int s131(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s131 ");
  start_t = clock();
  int m = 1;
  {
    int nl = 0;
    while (nl < 5 * 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = a[i + m] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S131\t %.2f \t\t",clock_dif_sec); /* printf_va_41 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_42(char const * restrict format, double param0);

int s132(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s132 ");
  start_t = clock();
  int m = 0;
  int j = m;
  int k = m + 1;
  {
    int nl = 0;
    while (nl < 400 * 200000) {
      {
        int i = 1;
        while (i < 256) {
          aa[j][i] = aa[k][i - 1] + b[i] * c[1];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S132\t %.2f \t\t",clock_dif_sec); /* printf_va_42 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_43(char const * restrict format, double param0);

int s141(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  init((char *)"s141 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          k = (((i + 1) * ((i + 1) - 1)) / 2 + (i + 1)) - 1;
          {
            int j = i;
            while (j < 256) {
              array[k] += (float)bb[j][i];
              k += j + 1;
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S141\t %.2f \t\t",clock_dif_sec); /* printf_va_43 */
  check(0);
  __retres = 0;
  return __retres;
}

int s151s(float a_0[32000], float b_0[32000], int m)
{
  int __retres;
  {
    int i = 0;
    while (i < 32000 - 1) {
      *(a_0 + i) = *(a_0 + (i + m)) + *(b_0 + i);
      i ++;
    }
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_44(char const * restrict format, double param0);

int s151(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s151 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 5 * 200000) {
      s151s((float *)(a),(float *)(b),1);
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S151\t %.2f \t\t",clock_dif_sec); /* printf_va_44 */
  check(1);
  __retres = 0;
  return __retres;
}

int s152s(float a_0[32000], float b_0[32000], float c_0[32000], int i)
{
  int __retres;
  *(a_0 + i) += *(b_0 + i) * *(c_0 + i);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_45(char const * restrict format, double param0);

int s152(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s152 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          b[i] = d[i] * e[i];
          s152s((float *)(a),(float *)(b),(float *)(c),i);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S152\t %.2f \t\t",clock_dif_sec); /* printf_va_45 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_46(char const * restrict format, double param0);

int s161(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s161 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          if (b[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L20;
          a[i] = c[i] + d[i] * e[i];
          goto L10;
          L20: c[i + 1] = a[i] + d[i] * d[i];
          L10: ;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S161\t %.2f \t\t",clock_dif_sec); /* printf_va_46 */
  check(13);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_47(char const * restrict format, double param0);

int s1161(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s161 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          if (c[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L20;
          a[i] = c[i] + d[i] * e[i];
          goto L10;
          L20: b[i] = a[i] + d[i] * d[i];
          L10: ;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1161\t %.2f \t\t",clock_dif_sec); /* printf_va_47 */
  check(13);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_48(char const * restrict format, double param0);

int s162(int k)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s162 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      if (k > 0) {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = a[i + k] + b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S162\t %.2f \t\t",clock_dif_sec); /* printf_va_48 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_49(char const * restrict format, double param0);

int s171(int inc)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s171 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i * inc] += b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S171\t %.2f \t\t",clock_dif_sec); /* printf_va_49 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_50(char const * restrict format, double param0);

int s172(int n1, int n3)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s172 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = n1 - 1;
        while (i < 32000) {
          a[i] += b[i];
          i += n3;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S172\t %.2f \t\t",clock_dif_sec); /* printf_va_50 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_51(char const * restrict format, double param0);

int s173(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s173 ");
  start_t = clock();
  int k = 32000 / 2;
  {
    int nl = 0;
    while (nl < 10 * 200000) {
      {
        int i = 0;
        while (i < 32000 / 2) {
          a[i + k] = a[i] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S173\t %.2f \t\t",clock_dif_sec); /* printf_va_51 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_52(char const * restrict format, double param0);

int s174(int M)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s174 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * 200000) {
      {
        int i = 0;
        while (i < M) {
          a[i + M] = a[i] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S174\t %.2f \t\t",clock_dif_sec); /* printf_va_52 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_53(char const * restrict format, double param0);

int s175(int inc)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s175 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = a[i + inc] + b[i];
          i += inc;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S175\t %.2f \t\t",clock_dif_sec); /* printf_va_53 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_54(char const * restrict format, double param0);

int s176(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s176 ");
  start_t = clock();
  int m = 32000 / 2;
  {
    int nl = 0;
    while (nl < 4 * (200000 / 32000)) {
      {
        int j = 0;
        while (j < 32000 / 2) {
          {
            int i = 0;
            while (i < m) {
              a[i] += b[((i + m) - j) - 1] * c[j];
              i ++;
            }
          }
          j ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S176\t %.2f \t\t",clock_dif_sec); /* printf_va_54 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_55(char const * restrict format, double param0);

int s211(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s211 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 1;
        while (i < 32000 - 1) {
          a[i] = b[i - 1] + c[i] * d[i];
          b[i] = b[i + 1] - e[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S211\t %.2f \t\t",clock_dif_sec); /* printf_va_55 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_56(char const * restrict format, double param0);

int s212(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s212 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] *= c[i];
          b[i] += a[i + 1] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S212\t %.2f \t\t",clock_dif_sec); /* printf_va_56 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_57(char const * restrict format, double param0);

int s1213(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s212 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 1;
        while (i < 32000 - 1) {
          a[i] = b[i - 1] + c[i];
          b[i] = a[i + 1] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1213\t %.2f \t\t",clock_dif_sec); /* printf_va_57 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_58(char const * restrict format, double param0);

int s221(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s221 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] += c[i] * d[i];
          b[i] = (b[i - 1] + a[i]) + d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S221\t %.2f \t\t",clock_dif_sec); /* printf_va_58 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_59(char const * restrict format, double param0);

int s1221(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s221 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 4;
        while (i < 32000) {
          b[i] = b[i - 4] + a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1221\t %.2f \t\t",clock_dif_sec); /* printf_va_59 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_60(char const * restrict format, double param0);

int s222(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s222 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] += b[i] * c[i];
          e[i] = e[i - 1] * e[i - 1];
          a[i] -= b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S222\t %.2f \t\t",clock_dif_sec); /* printf_va_60 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_61(char const * restrict format, double param0);

int s231(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s231 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              aa[j][i] = aa[j - 1][i] + bb[j][i];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S231\t %.2f \t\t",clock_dif_sec); /* printf_va_61 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_62(char const * restrict format, double param0);

int s232(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s232 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int j = 1;
        while (j < 256) {
          {
            int i = 1;
            while (i <= j) {
              aa[j][i] = aa[j][i - 1] * aa[j][i - 1] + bb[j][i];
              i ++;
            }
          }
          j ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S232\t %.2f \t\t",clock_dif_sec); /* printf_va_62 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_63(char const * restrict format, double param0);

int s1232(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s232 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int j = 0;
        while (j < 256) {
          {
            int i = j;
            while (i < 256) {
              aa[i][j] = bb[i][j] + cc[i][j];
              i ++;
            }
          }
          j ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1232\t %.2f \t\t",clock_dif_sec); /* printf_va_63 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_64(char const * restrict format, double param0);

int s233(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s233 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              aa[j][i] = aa[j - 1][i] + cc[j][i];
              j ++;
            }
          }
          {
            int j_0 = 1;
            while (j_0 < 256) {
              bb[j_0][i] = bb[j_0][i - 1] + cc[j_0][i];
              j_0 ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S233\t %.2f \t\t",clock_dif_sec); /* printf_va_64 */
  check(1122);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_65(char const * restrict format, double param0);

int s2233(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s233 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              aa[j][i] = aa[j - 1][i] + cc[j][i];
              j ++;
            }
          }
          {
            int j_0 = 1;
            while (j_0 < 256) {
              bb[i][j_0] = bb[i - 1][j_0] + cc[i][j_0];
              j_0 ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2233\t %.2f \t\t",clock_dif_sec); /* printf_va_65 */
  check(1122);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_66(char const * restrict format, double param0);

int s235(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s235 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          a[i] += b[i] * c[i];
          {
            int j = 1;
            while (j < 256) {
              aa[j][i] = aa[j - 1][i] + bb[j][i] * a[i];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S235\t %.2f \t\t",clock_dif_sec); /* printf_va_66 */
  check(111);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_67(char const * restrict format, double param0);

int s241(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s241 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = (b[i] * c[i]) * d[i];
          b[i] = (a[i] * a[i + 1]) * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S241\t %.2f \t\t",clock_dif_sec); /* printf_va_67 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_68(char const * restrict format, double param0);

int s242(float s1, float s2)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s242 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 5) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] = ((((a[i - 1] + (float __attribute__((__aligned__(16))))s1) + (float __attribute__((
                    __aligned__(16))))s2) + b[i]) + c[i]) + d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S242\t %.2f \t\t",clock_dif_sec); /* printf_va_68 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_69(char const * restrict format, double param0);

int s243(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s243 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = b[i] + c[i] * d[i];
          b[i] = a[i] + d[i] * e[i];
          a[i] = b[i] + a[i + 1] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S243\t %.2f \t\t",clock_dif_sec); /* printf_va_69 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_70(char const * restrict format, double param0);

int s244(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s244 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = b[i] + c[i] * d[i];
          b[i] = c[i] + b[i];
          a[i + 1] = b[i] + a[i + 1] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S244\t %.2f \t\t",clock_dif_sec); /* printf_va_70 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_71(char const * restrict format, double param0);

int s1244(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s244 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i] = ((b[i] + c[i] * c[i]) + b[i] * b[i]) + c[i];
          d[i] = a[i] + a[i + 1];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1244\t %.2f \t\t",clock_dif_sec); /* printf_va_71 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_72(char const * restrict format, double param0);

int s2244(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s244 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i + 1] = b[i] + e[i];
          a[i] = b[i] + c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2244\t %.2f \t\t",clock_dif_sec); /* printf_va_72 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_73(char const * restrict format, double param0);

int s251(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float s;
  init((char *)"s251 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          s = (float)(b[i] + c[i] * d[i]);
          a[i] = (float __attribute__((__aligned__(16))))(s * s);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S251\t %.2f \t\t",clock_dif_sec); /* printf_va_73 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_74(char const * restrict format, double param0);

int s1251(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float s;
  init((char *)"s251 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          s = (float)(b[i] + c[i]);
          b[i] = a[i] + d[i];
          a[i] = (float __attribute__((__aligned__(16))))(s * (float)e[i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1251\t %.2f \t\t",clock_dif_sec); /* printf_va_74 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_75(char const * restrict format, double param0);

int s2251(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s251 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        float s = (float)0.0;
        {
          int i = 0;
          while (i < 32000) {
            a[i] = (float __attribute__((__aligned__(16))))(s * (float)e[i]);
            s = (float)(b[i] + c[i]);
            b[i] = a[i] + d[i];
            i ++;
          }
        }
        dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),
              (float *)(e),(float (*)[256])(aa),(float (*)[256])(bb),
              (float (*)[256])(cc),(float)0.);
      }
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2251\t %.2f \t\t",clock_dif_sec); /* printf_va_75 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_76(char const * restrict format, double param0);

int s3251(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s251 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          a[i + 1] = b[i] + c[i];
          b[i] = c[i] * e[i];
          d[i] = a[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S3251\t %.2f \t\t",clock_dif_sec); /* printf_va_76 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_77(char const * restrict format, double param0);

int s252(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float t;
  float s;
  init((char *)"s252 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      t = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          s = (float)(b[i] * c[i]);
          a[i] = (float __attribute__((__aligned__(16))))(s + t);
          t = s;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S252\t %.2f \t\t",clock_dif_sec); /* printf_va_77 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_78(char const * restrict format, double param0);

int s253(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float s;
  init((char *)"s253 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > b[i]) {
            s = (float)(a[i] - b[i] * d[i]);
            c[i] += (float __attribute__((__aligned__(16))))s;
            a[i] = (float __attribute__((__aligned__(16))))s;
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S253\t %.2f \t\t",clock_dif_sec); /* printf_va_78 */
  check(13);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_79(char const * restrict format, double param0);

int s254(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  init((char *)"s254 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      x_0 = (float)b[32000 - 1];
      {
        int i = 0;
        while (i < 32000) {
          a[i] = (b[i] + (float __attribute__((__aligned__(16))))x_0) * (float __attribute__((
                 __aligned__(16))))((float).5);
          x_0 = (float)b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S254\t %.2f \t\t",clock_dif_sec); /* printf_va_79 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_80(char const * restrict format, double param0);

int s255(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  float y;
  init((char *)"s255 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      x_0 = (float)b[32000 - 1];
      y = (float)b[32000 - 2];
      {
        int i = 0;
        while (i < 32000) {
          a[i] = ((b[i] + (float __attribute__((__aligned__(16))))x_0) + (float __attribute__((
                  __aligned__(16))))y) * (float __attribute__((__aligned__(16))))((float).333);
          y = x_0;
          x_0 = (float)b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S255\t %.2f \t\t",clock_dif_sec); /* printf_va_80 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_81(char const * restrict format, double param0);

int s256(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s256 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 1;
            while (j < 256) {
              a[j] = (float __attribute__((__aligned__(16))))((float)1.0 - (float)a[
                                                              j - 1]);
              cc[j][i] = a[j] + bb[j][i] * d[j];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S256\t %.2f \t\t",clock_dif_sec); /* printf_va_81 */
  check(111);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_82(char const * restrict format, double param0);

int s257(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s257 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * (200000 / 256)) {
      {
        int i = 1;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              a[i] = aa[j][i] - a[i - 1];
              aa[j][i] = a[i] + bb[j][i];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S257\t %.2f \t\t",clock_dif_sec); /* printf_va_82 */
  check(111);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_83(char const * restrict format, double param0);

int s258(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float s;
  init((char *)"s258 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      s = (float)0.;
      {
        int i = 0;
        while (i < 256) {
          if ((double)a[i] > 0.) s = (float)(d[i] * d[i]);
          b[i] = (float __attribute__((__aligned__(16))))(s * (float)c[i] + (float)d[i]);
          e[i] = (float __attribute__((__aligned__(16))))((s + (float)1.) * (float)aa[0][i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S258\t %.2f \t\t",clock_dif_sec); /* printf_va_83 */
  check(25);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_84(char const * restrict format, double param0);

int s261(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float t;
  init((char *)"s261 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 1;
        while (i < 32000) {
          t = (float)(a[i] + b[i]);
          a[i] = (float __attribute__((__aligned__(16))))(t + (float)c[i - 1]);
          t = (float)(c[i] * d[i]);
          c[i] = (float __attribute__((__aligned__(16))))t;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S261\t %.2f \t\t",clock_dif_sec); /* printf_va_84 */
  check(13);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_85(char const * restrict format, double param0);

int s271(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s271 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (b[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            a[i] += b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S271\t %.2f \t\t",clock_dif_sec); /* printf_va_85 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_86(char const * restrict format, double param0);

int s272(float t)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s272 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (e[i] >= (float __attribute__((__aligned__(16))))t) {
            a[i] += c[i] * d[i];
            b[i] += c[i] * c[i];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S272\t %.2f \t\t",clock_dif_sec); /* printf_va_86 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_87(char const * restrict format, double param0);

int s273(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s273 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += d[i] * e[i];
          if (a[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            b[i] += d[i] * e[i];
          c[i] += a[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S273\t %.2f \t\t",clock_dif_sec); /* printf_va_87 */
  check(123);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_88(char const * restrict format, double param0);

int s274(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s274 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = c[i] + e[i] * d[i];
          if (a[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            b[i] = a[i] + b[i];
          else a[i] = d[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S274\t %.2f \t\t",clock_dif_sec); /* printf_va_88 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_89(char const * restrict format, double param0);

int s275(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s275 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          if (aa[0][i] > (float __attribute__((__aligned__(16))))((float)0.)) {
            int j = 1;
            while (j < 256) {
              aa[j][i] = aa[j - 1][i] + bb[j][i] * cc[j][i];
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S275\t %.2f \t\t",clock_dif_sec); /* printf_va_89 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_90(char const * restrict format, double param0);

int s2275(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s275 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              aa[j][i] += bb[j][i] * cc[j][i];
              j ++;
            }
          }
          a[i] = b[i] + c[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2275\t %.2f \t\t",clock_dif_sec); /* printf_va_90 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_91(char const * restrict format, double param0);

int s276(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s276 ");
  start_t = clock();
  int mid = 32000 / 2;
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (i + 1 < mid) a[i] += b[i] * c[i]; else a[i] += b[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S276\t %.2f \t\t",clock_dif_sec); /* printf_va_91 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_92(char const * restrict format, double param0);

int s277(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s277 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          if (a[i] >= (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L20;
          if (b[i] >= (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L30;
          a[i] += c[i] * d[i];
          L30: b[i + 1] = c[i] + d[i] * e[i];
          L20: ;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S277\t %.2f \t\t",clock_dif_sec); /* printf_va_92 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_93(char const * restrict format, double param0);

int s278(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s278 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L20;
          b[i] = - b[i] + d[i] * e[i];
          goto L30;
          L20: c[i] = - c[i] + d[i] * e[i];
          L30: a[i] = b[i] + c[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S278\t %.2f \t\t",clock_dif_sec); /* printf_va_93 */
  check(123);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_94(char const * restrict format, double param0);

int s279(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s279 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            goto L20;
          b[i] = - b[i] + d[i] * d[i];
          if (b[i] <= a[i]) goto L30;
          c[i] += d[i] * e[i];
          goto L30;
          L20: c[i] = - c[i] + e[i] * e[i];
          L30: a[i] = b[i] + c[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S279\t %.2f \t\t",clock_dif_sec); /* printf_va_94 */
  check(123);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_95(char const * restrict format, double param0);

int s1279(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s279 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            if (b[i] > a[i]) c[i] += d[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1279\t %.2f \t\t",clock_dif_sec); /* printf_va_95 */
  check(123);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_96(char const * restrict format, double param0);

int s2710(float x_0)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2710");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > b[i]) {
            a[i] += b[i] * d[i];
            if (32000 > 10) c[i] += d[i] * d[i];
            else c[i] = d[i] * e[i] + (float __attribute__((__aligned__(16))))((float)1.);
          }
          else {
            b[i] = a[i] + e[i] * e[i];
            if (x_0 > (float)0.) c[i] = a[i] + d[i] * d[i];
            else c[i] += e[i] * e[i];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2710\t %.2f \t\t",clock_dif_sec); /* printf_va_96 */
  check(123);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_97(char const * restrict format, double param0);

int s2711(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2711");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (b[i] != (float __attribute__((__aligned__(16))))((float)0.0)) 
            a[i] += b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2711\t %.2f \t\t",clock_dif_sec); /* printf_va_97 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_98(char const * restrict format, double param0);

int s2712(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2712");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > b[i]) a[i] += b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2712\t %.2f \t\t",clock_dif_sec); /* printf_va_98 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_99(char const * restrict format, double param0);

int s281(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  init((char *)"s281 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          x_0 = (float)(a[(32000 - i) - 1] + b[i] * c[i]);
          a[i] = (float __attribute__((__aligned__(16))))(x_0 - (float)1.0);
          b[i] = (float __attribute__((__aligned__(16))))x_0;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S281\t %.2f \t\t",clock_dif_sec); /* printf_va_99 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_100(char const * restrict format, double param0);

int s1281(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  init((char *)"s281 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          x_0 = (float)((b[i] * c[i] + a[i] * d[i]) + e[i]);
          a[i] = (float __attribute__((__aligned__(16))))(x_0 - (float)1.0);
          b[i] = (float __attribute__((__aligned__(16))))x_0;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1281\t %.2f \t\t",clock_dif_sec); /* printf_va_100 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_101(char const * restrict format, double param0);

int s291(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int im1;
  init((char *)"s291 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      im1 = 32000 - 1;
      {
        int i = 0;
        while (i < 32000) {
          a[i] = (b[i] + b[im1]) * (float __attribute__((__aligned__(16))))((float).5);
          im1 = i;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S291\t %.2f \t\t",clock_dif_sec); /* printf_va_101 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_102(char const * restrict format, double param0);

int s292(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int im1;
  int im2;
  init((char *)"s292 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      im1 = 32000 - 1;
      im2 = 32000 - 2;
      {
        int i = 0;
        while (i < 32000) {
          a[i] = ((b[i] + b[im1]) + b[im2]) * (float __attribute__((__aligned__(16))))((float).333);
          im2 = im1;
          im1 = i;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S292\t %.2f \t\t",clock_dif_sec); /* printf_va_102 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_103(char const * restrict format, double param0);

int s293(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s293 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = a[0];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S293\t %.2f \t\t",clock_dif_sec); /* printf_va_103 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_104(char const * restrict format, double param0);

int s2101(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2101");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * 200000) {
      {
        int i = 0;
        while (i < 256) {
          aa[i][i] += bb[i][i] * cc[i][i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2101\t %.2f \t\t",clock_dif_sec); /* printf_va_104 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_105(char const * restrict format, double param0);

int s2102(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2102");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              aa[j][i] = (float __attribute__((__aligned__(16))))((float)0.);
              j ++;
            }
          }
          aa[i][i] = (float __attribute__((__aligned__(16))))((float)1.);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2102\t %.2f \t\t",clock_dif_sec); /* printf_va_105 */
  check(11);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_106(char const * restrict format, double param0);

int s2111(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s2111");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      {
        int j = 1;
        while (j < 256) {
          {
            int i = 1;
            while (i < 256) {
              aa[j][i] = aa[j][i - 1] + aa[j - 1][i];
              i ++;
            }
          }
          j ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S2111\t %.2f \t\t",clock_dif_sec); /* printf_va_106 */
  temp = (float)0.;
  {
    int i_0 = 0;
    while (i_0 < 256) {
      {
        int j_0 = 0;
        while (j_0 < 256) {
          temp += (float)aa[i_0][j_0];
          j_0 ++;
        }
      }
      i_0 ++;
    }
  }
  if (temp == (float)0) temp = (float)3.;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_107(char const * restrict format, double param0);

int s311(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s311 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          sum += (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            sum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S311\t %.2f \t\t",clock_dif_sec); /* printf_va_107 */
  check(1);
  __retres = 0;
  return __retres;
}

float test(float *A)
{
  float s = (float)0.0;
  {
    int i = 0;
    while (i < 4) {
      s += *(A + i);
      i ++;
    }
  }
  return s;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_108(char const * restrict format, double param0);

int s31111(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s311 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2000 * 200000) {
      {
        float tmp;
        float tmp_0;
        float tmp_1;
        float tmp_2;
        float tmp_3;
        float tmp_4;
        float tmp_5;
        float tmp_6;
        sum = (float)0.;
        tmp = test((float *)(a));
        sum += tmp;
        tmp_0 = test((float *)(& a[4]));
        sum += tmp_0;
        tmp_1 = test((float *)(& a[8]));
        sum += tmp_1;
        tmp_2 = test((float *)(& a[12]));
        sum += tmp_2;
        tmp_3 = test((float *)(& a[16]));
        sum += tmp_3;
        tmp_4 = test((float *)(& a[20]));
        sum += tmp_4;
        tmp_5 = test((float *)(& a[24]));
        sum += tmp_5;
        tmp_6 = test((float *)(& a[28]));
        sum += tmp_6;
        dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),
              (float *)(e),(float (*)[256])(aa),(float (*)[256])(bb),
              (float (*)[256])(cc),sum);
      }
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S31111\t %.2f \t\t",clock_dif_sec); /* printf_va_108 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_109(char const * restrict format, double param0);

int s312(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float prod;
  init((char *)"s312 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * 200000) {
      prod = (float)1.;
      {
        int i = 0;
        while (i < 32000) {
          prod *= (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            prod);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S312\t %.2f \t\t",clock_dif_sec); /* printf_va_109 */
  temp = prod;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_110(char const * restrict format, double param0);

int s313(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float dot;
  init((char *)"s313 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 5) {
      dot = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          dot += (float)(a[i] * b[i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            dot);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S313\t %.2f \t\t",clock_dif_sec); /* printf_va_110 */
  temp = dot;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_111(char const * restrict format, double param0);

int s314(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  init((char *)"s314 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 5) {
      x_0 = (float)a[0];
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))x_0) x_0 = (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            x_0);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S314\t %.2f \t\t",clock_dif_sec); /* printf_va_111 */
  temp = x_0;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_112(char const * restrict format, double param0);

int s315(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  float chksum;
  int index_0;
  init((char *)"s315 ");
  {
    int i = 0;
    while (i < 32000) {
      a[i] = (float __attribute__((__aligned__(16))))((i * 7) % 32000);
      i ++;
    }
  }
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      x_0 = (float)a[0];
      index_0 = 0;
      {
        int i_0 = 0;
        while (i_0 < 32000) {
          if (a[i_0] > (float __attribute__((__aligned__(16))))x_0) {
            x_0 = (float)a[i_0];
            index_0 = i_0;
          }
          i_0 ++;
        }
      }
      chksum = x_0 + (float)index_0;
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            chksum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S315\t %.2f \t\t",clock_dif_sec); /* printf_va_112 */
  temp = ((float)index_0 + x_0) + (float)1;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_113(char const * restrict format, double param0);

int s316(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float x_0;
  init((char *)"s316 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 5) {
      x_0 = (float)a[0];
      {
        int i = 1;
        while (i < 32000) {
          if (a[i] < (float __attribute__((__aligned__(16))))x_0) x_0 = (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            x_0);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S316\t %.2f \t\t",clock_dif_sec); /* printf_va_113 */
  temp = x_0;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_114(char const * restrict format, double param0);

int s317(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float q;
  init((char *)"s317 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 5 * 200000) {
      q = (float)1.;
      {
        int i = 0;
        while (i < 32000 / 2) {
          q *= (float).99;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),q);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S317\t %.2f \t\t",clock_dif_sec); /* printf_va_114 */
  temp = q;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_115(char const * restrict format, double param0);

int s318(int inc)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  int index_0;
  float max_0;
  float chksum;
  init((char *)"s318 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int tmp;
        k = 0;
        index_0 = 0;
        tmp = abs((int)a[0]);
        max_0 = (float)tmp;
        k += inc;
        {
          int i = 1;
          while (i < 32000) {
            {
              int tmp_0;
              int tmp_1;
              tmp_0 = abs((int)a[k]);
              ;
              if ((float)tmp_0 <= max_0) goto L5;
              index_0 = i;
              tmp_1 = abs((int)a[k]);
              max_0 = (float)tmp_1;
              L5: k += inc;
            }
            i ++;
          }
        }
        chksum = max_0 + (float)index_0;
        dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),
              (float *)(e),(float (*)[256])(aa),(float (*)[256])(bb),
              (float (*)[256])(cc),chksum);
      }
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S318\t %.2f \t\t",clock_dif_sec); /* printf_va_115 */
  temp = (max_0 + (float)index_0) + (float)1;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_116(char const * restrict format, double param0);

int s319(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s319 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          a[i] = c[i] + d[i];
          sum += (float)a[i];
          b[i] = c[i] + e[i];
          sum += (float)b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            sum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S319\t %.2f \t\t",clock_dif_sec); /* printf_va_116 */
  temp = sum;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_117(char const * restrict format, double param0);

int s3110(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int xindex;
  int yindex;
  float max_0;
  float chksum;
  init((char *)"s3110");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      max_0 = (float)aa[0][0];
      xindex = 0;
      yindex = 0;
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              if (aa[i][j] > (float __attribute__((__aligned__(16))))max_0) {
                max_0 = (float)aa[i][j];
                xindex = i;
                yindex = j;
              }
              j ++;
            }
          }
          i ++;
        }
      }
      chksum = (max_0 + (float)xindex) + (float)yindex;
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            chksum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S3110\t %.2f \t\t",clock_dif_sec); /* printf_va_117 */
  temp = (((max_0 + (float)xindex) + (float)1) + (float)yindex) + (float)1;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_118(char const * restrict format, double param0);

int s13110(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int xindex;
  int yindex;
  float max_0;
  float chksum;
  init((char *)"s3110");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * (200000 / 256)) {
      max_0 = (float)aa[0][0];
      xindex = 0;
      yindex = 0;
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              if (aa[i][j] > (float __attribute__((__aligned__(16))))max_0) 
                max_0 = (float)aa[i][j];
              j ++;
            }
          }
          i ++;
        }
      }
      chksum = (max_0 + (float)xindex) + (float)yindex;
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            chksum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S13110\t %.2f \t\t",clock_dif_sec); /* printf_va_118 */
  temp = (((max_0 + (float)xindex) + (float)1) + (float)yindex) + (float)1;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_119(char const * restrict format, double param0);

int s3111(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s3111");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            sum += (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            sum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S3111\t %.2f \t\t",clock_dif_sec); /* printf_va_119 */
  temp = sum;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_120(char const * restrict format, double param0);

int s3112(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s3112");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      sum = (float)0.0;
      {
        int i = 0;
        while (i < 32000) {
          sum += (float)a[i];
          b[i] = (float __attribute__((__aligned__(16))))sum;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            sum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S3112\t %.2f \t\t",clock_dif_sec); /* printf_va_120 */
  temp = sum;
  check(-12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_121(char const * restrict format, double param0);

int s3113(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float max_0;
  init((char *)"s3113");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 4) {
      {
        int tmp;
        tmp = abs((int)a[0]);
        max_0 = (float)tmp;
        {
          int i = 0;
          while (i < 32000) {
            {
              int tmp_1;
              tmp_1 = abs((int)a[i]);
              ;
              if ((float)tmp_1 > max_0) {
                int tmp_0;
                tmp_0 = abs((int)a[i]);
                max_0 = (float)tmp_0;
              }
            }
            i ++;
          }
        }
        dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),
              (float *)(e),(float (*)[256])(aa),(float (*)[256])(bb),
              (float (*)[256])(cc),max_0);
      }
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S3113\t %.2f \t\t",clock_dif_sec); /* printf_va_121 */
  temp = max_0;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_122(char const * restrict format, double param0);

int s321(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s321 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] += a[i - 1] * b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S321\t %.2f \t\t",clock_dif_sec); /* printf_va_122 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_123(char const * restrict format, double param0);

int s322(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s322 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 2;
        while (i < 32000) {
          a[i] = (a[i] + a[i - 1] * b[i]) + a[i - 2] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S322\t %.2f \t\t",clock_dif_sec); /* printf_va_123 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_124(char const * restrict format, double param0);

int s323(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s323 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 1;
        while (i < 32000) {
          a[i] = b[i - 1] + c[i] * d[i];
          b[i] = a[i] + c[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S323\t %.2f \t\t",clock_dif_sec); /* printf_va_124 */
  check(12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_125(char const * restrict format, double param0);

int s331(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  float chksum;
  init((char *)"s331 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            j = i;
          i ++;
        }
      }
      chksum = (float)j;
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            chksum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S331\t %.2f \t\t",clock_dif_sec); /* printf_va_125 */
  temp = (float)(j + 1);
  check(-1);
  __retres = 0;
  return __retres;
}

int max(int a1, int b1)
{
  int __retres;
  if (b1 > a1) {
    __retres = b1;
    goto return_label;
  }
  else {
    __retres = a1;
    goto return_label;
  }
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_126(char const * restrict format, double param0);

int s332(float t)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int index_0;
  float value;
  float chksum;
  init((char *)"s332 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      index_0 = -2;
      value = (float)(- 1.);
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))t) {
            index_0 = i;
            value = (float)a[i];
            goto L20;
          }
          i ++;
        }
      }
      L20: chksum = value + (float)index_0;
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            chksum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S332\t %.2f \t\t",clock_dif_sec); /* printf_va_126 */
  temp = value;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_127(char const * restrict format, double param0);

int s341(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int j;
  start_t = clock();
  init((char *)"s341 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000) {
          if (b[i] > (float __attribute__((__aligned__(16))))((float)0.)) {
            j ++;
            a[j] = b[i];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S341\t %.2f \t\t",clock_dif_sec); /* printf_va_127 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_128(char const * restrict format, double param0);

int s342(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  start_t = clock();
  init((char *)"s342 ");
  start_t = clock();
  int j = 0;
  {
    int nl = 0;
    while (nl < 200000) {
      j = -1;
      {
        int i = 0;
        while (i < 32000) {
          if (a[i] > (float __attribute__((__aligned__(16))))((float)0.)) {
            j ++;
            a[i] = b[j];
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S342\t %.2f \t\t",clock_dif_sec); /* printf_va_128 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_129(char const * restrict format, double param0);

int s343(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  start_t = clock();
  init((char *)"s343 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 10 * (200000 / 256)) {
      k = -1;
      {
        int i = 0;
        while (i < 256) {
          {
            int j = 0;
            while (j < 256) {
              if (bb[j][i] > (float __attribute__((__aligned__(16))))((float)0.)) {
                k ++;
                array[k] = (float)aa[j][i];
              }
              j ++;
            }
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S343\t %.2f \t\t",clock_dif_sec); /* printf_va_129 */
  check(0);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_130(char const * restrict format, double param0);

int s351(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  start_t = clock();
  init((char *)"s351 ");
  start_t = clock();
  float alpha = (float)c[0];
  {
    int nl = 0;
    while (nl < 8 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += (float __attribute__((__aligned__(16))))(alpha * (float)b[i]);
          a[i + 1] += (float __attribute__((__aligned__(16))))(alpha * (float)b[
                                                               i + 1]);
          a[i + 2] += (float __attribute__((__aligned__(16))))(alpha * (float)b[
                                                               i + 2]);
          a[i + 3] += (float __attribute__((__aligned__(16))))(alpha * (float)b[
                                                               i + 3]);
          a[i + 4] += (float __attribute__((__aligned__(16))))(alpha * (float)b[
                                                               i + 4]);
          i += 5;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S351\t %.2f \t\t",clock_dif_sec); /* printf_va_130 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_131(char const * restrict format, double param0);

int s1351(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  start_t = clock();
  init((char *)"s351 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 8 * 200000) {
      {
        float * restrict A = (float *)(a);
        float * restrict B = (float *)(b);
        float * restrict C = (float *)(c);
        {
          int i = 0;
          while (i < 32000) {
            *A = *B + *C;
            A ++;
            B ++;
            C ++;
            i ++;
          }
        }
        dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),
              (float *)(e),(float (*)[256])(aa),(float (*)[256])(bb),
              (float (*)[256])(cc),(float)0.);
      }
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1351\t %.2f \t\t",clock_dif_sec); /* printf_va_131 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_132(char const * restrict format, double param0);

int s352(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float dot;
  start_t = clock();
  init((char *)"s352 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 8 * 200000) {
      dot = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          dot = ((((dot + (float)(a[i] * b[i])) + (float)(a[i + 1] * b[i + 1])) + (float)(
                  a[i + 2] * b[i + 2])) + (float)(a[i + 3] * b[i + 3])) + (float)(
                a[i + 4] * b[i + 4]);
          i += 5;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            dot);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S352\t %.2f \t\t",clock_dif_sec); /* printf_va_132 */
  temp = dot;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_133(char const * restrict format, double param0);

int s353(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  start_t = clock();
  init((char *)"s353 ");
  start_t = clock();
  float alpha = (float)c[0];
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += (float __attribute__((__aligned__(16))))(alpha * (float)b[*(
                                                           ip + i)]);
          a[i + 1] += (float __attribute__((__aligned__(16))))(alpha * (float)b[*(
                                                               ip + (
                                                               i + 1))]);
          a[i + 2] += (float __attribute__((__aligned__(16))))(alpha * (float)b[*(
                                                               ip + (
                                                               i + 2))]);
          a[i + 3] += (float __attribute__((__aligned__(16))))(alpha * (float)b[*(
                                                               ip + (
                                                               i + 3))]);
          a[i + 4] += (float __attribute__((__aligned__(16))))(alpha * (float)b[*(
                                                               ip + (
                                                               i + 4))]);
          i += 5;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S353\t %.2f \t\t",clock_dif_sec); /* printf_va_133 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_134(char const * restrict format, double param0);

int s421(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  set1d(xx,(float)1.,1);
  init((char *)"s421 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      yy = xx;
      {
        int i = 0;
        while (i < 32000 - 1) {
          *(xx + i) = *(yy + (i + 1)) + (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S421\t %.2f \t\t",clock_dif_sec); /* printf_va_134 */
  temp = (float)0;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += *(xx + i_0);
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_135(char const * restrict format, double param0);

int s1421(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  set1d(xx,(float)1.,1);
  init((char *)"s421 ");
  start_t = clock();
  xx = (float *)(& b[32000 / 2]);
  {
    int nl = 0;
    while (nl < 8 * 200000) {
      {
        int i = 0;
        while (i < 32000 / 2) {
          b[i] = (float __attribute__((__aligned__(16))))(*(xx + i) + (float)a[i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S1421\t %.2f \t\t",clock_dif_sec); /* printf_va_135 */
  temp = (float)0;
  {
    int i_0 = 0;
    while (i_0 < 32000 / 2) {
      temp += *(xx + i_0);
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_136(char const * restrict format, double param0);

int s422(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  xx = & array[4];
  set1d(xx,(float)0.,1);
  init((char *)"s422 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 8 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          *(xx + i) = array[i + 8] + (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S422\t %.2f \t\t",clock_dif_sec); /* printf_va_136 */
  temp = (float)0;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += *(xx + i_0);
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_137(char const * restrict format, double param0);

int s423(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int vl = 64;
  xx = & array[vl];
  set1d(xx,(float)1.,1);
  init((char *)"s423 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          array[i + 1] = *(xx + i) + (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S423\t %.2f \t\t",clock_dif_sec); /* printf_va_137 */
  temp = (float)0.;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += array[i_0];
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_138(char const * restrict format, double param0);

int s424(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int vl = 63;
  xx = & array[vl];
  set1d(xx,(float)0.,1);
  init((char *)"s424 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000 - 1) {
          *(xx + (i + 1)) = array[i] + (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)1.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S424\t %.2f \t\t",clock_dif_sec); /* printf_va_138 */
  temp = (float)0.;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += *(xx + i_0);
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_139(char const * restrict format, double param0);

int s431(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k1 = 1;
  int k2 = 2;
  int k = 2 * k1 - k2;
  init((char *)"s431 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = a[i + k] + b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S431\t %.2f \t\t",clock_dif_sec); /* printf_va_139 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_140(char const * restrict format, double param0);

int s441(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s441 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (d[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            a[i] += b[i] * c[i];
          else 
            if (d[i] == (float __attribute__((__aligned__(16))))((float)0.)) 
              a[i] += b[i] * b[i];
            else a[i] += c[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S441\t %.2f \t\t",clock_dif_sec); /* printf_va_140 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_141(char const * restrict format, double param0);

int s442(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s442 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 0;
        while (i < 32000) {
          switch (indx[i]) {
            case 1: goto L15;
            case 2: goto L20;
            case 3: goto L30;
            case 4: goto L40;
          }
          L15: a[i] += b[i] * b[i];
          goto L50;
          L20: a[i] += c[i] * c[i];
          goto L50;
          L30: a[i] += d[i] * d[i];
          goto L50;
          L40: a[i] += e[i] * e[i];
          L50: ;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S442\t %.2f \t\t",clock_dif_sec); /* printf_va_141 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_142(char const * restrict format, double param0);

int s443(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s443 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (! (d[i] <= (float __attribute__((__aligned__(16))))((float)0.))) 
            goto L30;
          L20: a[i] += b[i] * c[i];
          goto L50;
          L30: a[i] += b[i] * b[i];
          L50: ;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S443\t %.2f \t\t",clock_dif_sec); /* printf_va_142 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_143(char const * restrict format, double param0);

int s451(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s451 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 5) {
      {
        int i = 0;
        while (i < 32000) {
          {
            float tmp;
            float tmp_0;
            tmp = sinf((float)b[i]);
            tmp_0 = cosf((float)c[i]);
            a[i] = (float __attribute__((__aligned__(16))))(tmp + tmp_0);
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S451\t %.2f \t\t",clock_dif_sec); /* printf_va_143 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_144(char const * restrict format, double param0);

int s452(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s452 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = b[i] + c[i] * (float __attribute__((__aligned__(16))))((float)(
                        i + 1));
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S452\t %.2f \t\t",clock_dif_sec); /* printf_va_144 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_145(char const * restrict format, double param0);

int s453(void)
{
  int __retres;
  float s;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s453 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 2) {
      s = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          s += (float)2.;
          a[i] = (float __attribute__((__aligned__(16))))(s * (float)b[i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S453\t %.2f \t\t",clock_dif_sec); /* printf_va_145 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_146(char const * restrict format, double param0);

int s471(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int m = 32000;
  set1d(x,(float)0.,1);
  init((char *)"s471 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 / 2) {
      {
        int i = 0;
        while (i < m) {
          x[i] = (float)(b[i] + d[i] * d[i]);
          s471s__fc_inline();
          b[i] = c[i] + d[i] * e[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S471\t %.2f \t\t",clock_dif_sec); /* printf_va_146 */
  temp = (float)0.;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += x[i_0];
      i_0 ++;
    }
  }
  check(-12);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_147(char const * restrict format, double param0);

int s481(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s481 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (d[i] < (float __attribute__((__aligned__(16))))((float)0.)) 
            exit(0);
          a[i] += b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S481\t %.2f \t\t",clock_dif_sec); /* printf_va_147 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_148(char const * restrict format, double param0);

int s482(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s482 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[i] * c[i];
          if (c[i] > b[i]) break;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S482\t %.2f \t\t",clock_dif_sec); /* printf_va_148 */
  check(1);
  __retres = 0;
  return __retres;
}

int min(int a_0, int b_0)
{
  int tmp;
  if (a_0 < b_0) tmp = a_0; else tmp = b_0;
  return tmp;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_149(char const * restrict format, double param0);

int s491(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s491 ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[*(ip + i)] = b[i] + c[i] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S491\t %.2f \t\t",clock_dif_sec); /* printf_va_149 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_150(char const * restrict format, double param0);

int s4112(int * restrict ip, float s)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s4112");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[*(ip + i)] * (float __attribute__((__aligned__(16))))s;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4112\t %.2f \t\t",clock_dif_sec); /* printf_va_150 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_151(char const * restrict format, double param0);

int s4113(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s4113");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[*(ip + i)] = b[*(ip + i)] + c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4113\t %.2f \t\t",clock_dif_sec); /* printf_va_151 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_152(char const * restrict format, double param0);

int s4114(int *ip, int n1)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  int k;
  init((char *)"s4114");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = n1 - 1;
        while (i < 32000) {
          k = *(ip + i);
          a[i] = b[i] + c[((32000 - k) + 1) - 2] * d[i];
          k += 5;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4114\t %.2f \t\t",clock_dif_sec); /* printf_va_152 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_153(char const * restrict format, double param0);

int s4115(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"s4115");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          sum += (float)(a[i] * b[*(ip + i)]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4115\t %.2f \t\t",clock_dif_sec); /* printf_va_153 */
  temp = sum;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_154(char const * restrict format, double param0);

int s4116(int * restrict ip, int j, int inc)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  int off;
  init((char *)"s4116");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 100 * 200000) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 256 - 1) {
          off = inc + i;
          sum += (float)(a[off] * aa[j - 1][*(ip + i)]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4116\t %.2f \t\t",clock_dif_sec); /* printf_va_154 */
  temp = sum;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_155(char const * restrict format, double param0);

int s4117(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s4117");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = b[i] + c[i / 2] * d[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4117\t %.2f \t\t",clock_dif_sec); /* printf_va_155 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_156(char const * restrict format, double param0);

int s4121(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"s4121");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          {
            float tmp;
            tmp = f__fc_inline((float)b[i],(float)c[i]);
            a[i] += (float __attribute__((__aligned__(16))))tmp;
          }
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("S4121\t %.2f \t\t",clock_dif_sec); /* printf_va_156 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_157(char const * restrict format, double param0);

int va(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"va\t");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("va\t %.2f \t\t",clock_dif_sec); /* printf_va_157 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_158(char const * restrict format, double param0);

int vag(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vag  ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = b[*(ip + i)];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vag\t %.2f \t\t",clock_dif_sec); /* printf_va_158 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_159(char const * restrict format, double param0);

int vas(int * restrict ip)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vas  ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 2 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[*(ip + i)] = b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vas\t %.2f \t\t",clock_dif_sec); /* printf_va_159 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_160(char const * restrict format, double param0);

int vif(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vif  ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          if (b[i] > (float __attribute__((__aligned__(16))))((float)0.)) 
            a[i] = b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vif\t %.2f \t\t",clock_dif_sec); /* printf_va_160 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_161(char const * restrict format, double param0);

int vpv(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vpv  ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vpv\t %.2f \t\t",clock_dif_sec); /* printf_va_161 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_162(char const * restrict format, double param0);

int vtv(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vtv  ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] *= b[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vtv\t %.2f \t\t",clock_dif_sec); /* printf_va_162 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_163(char const * restrict format, double param0);

int vpvtv(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vpvtv");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[i] * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vpvtv\t %.2f \t\t",clock_dif_sec); /* printf_va_163 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_164(char const * restrict format, double param0);

int vpvts(float s)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vpvts");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[i] * (float __attribute__((__aligned__(16))))s;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vpvts\t %.2f \t\t",clock_dif_sec); /* printf_va_164 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_165(char const * restrict format, double param0);

int vpvpv(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vpvpv");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] += b[i] + c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vpvpv\t %.2f \t\t",clock_dif_sec); /* printf_va_165 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_166(char const * restrict format, double param0);

int vtvtv(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  init((char *)"vtvtv");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 4 * 200000) {
      {
        int i = 0;
        while (i < 32000) {
          a[i] = (a[i] * b[i]) * c[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vtvtv\t %.2f \t\t",clock_dif_sec); /* printf_va_166 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_167(char const * restrict format, double param0);

int vsumr(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float sum;
  init((char *)"vsumr");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      sum = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          sum += (float)a[i];
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            sum);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vsumr\t %.2f \t\t",clock_dif_sec); /* printf_va_167 */
  check(1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_168(char const * restrict format, double param0);

int vdotr(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float dot;
  init((char *)"vdotr");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      dot = (float)0.;
      {
        int i = 0;
        while (i < 32000) {
          dot += (float)(a[i] * b[i]);
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            dot);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vdotr\t %.2f \t\t",clock_dif_sec); /* printf_va_168 */
  temp = dot;
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_169(char const * restrict format, double param0);

int vbor(void)
{
  int __retres;
  clock_t start_t;
  clock_t end_t;
  clock_t clock_dif;
  double clock_dif_sec;
  float a1;
  float b1;
  float c1;
  float d1;
  float e1;
  float f1;
  init((char *)"vbor ");
  start_t = clock();
  {
    int nl = 0;
    while (nl < 200000 * 10) {
      {
        int i = 0;
        while (i < 256) {
          a1 = (float)a[i];
          b1 = (float)b[i];
          c1 = (float)c[i];
          d1 = (float)d[i];
          e1 = (float)e[i];
          f1 = (float)aa[0][i];
          a1 = (((((((((a1 * b1) * c1 + (a1 * b1) * d1) + (a1 * b1) * e1) + 
                     (a1 * b1) * f1) + (a1 * c1) * d1) + (a1 * c1) * e1) + 
                  (a1 * c1) * f1) + (a1 * d1) * e1) + (a1 * d1) * f1) + 
               (a1 * e1) * f1;
          b1 = (((((b1 * c1) * d1 + (b1 * c1) * e1) + (b1 * c1) * f1) + 
                 (b1 * d1) * e1) + (b1 * d1) * f1) + (b1 * e1) * f1;
          c1 = ((c1 * d1) * e1 + (c1 * d1) * f1) + (c1 * e1) * f1;
          d1 = (d1 * e1) * f1;
          x[i] = ((a1 * b1) * c1) * d1;
          i ++;
        }
      }
      dummy((float *)(a),(float *)(b),(float *)(c),(float *)(d),(float *)(e),
            (float (*)[256])(aa),(float (*)[256])(bb),(float (*)[256])(cc),
            (float)0.);
      nl ++;
    }
  }
  end_t = clock();
  clock_dif = end_t - start_t;
  clock_dif_sec = (double)clock_dif / 1000000.0;
  printf("vbor\t %.2f \t\t",clock_dif_sec); /* printf_va_169 */
  temp = (float)0.;
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      temp += x[i_0];
      i_0 ++;
    }
  }
  check(-1);
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_170(char const * restrict format);

void set(int *ip, float *s1, float *s2)
{
  void *tmp;
  tmp = malloc((unsigned long)32000 * sizeof(float));
  xx = (float *)tmp;
  if (! xx) exit(1);
  printf("\n"); /* printf_va_170 */
  {
    int i = 0;
    while (i < 32000) {
      *(ip + i) = i + 4;
      *(ip + (i + 1)) = i + 2;
      *(ip + (i + 2)) = i;
      *(ip + (i + 3)) = i + 3;
      *(ip + (i + 4)) = i + 1;
      i += 5;
    }
  }
  set1d((float *)(a),(float)1.,1);
  set1d((float *)(b),(float)1.,1);
  set1d((float *)(c),(float)1.,1);
  set1d((float *)(d),(float)1.,1);
  set1d((float *)(e),(float)1.,1);
  set2d((float (*)[256])(aa),(float)0.,-1);
  set2d((float (*)[256])(bb),(float)0.,-1);
  set2d((float (*)[256])(cc),(float)0.,-1);
  {
    int i_0 = 0;
    while (i_0 < 32000) {
      indx[i_0] = (i_0 + 1) % 4 + 1;
      i_0 ++;
    }
  }
  *s1 = (float)1.0;
  *s2 = (float)2.0;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_171(char const * restrict format);

int main(void)
{
  int __retres;
  float s1;
  float s2;
  int n1 = 1;
  int n3 = 1;
  int *ip = malloc((unsigned long)32000 * sizeof(float));
  if (! ip) exit(1);
  set(ip,& s1,& s2);
  printf("Loop \t Time(Sec) \t Checksum \n"); /* printf_va_171 */
  s000();
  s111();
  s1111();
  s112();
  s1112();
  s113();
  s1113();
  s114();
  s115();
  s1115();
  s116();
  s118();
  s119();
  s1119();
  s121();
  s122(n1,n3);
  s123();
  s124();
  s125();
  s126();
  s127();
  s128();
  s131();
  s132();
  s141();
  s151();
  s152();
  s161();
  s1161();
  s162(n1);
  s171(n1);
  s172(n1,n3);
  s173();
  s174(32000 / 2);
  s175(n1);
  s176();
  s211();
  s212();
  s1213();
  s221();
  s1221();
  s222();
  s231();
  s232();
  s1232();
  s233();
  s2233();
  s235();
  s241();
  s242(s1,s2);
  s243();
  s244();
  s1244();
  s2244();
  s251();
  s1251();
  s2251();
  s3251();
  s252();
  s253();
  s254();
  s255();
  s256();
  s257();
  s258();
  s261();
  s271();
  s272(s1);
  s273();
  s274();
  s275();
  s2275();
  s276();
  s277();
  s278();
  s279();
  s1279();
  s2710(s1);
  s2711();
  s2712();
  s281();
  s1281();
  s291();
  s292();
  s293();
  s2101();
  s2102();
  s2111();
  s311();
  s31111();
  s312();
  s313();
  s314();
  s315();
  s316();
  s317();
  s318(n1);
  s319();
  s3110();
  s13110();
  s3111();
  s3112();
  s3113();
  s321();
  s322();
  s323();
  s331();
  s332(s1);
  s341();
  s342();
  s343();
  s351();
  s1351();
  s352();
  s353(ip);
  s421();
  s1421();
  s422();
  s423();
  s424();
  s431();
  s441();
  s442();
  s443();
  s451();
  s452();
  s453();
  s471();
  s481();
  s482();
  s491(ip);
  s4112(ip,s1);
  s4113(ip);
  s4114(ip,n1);
  s4115(ip);
  s4116(ip,256 / 2,n1);
  s4117();
  s4121();
  va();
  vag(ip);
  vas(ip);
  vif();
  vpv();
  vtv();
  vpvtv();
  vpvts(s1);
  vpvpv();
  vtvtv();
  vsumr();
  vdotr();
  vbor();
  __retres = 0;
  return __retres;
}


