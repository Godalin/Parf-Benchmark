/* Generated by Frama-C */
#include "errno.h"
#include "inttypes.h"
#include "math.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
struct __file {
   char *buf ;
   unsigned char unget ;
   uint8_t flags ;
   int size ;
   int len ;
   int (*put)(char , struct __file *) ;
   int (*get)(struct __file *) ;
   void *udata ;
};
typedef struct __file FILE;
static void ( __attribute__((__always_inline__)) _delay_loop_1)(uint8_t __count);

static void ( __attribute__((__always_inline__)) _delay_loop_2)(uint16_t __count);

static void ( __attribute__((__always_inline__)) _delay_loop_1)(uint8_t __count)
{
  return;
}

static void ( __attribute__((__always_inline__)) _delay_loop_2)(uint16_t __count)
{
  return;
}

static void ( __attribute__((__always_inline__)) _delay_us)(double __us);

static void ( __attribute__((__always_inline__)) _delay_ms)(double __ms);

void __builtin_avr_delay_cycles(unsigned long __n);

static void ( __attribute__((__always_inline__)) _delay_ms)(double __ms)
{
  double __tmp;
  uint32_t __ticks_dc;
  double tmp_0;
  double tmp;
  __tmp = ((double)1000000UL / 1e3) * __ms;
  tmp = fabs(__tmp);
  tmp_0 = ceil(tmp);
  __ticks_dc = (uint32_t)tmp_0;
  __builtin_avr_delay_cycles((unsigned long)__ticks_dc);
  return;
}

static void ( __attribute__((__always_inline__)) _delay_us)(double __us)
{
  double __tmp;
  uint32_t __ticks_dc;
  double tmp_0;
  double tmp;
  __tmp = ((double)1000000UL / 1e6) * __us;
  tmp = fabs(__tmp);
  tmp_0 = ceil(tmp);
  __ticks_dc = (uint32_t)tmp_0;
  __builtin_avr_delay_cycles((unsigned long)__ticks_dc);
  return;
}

uint8_t eeprom_read_byte(uint8_t const *__p) __attribute__((__pure__));

uint16_t eeprom_read_word(uint16_t const *__p) __attribute__((__pure__));

void eeprom_update_byte(uint8_t *__p, uint8_t __value);

void eeprom_update_word(uint16_t *__p, uint16_t __value);

struct __file *__iob[];

__inline static int fflush_0(FILE *stream __attribute__((__unused__)))
{
  int __retres;
  __retres = 0;
  return __retres;
}

void lcd_command(char cmd);

void lcd_init(void);

void lcd_data(unsigned char data);

void lcdCommand(unsigned char cmd_value);

void lcdData(unsigned char data_value);

void lcd_print(char *str);

void lcd_gotoxy(unsigned char x, unsigned char y);

void Reset_Lcd(void);

static FILE mystdout =
  {.buf = (char *)0,
   .unget = (unsigned char)0,
   .flags = (uint8_t)0x0002,
   .size = 0,
   .len = 0,
   .put = (int (*)(char , struct __file *))(& lcdData),
   .get = (int (*)(struct __file *))0,
   .udata = (void *)0};
void lcdCommand(unsigned char cmd_value)
{
  char cmd_value1;
  cmd_value1 = (char)((int)cmd_value & 0xF0);
  lcd_command(cmd_value1);
  _delay_us((double)10);
  cmd_value1 = (char)(((int)cmd_value << 4) & 0xF0);
  lcd_command(cmd_value1);
  _delay_us((double)10);
  return;
}

void lcd_init(void)
{
  *((uint8_t volatile *)(0x04 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x04 + 0x20)) | ((
                                                                    1 << 4) | (
                                                                    1 << 5)));
  lcdCommand((unsigned char)0x02);
  lcdCommand((unsigned char)0x01);
  lcdCommand((unsigned char)0x28);
  lcdCommand((unsigned char)0x0F);
  lcdCommand((unsigned char)0x80);
  _delay_ms((double)200);
  return;
}

void lcd_print(char *str)
{
  while ((int)*str > 0) {
    char *tmp;
    tmp = str;
    str ++;
    ;
    lcdData((unsigned char)*tmp);
  }
  return;
}

void lcdData(unsigned char data_value)
{
  char data_value1;
  data_value1 = (char)((int)data_value & 0xF0);
  lcd_data((unsigned char)data_value1);
  _delay_us((double)10);
  data_value1 = (char)(((int)data_value << 4) & 0xF0);
  lcd_data((unsigned char)data_value1);
  _delay_us((double)10);
  return;
}

void lcd_data(unsigned char data)
{
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) | (1 << 4));
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) | (1 << 5));
  _delay_us((double)100);
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (int)data);
  _delay_us((double)10);
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) & ~ (
                                                   1 << 5));
  _delay_ms((double)2);
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) & ~ ((int)data));
  return;
}

void lcd_command(char cmd)
{
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) & ~ (
                                                   1 << 4));
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) | (1 << 5));
  _delay_us((double)100);
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (int)cmd);
  _delay_us((double)10);
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) & ~ (
                                                   1 << 5));
  _delay_ms((double)2);
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) & ~ ((int)cmd));
  return;
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
  unsigned char firstCharAdr[4] =
    {(unsigned char)0x80,
     (unsigned char)0xC0,
     (unsigned char)0x94,
     (unsigned char)0xD4};
  lcdCommand((unsigned char)(((int)firstCharAdr[(int)y - 1] + (int)x) - 1));
  _delay_us((double)500);
  return;
}

void Reset_Lcd(void)
{
  lcdCommand((unsigned char)0x01);
  return;
}

void init_usart(void)
{
  *((uint8_t volatile *)0xC5) = (unsigned char)(((1000000UL / (unsigned long)8) / (unsigned long)9600 - (unsigned long)1) >> 8);
  *((uint8_t volatile *)0xC4) = (unsigned char)((1000000UL / (unsigned long)8) / (unsigned long)9600 - (unsigned long)1);
  *((uint8_t volatile *)0xC2) = (uint8_t)(((1 << 2) | (1 << 1)) | (0 << 3));
  *((uint8_t volatile *)0xC0) = (uint8_t)(1 << 1);
  *((uint8_t volatile *)0xC1) = (uint8_t)(((1 << 4) | (1 << 3)) | (1 << 7));
  return;
}

void Send_Data(unsigned char str)
{
  while (! ((int)*((uint8_t volatile *)0xC0) & (1 << 5))) ;
  *((uint8_t volatile *)0xC6) = str;
  return;
}

unsigned char Receive_Data(void)
{
  unsigned char __retres;
  while (! ((int)*((uint8_t volatile *)0xC0) & (1 << 7))) ;
  __retres = *((uint8_t volatile *)0xC6);
  return __retres;
}

void init_adc(void)
{
  *((uint8_t volatile *)0x7C) = (uint8_t)((int)*((uint8_t volatile *)0x7C) | (
                                          1 << 6));
  *((uint8_t volatile *)0x7E) = (uint8_t)((int)*((uint8_t volatile *)0x7E) | (
                                          1 << 0));
  *((uint8_t volatile *)0x7A) = (uint8_t)(((int)*((uint8_t volatile *)0x7A) | (
                                           7 << 0)) | (1 << 7));
  return;
}

unsigned int read_adc(unsigned char chan)
{
  unsigned int __retres;
  *((uint8_t volatile *)0x7C) = (uint8_t)(((int)*((uint8_t volatile *)0x7C) & 0xF0) | (
                                          (int)chan & 0x0F));
  *((uint8_t volatile *)0x7A) = (uint8_t)((int)*((uint8_t volatile *)0x7A) | (
                                          1 << 6));
  while ((int)*((uint8_t volatile *)0x7A) & (1 << 6)) ;
  __retres = (unsigned int)*((uint16_t volatile *)0x78);
  return __retres;
}

uint8_t Sensor[5];
uint8_t volatile Velocidade_Default;
uint8_t volatile Mudanca_Suave;
uint8_t volatile Mudanca_Media;
uint8_t volatile Mudanca_Media_mais;
uint16_t volatile Tempo_Bateria;
uint16_t volatile Tempo_3s;
uint16_t volatile Tempo_Perdido;
uint16_t volatile Tempo_Led;
uint16_t volatile Tempo_Send_Sensores;
uint16_t volatile Tempo_Bluetooth;
uint16_t volatile Timer_Pisca;
uint16_t volatile Tempo_Gravacao;
uint16_t volatile Tempo_Gravacao_Menos;
uint8_t volatile Comando;
uint8_t volatile Modo_Robo;
int8_t volatile Controlo_Manual;
uint8_t volatile Flag_Ciclo;
uint8_t Robo_Perdido;
uint8_t Volta;
uint8_t aux;
uint8_t Flag_Perdido;
unsigned int V;
unsigned int new;
unsigned int old;
uint8_t Battery_Level;
char Battery_Print[20];
uint8_t Flag_Bluetooth;
uint8_t Flag_Lcd;
uint8_t Flag_Bateria_Fraca;
uint8_t Gravacao[200];
uint16_t Gravacao_Tempo[200];
uint8_t Gravacao_Velocidade[200];
uint8_t Modo_Gravacao;
uint8_t Modo_Reproducao;
uint8_t Pre_Valid;
uint8_t Count;
uint8_t Count2;
uint8_t Flag_Gravacao;
uint8_t Flag_Reproducao;
uint8_t Movimentos_eeprom[200] __attribute__((__section__(".eeprom")));
uint16_t Tempo_eeprom[200] __attribute__((__section__(".eeprom")));
uint8_t Velocidade_eeprom[200] __attribute__((__section__(".eeprom")));
void Init(void);

void Sensores(void);

void Calculo(void);

void Motores(uint8_t Valid);

void Modo_Run(void);

void Modo_Stop(void);

void Modo_Perdido(void);

void Incializa_Manual(void);

void Conta_Volta(void);

void lcd_print_lcd(void);

void Read_Battery(void);

void Print_Battery(unsigned int V_0);

void Send_To_Bluetooth(void);

void Send_Battery_Bluetooth(void);

void Bateria_Fraca(void);

void Competicao(void);

void Gravar(uint8_t Mudanca);

void Reproduzir(void);

void Init_Reproducao(void);

void __vector_13(void);

void __vector_13(void)
{
  *((uint16_t volatile *)0x84) = (uint16_t)(65536 - 16000);
  if ((int)Tempo_Bateria > 0) Tempo_Bateria = (uint16_t)((int)Tempo_Bateria - 1);
  if ((int)Tempo_3s > 0) Tempo_3s = (uint16_t)((int)Tempo_3s - 1);
  if ((int)Tempo_Perdido > 0) Tempo_Perdido = (uint16_t)((int)Tempo_Perdido - 1);
  if ((int)Tempo_Led > 0) Tempo_Led = (uint16_t)((int)Tempo_Led - 1);
  if ((int)Tempo_Send_Sensores > 0) Tempo_Send_Sensores = (uint16_t)(
                                    (int)Tempo_Send_Sensores - 1);
  if ((int)Tempo_Bluetooth > 0) Tempo_Bluetooth = (uint16_t)((int)Tempo_Bluetooth - 1);
  if ((int)Timer_Pisca > 0) Timer_Pisca = (uint16_t)((int)Timer_Pisca - 1);
  if ((int)Tempo_Gravacao < 65536) Tempo_Gravacao = (uint16_t)((int)Tempo_Gravacao + 1);
  if ((int)Tempo_Gravacao_Menos > 0) Tempo_Gravacao_Menos = (uint16_t)(
                                     (int)Tempo_Gravacao_Menos - 1);
  return;
}

void __vector_18(void);

void __vector_18(void)
{
  unsigned char RecByte;
  RecByte = *((uint8_t volatile *)0xC6);
  if ((int)RecByte == 151) Comando = RecByte;
  else 
    if ((int)RecByte == 150) Comando = RecByte;
    else 
      if ((int)RecByte >= 61) {
        if ((int)RecByte <= 65) {
          if ((int)RecByte == 61) Velocidade_Default = (uint8_t)(200 - 15);
          else 
            if ((int)RecByte == 62) Velocidade_Default = (uint8_t)(200 - 8);
            else 
              if ((int)RecByte == 63) Velocidade_Default = (uint8_t)200;
              else 
                if ((int)RecByte == 64) {
                  Velocidade_Default = (uint8_t)220;
                  Mudanca_Suave = (uint8_t)(15 + 10);
                  Mudanca_Media = (uint8_t)(35 + 10);
                  Mudanca_Media_mais = (uint8_t)(50 + 10);
                }
                else 
                  if ((int)RecByte == 65) {
                    Velocidade_Default = (uint8_t)240;
                    Mudanca_Suave = (uint8_t)(15 + 20);
                    Mudanca_Media = (uint8_t)(35 + 20);
                    Mudanca_Media_mais = (uint8_t)(50 + 20);
                  }
        }
        else goto _LAND_1;
      }
      else {
        _LAND_1: ;
        if ((int)RecByte == 42) Modo_Robo = (uint8_t)42;
        else 
          if ((int)RecByte == 43) {
            Modo_Gravacao = (uint8_t)1;
            Tempo_Gravacao = (uint16_t)0;
            Count2 = (uint8_t)0;
            Flag_Gravacao = (uint8_t)2;
          }
          else 
            if ((int)RecByte == 44) {
              Modo_Gravacao = (uint8_t)0;
              Flag_Gravacao = (uint8_t)3;
              *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                               0x05 + 0x20)) & ~ (
                                                               1 << 0));
            }
            else 
              if ((int)RecByte == 45) Modo_Reproducao = (uint8_t)1;
              else 
                if ((int)RecByte == 46) Modo_Reproducao = (uint8_t)0;
                else 
                  if ((int)RecByte >= 1) {
                    if ((int)RecByte <= 4) {
                      if ((int)RecByte == 1) Controlo_Manual = (int8_t)25;
                      else 
                        if ((int)RecByte == 2) Controlo_Manual = (int8_t)21;
                        else 
                          if ((int)RecByte == 3) Controlo_Manual = (int8_t)20;
                          else 
                            if ((int)RecByte == 4) Controlo_Manual = (int8_t)30;
                    }
                    else goto _LAND_0;
                  }
                  else {
                    _LAND_0: ;
                    if ((int)RecByte == 5) Controlo_Manual = (int8_t)29;
                    else 
                      if ((int)RecByte >= 11) {
                        if ((int)RecByte <= 14) Controlo_Manual = (int8_t)29;
                        else goto _LAND;
                      }
                      else {
                        _LAND: ;
                        if ((int)RecByte == 40) Modo_Robo = RecByte;
                        else 
                          if ((int)RecByte == 41) Modo_Robo = RecByte;
                          else 
                            if ((int)RecByte >= 51) 
                              if ((int)RecByte <= 55) 
                                if ((int)RecByte == 51) Velocidade_Default = (uint8_t)180;
                                else 
                                  if ((int)RecByte == 52) Velocidade_Default = (uint8_t)200;
                                  else 
                                    if ((int)RecByte == 53) Velocidade_Default = (uint8_t)200;
                                    else 
                                      if ((int)RecByte == 54) Velocidade_Default = (uint8_t)220;
                                      else 
                                        if ((int)RecByte == 55) Velocidade_Default = (uint8_t)250;
                      }
                  }
      }
  Tempo_3s = (uint16_t)2000;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_2(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_3(char const * restrict format);

int main(void)
{
  int __retres;
  Init();
  _delay_ms((double)500);
  init_usart();
  __iob[1] = & mystdout;
  lcd_init();
  init_adc();
  while (1) {
    if ((int)Modo_Robo == 41) {
      Controlo_Manual = (int8_t)41;
      Sensores();
      if ((int)Comando == 150) {
        Calculo();
        if (! Robo_Perdido) {
          Modo_Run();
          Conta_Volta();
          Send_To_Bluetooth();
        }
        else 
          if (Robo_Perdido) 
            if (! Tempo_Perdido) {
              Flag_Perdido = (uint8_t)0;
              while (1) {
                if (! Flag_Perdido) Modo_Perdido();
                if (! Tempo_Led) {
                  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                                   0x05 + 0x20)) ^ (
                                                                   1 << 0));
                  Tempo_Led = (uint16_t)100;
                }
                Sensores();
                if (! Sensor[0]) goto _LOR;
                else 
                  if (! Sensor[1]) goto _LOR;
                  else 
                    if (! Sensor[2]) goto _LOR;
                    else 
                      if (! Sensor[3]) goto _LOR;
                      else 
                        if (! Sensor[4]) {
                          _LOR:
                          {
                            Robo_Perdido = (uint8_t)0;
                            Reset_Lcd();
                            Send_Data((unsigned char)123);
                            _delay_ms((double)2);
                            break;
                          }
                        }
              }
            }
      }
      else 
        if ((int)Comando == 151) Modo_Stop();
      if (! Tempo_Bateria) {
        Read_Battery();
        Tempo_Bateria = (uint16_t)1000;
        Send_Battery_Bluetooth();
      }
      if (! Tempo_Send_Sensores) {
        lcd_print_lcd();
        Tempo_Send_Sensores = (uint16_t)20;
      }
    }
    else 
      if ((int)Modo_Robo == 40) {
        if (! Flag_Ciclo) Incializa_Manual();
        if ((int)Controlo_Manual != 41) {
          Motores((uint8_t)Controlo_Manual);
          _delay_us((double)150);
        }
        if (! Tempo_Bateria) {
          Read_Battery();
          Tempo_Bateria = (uint16_t)1000;
          Send_Battery_Bluetooth();
        }
        if (! Tempo_Send_Sensores) {
          lcd_print_lcd();
          Tempo_Send_Sensores = (uint16_t)20;
        }
        if (! Tempo_3s) {
          lcdCommand((unsigned char)0x01);
          lcd_gotoxy((unsigned char)1,(unsigned char)1);
          printf("********************"); /* printf_va_1 */
          lcd_gotoxy((unsigned char)5,(unsigned char)2);
          lcd_print((char *)"DESCONECTADO");
          lcd_gotoxy((unsigned char)1,(unsigned char)3);
          printf("********************"); /* printf_va_2 */
          _delay_ms((double)30);
          Tempo_Led = (uint16_t)400;
          while (1) {
            if (! Tempo_Led) {
              *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                               0x0B + 0x20)) ^ (
                                                               1 << 2));
              Tempo_Led = (uint16_t)400;
            }
            Motores((uint8_t)29);
            if (Tempo_3s) {
              Flag_Ciclo = (uint8_t)0;
              break;
            }
          }
        }
      }
      else 
        if ((int)Modo_Robo == 42) {
          Velocidade_Default = (uint8_t)250;
          Mudanca_Suave = (uint8_t)15;
          Mudanca_Media = (uint8_t)40;
          Mudanca_Media_mais = (uint8_t)70;
          Reset_Lcd();
          Competicao();
          while (1) {
            Sensores();
            if (! Robo_Perdido) Calculo();
            else 
              if (Robo_Perdido) 
                if (! Tempo_Perdido) {
                  Motores((uint8_t)29);
                  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                                   0x05 + 0x20)) ^ (
                                                                   1 << 0));
                  if (! Sensor[0]) goto _LOR_0;
                  else 
                    if (! Sensor[1]) goto _LOR_0;
                    else 
                      if (! Sensor[2]) goto _LOR_0;
                      else 
                        if (! Sensor[3]) goto _LOR_0;
                        else 
                          if (! Sensor[4]) {
                            _LOR_0:
                            {
                              Robo_Perdido = (uint8_t)0;
                              *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)(
                              (int)*((uint8_t volatile *)(0x05 + 0x20)) & ~ (
                              1 << 0));
                            }
                          }
                }
            if ((int)Modo_Robo != 42) {
              Reset_Lcd();
              break;
            }
          }
        }
    while ((int)Battery_Level <= 2) {
      Bateria_Fraca();
      if (! Tempo_Bateria) {
        Read_Battery();
        Tempo_Bateria = (uint16_t)1000;
        Send_Battery_Bluetooth();
      }
      if ((int)Battery_Level > 2) {
        Flag_Bateria_Fraca = (uint8_t)0;
        Reset_Lcd();
      }
    }
    if (Modo_Reproducao) {
      Init_Reproducao();
      while (1) {
        if (! Tempo_Gravacao_Menos) {
          if (! Flag_Reproducao) Reproduzir(); else goto _LAND;
        }
        else {
          _LAND: ;
          if (Flag_Reproducao) {
            Motores((uint8_t)29);
            lcd_gotoxy((unsigned char)1,(unsigned char)2);
            printf(" Reproducao acabada "); /* printf_va_3 */
            if (! Tempo_Gravacao_Menos) {
              *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                               0x0B + 0x20)) ^ (
                                                               1 << 2));
              Tempo_Gravacao_Menos = (uint16_t)1000;
            }
          }
        }
        if (! Modo_Reproducao) {
          Count = (uint8_t)0;
          Reset_Lcd();
          Flag_Ciclo = (uint8_t)0;
          Flag_Reproducao = (uint8_t)0;
          break;
        }
      }
    }
  }
  return __retres;
}

void Init(void)
{
  *((uint8_t volatile *)0xB1) = (uint8_t)0;
  *((uint8_t volatile *)(0x17 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x17 + 0x20)) | (7 << 0));
  *((uint8_t volatile *)0xB0) = (uint8_t)(((3 << 0) | (1 << 7)) | (1 << 5));
  *((uint8_t volatile *)0xB1) = (uint8_t)((int)*((uint8_t volatile *)0xB1) | (
                                          1 << 3));
  *((uint8_t volatile *)0xB2) = (uint8_t)0;
  *((uint8_t volatile *)0xB3) = (uint8_t)200;
  *((uint8_t volatile *)0xB4) = (uint8_t)200;
  *((uint8_t volatile *)0x70) = (uint8_t)0;
  *((uint8_t volatile *)0xB1) = (uint8_t)1;
  *((uint8_t volatile *)0x81) = (uint8_t)0;
  *((uint8_t volatile *)(0x16 + 0x20)) = (uint8_t)((7 << 0) | (1 << 5));
  *((uint8_t volatile *)0x80) = (uint8_t)0;
  *((uint16_t volatile *)0x84) = (uint16_t)(65536 - 16000);
  *((uint8_t volatile *)0x6F) = (uint8_t)(1 << 0);
  *((uint8_t volatile *)0x81) = (uint8_t)1;
  /*@ assigns \nothing; */
  __asm__ volatile ("sti" :  :  : "memory");
  *((uint8_t volatile *)(0x07 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x07 + 0x20)) & ~ (
                                                   ((((1 << 5) | (1 << 4)) | (
                                                     1 << 3)) | (1 << 2)) | (
                                                   1 << 1)));
  *((uint8_t volatile *)(0x08 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x08 + 0x20)) | ((
                                                                    (
                                                                    (
                                                                    (
                                                                    1 << 5) | (
                                                                    1 << 4)) | (
                                                                    1 << 3)) | (
                                                                    1 << 2)) | (
                                                                    1 << 1)));
  *((uint8_t volatile *)(0x0A + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0A + 0x20)) | (1 << 2));
  *((uint8_t volatile *)(0x04 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x04 + 0x20)) | (1 << 0));
  *((uint8_t volatile *)(0x04 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x04 + 0x20)) | ((
                                                                    (
                                                                    1 << 3) | (
                                                                    1 << 2)) | (
                                                                    1 << 1)));
  *((uint8_t volatile *)(0x0A + 0x20)) = (uint8_t)0xFF;
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) | (1 << 3));
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (1 << 3));
  Velocidade_Default = (uint8_t)200;
  Mudanca_Suave = (uint8_t)15;
  Mudanca_Media = (uint8_t)35;
  Mudanca_Media_mais = (uint8_t)50;
  Volta = (uint8_t)1;
  Send_Data((unsigned char)71);
  Motores((uint8_t)29);
  Comando = (uint8_t)151;
  Modo_Robo = (uint8_t)41;
  Flag_Ciclo = (uint8_t)0;
  Robo_Perdido = (uint8_t)0;
  Flag_Bluetooth = (uint8_t)1;
  Flag_Bateria_Fraca = (uint8_t)0;
  Flag_Lcd = (uint8_t)0;
  Modo_Gravacao = (uint8_t)0;
  Modo_Reproducao = (uint8_t)0;
  Flag_Reproducao = (uint8_t)0;
  Tempo_Send_Sensores = (uint16_t)0;
  Tempo_Bluetooth = (uint16_t)0;
  Tempo_Bateria = (uint16_t)0;
  return;
}

void Sensores(void)
{
  if ((int)*((uint8_t volatile *)(0x06 + 0x20)) & (1 << 5)) Sensor[4] = (uint8_t)1;
  else Sensor[4] = (uint8_t)0;
  if ((int)*((uint8_t volatile *)(0x06 + 0x20)) & (1 << 4)) Sensor[3] = (uint8_t)1;
  else Sensor[3] = (uint8_t)0;
  if ((int)*((uint8_t volatile *)(0x06 + 0x20)) & (1 << 3)) Sensor[2] = (uint8_t)1;
  else Sensor[2] = (uint8_t)0;
  if ((int)*((uint8_t volatile *)(0x06 + 0x20)) & (1 << 2)) Sensor[1] = (uint8_t)1;
  else Sensor[1] = (uint8_t)0;
  if ((int)*((uint8_t volatile *)(0x06 + 0x20)) & (1 << 1)) Sensor[0] = (uint8_t)1;
  else Sensor[0] = (uint8_t)0;
  return;
}

void Calculo(void)
{
  if (! Robo_Perdido) {
    if (Sensor[0]) {
      if (Sensor[1]) {
        if (Sensor[2]) {
          if (Sensor[3]) {
            if (Sensor[4]) {
              Tempo_Perdido = (uint16_t)3000;
              Robo_Perdido = (uint8_t)1;
            }
            else goto _LAND_56;
          }
          else goto _LAND_56;
        }
        else goto _LAND_56;
      }
      else goto _LAND_56;
    }
    else goto _LAND_56;
  }
  else 
    _LAND_56:
    if (! Sensor[2]) {
      if (Sensor[0]) {
        if (Sensor[1]) {
          if (Sensor[3]) {
            if (Sensor[4]) {
              Motores((uint8_t)20);
              Robo_Perdido = (uint8_t)0;
            }
            else goto _LAND_50;
          }
          else goto _LAND_50;
        }
        else goto _LAND_50;
      }
      else goto _LAND_50;
    }
    else 
      _LAND_50:
      if (! Sensor[1]) {
        if (Sensor[0]) {
          if (Sensor[2]) {
            if (Sensor[3]) {
              if (Sensor[4]) {
                Motores((uint8_t)23);
                Robo_Perdido = (uint8_t)0;
              }
              else goto _LAND_46;
            }
            else goto _LAND_46;
          }
          else goto _LAND_46;
        }
        else goto _LAND_46;
      }
      else 
        _LAND_46:
        if (! Sensor[0]) {
          if (Sensor[1]) {
            if (Sensor[2]) {
              if (Sensor[3]) {
                if (Sensor[4]) {
                  Motores((uint8_t)21);
                  Robo_Perdido = (uint8_t)0;
                }
                else goto _LAND_42;
              }
              else goto _LAND_42;
            }
            else goto _LAND_42;
          }
          else goto _LAND_42;
        }
        else 
          _LAND_42:
          if (! Sensor[3]) {
            if (Sensor[0]) {
              if (Sensor[1]) {
                if (Sensor[2]) {
                  if (Sensor[4]) {
                    Motores((uint8_t)26);
                    Robo_Perdido = (uint8_t)0;
                  }
                  else goto _LAND_38;
                }
                else goto _LAND_38;
              }
              else goto _LAND_38;
            }
            else goto _LAND_38;
          }
          else 
            _LAND_38:
            if (! Sensor[4]) {
              if (Sensor[0]) {
                if (Sensor[1]) {
                  if (Sensor[2]) {
                    if (Sensor[3]) {
                      Motores((uint8_t)25);
                      Robo_Perdido = (uint8_t)0;
                    }
                    else goto _LAND_34;
                  }
                  else goto _LAND_34;
                }
                else goto _LAND_34;
              }
              else goto _LAND_34;
            }
            else {
              _LAND_34: ;
              if (Sensor[2]) {
                if (! Sensor[0]) {
                  if (! Sensor[1]) {
                    if (Sensor[3]) {
                      if (Sensor[4]) {
                        Motores((uint8_t)21);
                        Robo_Perdido = (uint8_t)0;
                      }
                      else goto _LAND_30;
                    }
                    else goto _LAND_30;
                  }
                  else goto _LAND_30;
                }
                else goto _LAND_30;
              }
              else 
                _LAND_30:
                if (! Sensor[2]) {
                  if (Sensor[0]) {
                    if (! Sensor[1]) {
                      if (Sensor[3]) {
                        if (Sensor[4]) {
                          Motores((uint8_t)22);
                          Robo_Perdido = (uint8_t)0;
                        }
                        else goto _LAND_26;
                      }
                      else goto _LAND_26;
                    }
                    else goto _LAND_26;
                  }
                  else goto _LAND_26;
                }
                else 
                  _LAND_26:
                  if (! Sensor[2]) {
                    if (Sensor[0]) {
                      if (Sensor[1]) {
                        if (! Sensor[3]) {
                          if (Sensor[4]) {
                            Motores((uint8_t)28);
                            Robo_Perdido = (uint8_t)0;
                          }
                          else goto _LAND_22;
                        }
                        else goto _LAND_22;
                      }
                      else goto _LAND_22;
                    }
                    else goto _LAND_22;
                  }
                  else {
                    _LAND_22: ;
                    if (Sensor[2]) {
                      if (Sensor[0]) {
                        if (Sensor[1]) {
                          if (! Sensor[3]) {
                            if (! Sensor[4]) {
                              Motores((uint8_t)25);
                              Robo_Perdido = (uint8_t)0;
                            }
                            else goto _LAND_18;
                          }
                          else goto _LAND_18;
                        }
                        else goto _LAND_18;
                      }
                      else goto _LAND_18;
                    }
                    else 
                      _LAND_18:
                      if (! Sensor[0]) {
                        if (! Sensor[1]) {
                          if (! Sensor[2]) {
                            if (Sensor[3]) {
                              if (Sensor[4]) {
                                Motores((uint8_t)21);
                                Robo_Perdido = (uint8_t)0;
                              }
                              else goto _LAND_14;
                            }
                            else goto _LAND_14;
                          }
                          else goto _LAND_14;
                        }
                        else goto _LAND_14;
                      }
                      else {
                        _LAND_14: ;
                        if (Sensor[0]) {
                          if (Sensor[1]) {
                            if (! Sensor[2]) {
                              if (! Sensor[3]) {
                                if (! Sensor[4]) {
                                  Motores((uint8_t)25);
                                  Robo_Perdido = (uint8_t)0;
                                }
                                else goto _LAND_10;
                              }
                              else goto _LAND_10;
                            }
                            else goto _LAND_10;
                          }
                          else goto _LAND_10;
                        }
                        else 
                          _LAND_10:
                          if (! Sensor[0]) {
                            if (! Sensor[1]) {
                              if (! Sensor[2]) {
                                if (! Sensor[3]) {
                                  if (Sensor[4]) {
                                    Motores((uint8_t)21);
                                    Robo_Perdido = (uint8_t)0;
                                  }
                                  else goto _LAND_6;
                                }
                                else goto _LAND_6;
                              }
                              else goto _LAND_6;
                            }
                            else goto _LAND_6;
                          }
                          else {
                            _LAND_6: ;
                            if (Sensor[0]) {
                              if (! Sensor[1]) {
                                if (! Sensor[2]) {
                                  if (! Sensor[3]) {
                                    if (! Sensor[4]) {
                                      Motores((uint8_t)25);
                                      Robo_Perdido = (uint8_t)0;
                                    }
                                    else goto _LAND_2;
                                  }
                                  else goto _LAND_2;
                                }
                                else goto _LAND_2;
                              }
                              else goto _LAND_2;
                            }
                            else 
                              _LAND_2:
                              if (! Sensor[0]) 
                                if (Sensor[1]) 
                                  if (! Sensor[2]) 
                                    if (Sensor[3]) 
                                      if (! Sensor[4]) {
                                        Motores((uint8_t)20);
                                        Robo_Perdido = (uint8_t)0;
                                      }
                          }
                      }
                  }
            }
  return;
}

void Motores(uint8_t Valid)
{
  if ((int)Pre_Valid != (int)Valid) {
    if (Modo_Gravacao) {
      if (! Modo_Reproducao) goto _LOR; else goto _LAND_1;
    }
    else goto _LAND_1;
  }
  else {
    _LAND_1: ;
    if ((int)Flag_Gravacao == 2) goto _LOR;
    else 
      if ((int)Flag_Gravacao == 3) {
        _LOR:
        {
          Gravar(Pre_Valid);
          Tempo_Gravacao = (uint16_t)0;
          if ((int)Flag_Gravacao == 3) {
            eeprom_update_byte(Movimentos_eeprom,Count2);
            Count = (uint8_t)0;
            while ((int)Count < (int)Count2) {
              eeprom_update_byte(& Movimentos_eeprom[(int)Count + 1],
                                 Gravacao[Count]);
              eeprom_update_word(& Tempo_eeprom[(int)Count + 1],
                                 Gravacao_Tempo[Count]);
              eeprom_update_byte(& Velocidade_eeprom[(int)Count + 1],
                                 Gravacao_Velocidade[Count]);
              Count = (uint8_t)((int)Count + 1);
            }
          }
          Flag_Gravacao = (uint8_t)0;
        }
      }
      else 
        if (! Modo_Gravacao) {
          if (! Modo_Reproducao) Count = (uint8_t)0; else goto _LAND;
        }
        else {
          _LAND: ;
          if (Modo_Gravacao) 
            if (! Timer_Pisca) {
              *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                               0x05 + 0x20)) ^ (
                                                               1 << 0));
              Timer_Pisca = (uint16_t)1500;
            }
        }
  }
  switch ((int)Valid) {
    case 20:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = Velocidade_Default;
    *((uint8_t volatile *)0xB4) = Velocidade_Default;
    break;
    case 21:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     1 << 1));
    *((uint8_t volatile *)0xB3) = (uint8_t)255;
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) | (
                                                     1 << 2));
    if ((int)Velocidade_Default < 245) *((uint8_t volatile *)0xB4) = (uint8_t)(
                                       (int)Velocidade_Default + 10);
    else *((uint8_t volatile *)0xB4) = Velocidade_Default;
    break;
    case 22:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Suave);
    *((uint8_t volatile *)0xB4) = Velocidade_Default;
    break;
    case 23:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Media);
    *((uint8_t volatile *)0xB4) = Velocidade_Default;
    break;
    case 24:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Media_mais);
    *((uint8_t volatile *)0xB4) = Velocidade_Default;
    break;
    case 25:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     1 << 2));
    if ((int)Velocidade_Default < 245) *((uint8_t volatile *)0xB3) = (uint8_t)(
                                       (int)Velocidade_Default + 10);
    else *((uint8_t volatile *)0xB3) = Velocidade_Default;
    *((uint8_t volatile *)0xB4) = (uint8_t)255;
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) | (
                                                     1 << 1));
    break;
    case 28:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = Velocidade_Default;
    *((uint8_t volatile *)0xB4) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Suave);
    break;
    case 26:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = Velocidade_Default;
    *((uint8_t volatile *)0xB4) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Media);
    break;
    case 27:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = Velocidade_Default;
    *((uint8_t volatile *)0xB4) = (uint8_t)((int)Velocidade_Default - (int)Mudanca_Media_mais);
    break;
    case 30: *((uint8_t volatile *)0xB3) = (uint8_t)0;
    *((uint8_t volatile *)0xB4) = (uint8_t)0;
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) | (
                                                     (1 << 2) | (1 << 1)));
    break;
    case 29: *((uint8_t volatile *)0xB3) = (uint8_t)0;
    *((uint8_t volatile *)0xB4) = (uint8_t)0;
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    break;
    case 31: *((uint8_t volatile *)0xB3) = (uint8_t)255;
    *((uint8_t volatile *)0xB4) = (uint8_t)255;
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) | (
                                                     (1 << 2) | (1 << 1)));
    break;
    default:
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     (1 << 2) | (1 << 1)));
    *((uint8_t volatile *)0xB3) = (uint8_t)0;
    *((uint8_t volatile *)0xB4) = (uint8_t)0;
    break;
  }
  Pre_Valid = Valid;
  return;
}

void Modo_Run(void)
{
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) & ~ (
                                                   1 << 0));
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (1 << 2));
  return;
}

void Modo_Stop(void)
{
  Motores((uint8_t)29);
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) ^ (1 << 0));
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) & ~ (
                                                   1 << 2));
  if (! Tempo_Bluetooth) {
    Send_Data((unsigned char)126);
    Tempo_Bluetooth = (uint16_t)20;
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_4(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_5(char const * restrict format);

void Modo_Perdido(void)
{
  Motores((uint8_t)29);
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) & ~ (
                                                   1 << 2));
  lcdCommand((unsigned char)0x01);
  lcd_gotoxy((unsigned char)1,(unsigned char)1);
  printf("ROBO PERDIDO"); /* printf_va_4 */
  lcd_gotoxy((unsigned char)1,(unsigned char)2);
  printf("Coloque na pista"); /* printf_va_5 */
  Flag_Perdido = (uint8_t)1;
  Tempo_Led = (uint16_t)100;
  Send_Data((unsigned char)122);
  _delay_ms((double)2);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_6(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_7(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_8(char const * restrict format);

void Incializa_Manual(void)
{
  Flag_Ciclo = (uint8_t)1;
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (1 << 2));
  *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x05 + 0x20)) & ~ (
                                                   1 << 0));
  lcdCommand((unsigned char)0x01);
  _delay_ms((double)20);
  lcd_gotoxy((unsigned char)1,(unsigned char)1);
  printf("********************"); /* printf_va_6 */
  lcd_gotoxy((unsigned char)5,(unsigned char)2);
  printf("CONECTADO"); /* printf_va_7 */
  lcd_gotoxy((unsigned char)1,(unsigned char)3);
  printf("********************"); /* printf_va_8 */
  return;
}

void Conta_Volta(void)
{
  if (! Sensor[0]) {
    if (Sensor[1]) {
      if (! Sensor[2]) {
        if (Sensor[3]) {
          if (! Sensor[4]) aux = (uint8_t)1; else goto _LAND_3;
        }
        else goto _LAND_3;
      }
      else goto _LAND_3;
    }
    else goto _LAND_3;
  }
  else {
    _LAND_3: ;
    if ((int)aux == 1) {
      if (Sensor[0]) {
        if (Sensor[4]) aux = (uint8_t)2; else goto _LAND;
      }
      else goto _LAND;
    }
    else {
      _LAND: ;
      if ((int)aux == 2) {
        Send_Data((unsigned char)70);
        aux = (uint8_t)0;
        _delay_us((double)700);
        Volta = (uint8_t)((int)Volta + 1);
      }
    }
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param9),
            (indirect: param8), (indirect: param7), (indirect: param6),
            (indirect: param5), (indirect: param4), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param9, param8, param7, param6, param5, param4, param3, param2,
            param1, param0;
 */
int printf_va_9(char const * restrict format, int param0, int param1,
                int param2, int param3, int param4, int param5, int param6,
                int param7, int param8, int param9);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_10(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_11(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_12(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_13(char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_14(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_15(char const * restrict format, char *param0);

void lcd_print_lcd(void)
{
  if ((int)Modo_Robo == 41) {
    if ((int)Flag_Lcd == 0) {
      lcd_gotoxy((unsigned char)1,(unsigned char)1);
      printf("%c%c %d  %d  %d  %d  %d %c%c%c",0b11111111,0b11111111,
             ! Sensor[0],! Sensor[1],! Sensor[2],! Sensor[3],! Sensor[4],
             0b11111111,0b11111111,0b11111111); /* printf_va_9 */
      Flag_Lcd = (uint8_t)1;
    }
    else 
      if ((int)Flag_Lcd == 1) {
        if ((int)Comando == 150) {
          lcd_gotoxy((unsigned char)1,(unsigned char)2);
          printf("RUN       Volta: %d",(int)Volta); /* printf_va_10 */
        }
        else 
          if ((int)Comando == 151) {
            lcd_gotoxy((unsigned char)1,(unsigned char)2);
            printf("STOP"); /* printf_va_11 */
          }
        Flag_Lcd = (uint8_t)2;
      }
      else 
        if ((int)Flag_Lcd == 2) {
          if ((int)Tempo_3s > 0) {
            lcd_gotoxy((unsigned char)1,(unsigned char)3);
            printf("Conect. Bluetooth  "); /* printf_va_12 */
          }
          else 
            if (! Tempo_3s) {
              lcd_gotoxy((unsigned char)1,(unsigned char)3);
              printf("Desc. Bluetooth"); /* printf_va_13 */
            }
          Flag_Lcd = (uint8_t)3;
        }
        else 
          if ((int)Flag_Lcd == 3) {
            lcd_gotoxy((unsigned char)1,(unsigned char)4);
            printf("%s",Battery_Print); /* printf_va_14 */
            Flag_Lcd = (uint8_t)0;
          }
  }
  else 
    if ((int)Modo_Robo == 40) {
      lcd_gotoxy((unsigned char)1,(unsigned char)4);
      printf("%s",Battery_Print); /* printf_va_15 */
    }
  lcdCommand((unsigned char)0x0c);
  return;
}

void Read_Battery(void)
{
  new = read_adc((unsigned char)0);
  if (new != old) {
    old = new;
    V = (unsigned int)((((double)5 * (double)new) * (double)1000) / (double)1024);
    Print_Battery(V);
  }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, *(s + (0 ..));
    assigns \result \from (indirect: *(format + (0 ..))), (indirect: param0);
    assigns *(s + (0 ..)) \from (indirect: *(format + (0 ..))), param0;
 */
int sprintf_va_1(char * restrict s, char const * restrict format, int param0);

void Print_Battery(unsigned int V_0)
{
  uint8_t i;
  if (V_0 >= (unsigned int)4600) Battery_Level = (uint8_t)10;
  else 
    if (V_0 >= (unsigned int)4500) Battery_Level = (uint8_t)9;
    else 
      if (V_0 >= (unsigned int)4400) Battery_Level = (uint8_t)8;
      else 
        if (V_0 >= (unsigned int)4300) Battery_Level = (uint8_t)7;
        else 
          if (V_0 >= (unsigned int)4100) Battery_Level = (uint8_t)6;
          else 
            if (V_0 >= (unsigned int)3900) Battery_Level = (uint8_t)5;
            else 
              if (V_0 >= (unsigned int)3700) Battery_Level = (uint8_t)4;
              else 
                if (V_0 >= (unsigned int)3500) Battery_Level = (uint8_t)3;
                else 
                  if (V_0 >= (unsigned int)3300) Battery_Level = (uint8_t)2;
                  else 
                    if (V_0 >= (unsigned int)3100) Battery_Level = (uint8_t)1;
                    else Battery_Level = (uint8_t)0;
  i = (uint8_t)0;
  while ((int)i < 10) {
    if ((int)i < (int)Battery_Level) Battery_Print[i] = (char)0b11111111;
    else Battery_Print[i] = (char)' ';
    i = (uint8_t)((int)i + 1);
  }
  sprintf(& Battery_Print[10],"%d",(int)Battery_Level * 10); /* sprintf_va_1 */
  if ((int)Battery_Level * 10 < 1) {
    Battery_Print[11] = (char)'%';
    i = (uint8_t)12;
    while ((int)i < 20) {
      Battery_Print[i] = (char)' ';
      i = (uint8_t)((int)i + 1);
    }
  }
  else 
    if ((int)Battery_Level * 10 < 100) {
      Battery_Print[12] = (char)'%';
      i = (uint8_t)13;
      while ((int)i < 20) {
        Battery_Print[i] = (char)' ';
        i = (uint8_t)((int)i + 1);
      }
    }
    else 
      if ((int)Battery_Level * 10 == 100) {
        Battery_Print[13] = (char)'%';
        i = (uint8_t)14;
        while ((int)i < 20) {
          Battery_Print[i] = (char)' ';
          i = (uint8_t)((int)i + 1);
        }
      }
  return;
}

void Send_To_Bluetooth(void)
{
  if (! Sensor[0]) {
    if (! Tempo_Bluetooth) {
      if ((int)Flag_Bluetooth == 1) {
        Send_Data((unsigned char)1);
        Tempo_Bluetooth = (uint16_t)20;
        Flag_Bluetooth = (uint8_t)2;
      }
      else goto _LAND_0;
    }
    else goto _LAND_0;
  }
  else {
    _LAND_0: ;
    if (Sensor[0]) 
      if (! Tempo_Bluetooth) 
        if ((int)Flag_Bluetooth == 1) {
          Send_Data((unsigned char)11);
          Tempo_Bluetooth = (uint16_t)20;
          Flag_Bluetooth = (uint8_t)2;
        }
  }
  if (! Sensor[1]) {
    if (! Tempo_Bluetooth) {
      if ((int)Flag_Bluetooth == 2) {
        Send_Data((unsigned char)2);
        Tempo_Bluetooth = (uint16_t)20;
        Flag_Bluetooth = (uint8_t)3;
      }
      else goto _LAND_2;
    }
    else goto _LAND_2;
  }
  else {
    _LAND_2: ;
    if (Sensor[1]) 
      if (! Tempo_Bluetooth) 
        if ((int)Flag_Bluetooth == 2) {
          Send_Data((unsigned char)12);
          Tempo_Bluetooth = (uint16_t)20;
          Flag_Bluetooth = (uint8_t)3;
        }
  }
  if (! Sensor[2]) {
    if (! Tempo_Bluetooth) {
      if ((int)Flag_Bluetooth == 3) {
        Send_Data((unsigned char)3);
        Tempo_Bluetooth = (uint16_t)20;
        Flag_Bluetooth = (uint8_t)4;
      }
      else goto _LAND_4;
    }
    else goto _LAND_4;
  }
  else {
    _LAND_4: ;
    if (Sensor[2]) 
      if (! Tempo_Bluetooth) 
        if ((int)Flag_Bluetooth == 3) {
          Send_Data((unsigned char)13);
          Tempo_Bluetooth = (uint16_t)20;
          Flag_Bluetooth = (uint8_t)4;
        }
  }
  if (! Sensor[3]) {
    if (! Tempo_Bluetooth) {
      if ((int)Flag_Bluetooth == 4) {
        Send_Data((unsigned char)4);
        Tempo_Bluetooth = (uint16_t)20;
        Flag_Bluetooth = (uint8_t)5;
      }
      else goto _LAND_6;
    }
    else goto _LAND_6;
  }
  else {
    _LAND_6: ;
    if (Sensor[3]) 
      if (! Tempo_Bluetooth) 
        if ((int)Flag_Bluetooth == 4) {
          Send_Data((unsigned char)14);
          Tempo_Bluetooth = (uint16_t)20;
          Flag_Bluetooth = (uint8_t)5;
        }
  }
  if (! Sensor[4]) {
    if (! Tempo_Bluetooth) {
      if ((int)Flag_Bluetooth == 5) {
        Send_Data((unsigned char)5);
        Tempo_Bluetooth = (uint16_t)20;
        if ((int)Comando == 150) Flag_Bluetooth = (uint8_t)6;
        else Flag_Bluetooth = (uint8_t)1;
      }
      else goto _LAND_8;
    }
    else goto _LAND_8;
  }
  else {
    _LAND_8: ;
    if (Sensor[4]) 
      if (! Tempo_Bluetooth) 
        if ((int)Flag_Bluetooth == 5) {
          Send_Data((unsigned char)15);
          Tempo_Bluetooth = (uint16_t)20;
          if ((int)Comando == 150) Flag_Bluetooth = (uint8_t)6;
          else Flag_Bluetooth = (uint8_t)1;
        }
  }
  if ((int)Comando == 150) 
    if ((int)Flag_Bluetooth == 6) {
      Send_Data((unsigned char)125);
      Flag_Bluetooth = (uint8_t)1;
      Tempo_Bluetooth = (uint16_t)20;
    }
  return;
}

void Send_Battery_Bluetooth(void)
{
  if ((int)Battery_Level == 10) Send_Data((unsigned char)30);
  else 
    if ((int)Battery_Level == 9) Send_Data((unsigned char)29);
    else 
      if ((int)Battery_Level == 8) Send_Data((unsigned char)28);
      else 
        if ((int)Battery_Level == 7) Send_Data((unsigned char)27);
        else 
          if ((int)Battery_Level == 6) Send_Data((unsigned char)26);
          else 
            if ((int)Battery_Level == 5) Send_Data((unsigned char)25);
            else 
              if ((int)Battery_Level == 4) Send_Data((unsigned char)24);
              else 
                if ((int)Battery_Level == 3) Send_Data((unsigned char)23);
                else 
                  if ((int)Battery_Level == 2) Send_Data((unsigned char)22);
                  else 
                    if ((int)Battery_Level == 1) Send_Data((unsigned char)21);
                    else 
                      if ((int)Battery_Level == 0) Send_Data((unsigned char)20);
  _delay_us((double)500);
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_16(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_17(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_18(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_19(char const * restrict format);

void Bateria_Fraca(void)
{
  if (! Flag_Bateria_Fraca) {
    lcd_gotoxy((unsigned char)1,(unsigned char)1);
    printf("********************"); /* printf_va_16 */
    lcd_gotoxy((unsigned char)1,(unsigned char)2);
    printf("POUCA BATERIA      "); /* printf_va_17 */
    lcd_gotoxy((unsigned char)1,(unsigned char)3);
    printf("********************"); /* printf_va_18 */
    lcd_gotoxy((unsigned char)1,(unsigned char)4);
    printf("Mude de pilhas"); /* printf_va_19 */
    Motores((uint8_t)29);
    Flag_Bateria_Fraca = (uint8_t)1;
    *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x0B + 0x20)) & ~ (
                                                     1 << 2));
    *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                     0x05 + 0x20)) & ~ (
                                                     1 << 0));
    lcdCommand((unsigned char)0x0c);
  }
  else 
    if (! Timer_Pisca) {
      *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                       0x0B + 0x20)) ^ (
                                                       1 << 2));
      *((uint8_t volatile *)(0x05 + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                       0x05 + 0x20)) ^ (
                                                       1 << 0));
      Timer_Pisca = (uint16_t)700;
    }
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_20(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_21(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_22(char const * restrict format);

void Competicao(void)
{
  lcd_gotoxy((unsigned char)1,(unsigned char)1);
  printf("********************"); /* printf_va_20 */
  lcd_gotoxy((unsigned char)1,(unsigned char)2);
  printf("**MODO COMPETICAO***"); /* printf_va_21 */
  lcd_gotoxy((unsigned char)1,(unsigned char)3);
  printf("********************"); /* printf_va_22 */
  *((uint8_t volatile *)(0x0B + 0x20)) = (uint8_t)((int)*((uint8_t volatile *)(
                                                   0x0B + 0x20)) | (1 << 2));
  lcdCommand((unsigned char)0x0c);
  return;
}

void Gravar(uint8_t Mudanca)
{
  if ((int)Count < 200) {
    Gravacao[Count] = Mudanca;
    Gravacao_Tempo[Count] = Tempo_Gravacao;
    Gravacao_Velocidade[Count] = Velocidade_Default;
    Count2 = (uint8_t)((int)Count2 + 1);
    Count = (uint8_t)((int)Count + 1);
  }
  return;
}

void Reproduzir(void)
{
  if ((int)Count < (int)Count2) {
    Velocidade_Default = Gravacao_Velocidade[Count];
    Motores(Gravacao[Count]);
    Tempo_Gravacao_Menos = Gravacao_Tempo[Count];
    Count = (uint8_t)((int)Count + 1);
  }
  else Flag_Reproducao = (uint8_t)1;
  return;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_23(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_24(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_25(char const * restrict format);

void Init_Reproducao(void)
{
  Count2 = eeprom_read_byte((uint8_t const *)(Movimentos_eeprom));
  Count = (uint8_t)0;
  while ((int)Count < (int)Count2) {
    Gravacao[Count] = eeprom_read_byte((uint8_t const *)(& Movimentos_eeprom[
                                       (int)Count + 1]));
    Gravacao_Tempo[Count] = eeprom_read_word((uint16_t const *)(& Tempo_eeprom[
                                             (int)Count + 1]));
    Gravacao_Velocidade[Count] = eeprom_read_byte((uint8_t const *)(& Velocidade_eeprom[
                                                  (int)Count + 1]));
    Count = (uint8_t)((int)Count + 1);
  }
  Count = (uint8_t)0;
  Tempo_Gravacao_Menos = Gravacao_Tempo[Count];
  Velocidade_Default = Gravacao_Velocidade[Count];
  Motores(Gravacao[Count]);
  lcd_gotoxy((unsigned char)1,(unsigned char)1);
  printf("********************"); /* printf_va_23 */
  lcd_gotoxy((unsigned char)1,(unsigned char)2);
  printf("****A REPRODUZIR****"); /* printf_va_24 */
  lcd_gotoxy((unsigned char)1,(unsigned char)3);
  printf("********************"); /* printf_va_25 */
  return;
}

uint8_t eeprom_read_byte(uint8_t const *__p) __attribute__((__pure__));
uint8_t eeprom_read_byte(uint8_t const *__p)
{
  uint8_t __retres;
  __retres = *__p;
  return __retres;
}

void eeprom_update_byte(uint8_t *__p, uint8_t __value)
{
  *__p = __value;
  return;
}

uint16_t eeprom_read_word(uint16_t const *__p) __attribute__((__pure__));
uint16_t eeprom_read_word(uint16_t const *__p)
{
  uint16_t __retres;
  __retres = *__p;
  return __retres;
}

void eeprom_update_word(uint16_t *__p, uint16_t __value)
{
  *__p = __value;
  return;
}

void __builtin_avr_delay_cycles(unsigned long __n)
{
  return;
}


