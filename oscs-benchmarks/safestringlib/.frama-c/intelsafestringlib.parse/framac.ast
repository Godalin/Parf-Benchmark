/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "ctype.h"
#include "errno.h"
#include "inttypes.h"
#include "signal.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
#include "sys/types.h"
#include "time.h"
#include "wchar.h"
typedef int errno_t;
typedef size_t rsize_t;
typedef void (*constraint_handler_t)(char const *, void *, errno_t );
void abort_handler_s(char const *msg, void *ptr, errno_t error);

void ignore_handler_s(char const *msg, void *ptr, errno_t error);

constraint_handler_t set_mem_constraint_handler_s(void (*handler)(char const *,
                                                                  void *,
                                                                  errno_t ));

errno_t memcmp_s(void const *dest_0, rsize_t dmax, void const *src,
                 rsize_t smax, int *diff);

errno_t memcmp16_s(uint16_t const *dest_0, rsize_t dmax, uint16_t const *src,
                   rsize_t smax, int *diff);

errno_t memcmp32_s(uint32_t const *dest_0, rsize_t dmax, uint32_t const *src,
                   rsize_t smax, int *diff);

errno_t wmemcmp_s(wchar_t const *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t smax, int *diff);

errno_t memcpy_s(void *dest_0, rsize_t dmax, void const *src, rsize_t smax);

errno_t memcpy16_s(uint16_t *dest_0, rsize_t dmax, uint16_t const *src,
                   rsize_t smax);

errno_t memcpy32_s(uint32_t *dest_0, rsize_t dmax, uint32_t const *src,
                   rsize_t smax);

errno_t wmemcpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t smax);

errno_t memmove_s(void *dest_0, rsize_t dmax, void const *src, rsize_t smax);

errno_t memmove16_s(uint16_t *dest_0, rsize_t dmax, uint16_t const *src,
                    rsize_t smax);

errno_t memmove32_s(uint32_t *dest_0, rsize_t dmax, uint32_t const *src,
                    rsize_t smax);

errno_t wmemmove_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                   rsize_t smax);

errno_t memset_s(void *dest_0, rsize_t len, uint8_t value);

errno_t memset16_s(uint16_t *dest_0, rsize_t len, uint16_t value);

errno_t memset32_s(uint32_t *dest_0, rsize_t len, uint32_t value);

errno_t wmemset_s(wchar_t *dest_0, wchar_t value, rsize_t len);

errno_t memzero_s(void *dest_0, rsize_t len);

errno_t memzero16_s(uint16_t *dest_0, rsize_t len);

errno_t memzero32_s(uint32_t *dest_0, rsize_t len);

constraint_handler_t set_str_constraint_handler_s(void (*handler)(char const *,
                                                                  void *,
                                                                  errno_t ));

errno_t strcasecmp_s(char const *dest_0, rsize_t dmax, char const *src,
                     int *indicator);

errno_t strcasestr_s(char *dest_0, rsize_t dmax, char const *src,
                     rsize_t slen, char **substring);

errno_t strcat_s(char *dest_0, rsize_t dmax, char const *src);

errno_t strcmp_s(char const *dest_0, rsize_t dmax, char const *src,
                 int *indicator);

errno_t strcmpfld_s(char const *dest_0, rsize_t dmax, char const *src,
                    int *indicator);

errno_t strcpy_s(char *dest_0, rsize_t dmax, char const *src);

char *stpcpy_s(char *dest_0, rsize_t dmax, char const *src, errno_t *err);

char *stpncpy_s(char *dest_0, rsize_t dmax, char const *src, rsize_t smax,
                errno_t *err);

errno_t strcpyfld_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen);

errno_t strcpyfldin_s(char *dest_0, rsize_t dmax, char const *src,
                      rsize_t slen);

errno_t strcpyfldout_s(char *dest_0, rsize_t dmax, char const *src,
                       rsize_t slen);

errno_t strcspn_s(char const *dest_0, rsize_t dmax, char const *src,
                  rsize_t slen, rsize_t *count);

errno_t strfirstchar_s(char *dest_0, rsize_t dmax, char c, char **first);

errno_t strfirstdiff_s(char const *dest_0, rsize_t dmax, char const *src,
                       rsize_t *index_0);

_Bool strisalphanumeric_s(char const *dest_0, rsize_t dmax);

_Bool strisascii_s(char const *dest_0, rsize_t dmax);

_Bool strisdigit_s(char const *dest_0, rsize_t dmax);

_Bool strishex_s(char const *dest_0, rsize_t dmax);

_Bool strislowercase_s(char const *dest_0, rsize_t dmax);

_Bool strismixedcase_s(char const *dest_0, rsize_t dmax);

_Bool strispassword_s(char const *dest_0, rsize_t dmax);

_Bool strisuppercase_s(char const *dest_0, rsize_t dmax);

errno_t strlastchar_s(char *dest_0, rsize_t dmax, char c, char **last);

errno_t strlastdiff_s(char const *dest_0, rsize_t dmax, char const *src,
                      rsize_t *index_0);

errno_t strljustify_s(char *dest_0, rsize_t dmax);

errno_t strncat_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen);

errno_t strncpy_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen);

rsize_t strnlen_s(char const *dest_0, rsize_t dmax);

rsize_t strnterminate_s(char *dest_0, rsize_t dmax);

errno_t strpbrk_s(char *dest_0, rsize_t dmax, char *src, rsize_t slen,
                  char **first);

errno_t strfirstsame_s(char const *dest_0, rsize_t dmax, char const *src,
                       rsize_t *index_0);

errno_t strlastsame_s(char const *dest_0, rsize_t dmax, char const *src,
                      rsize_t *index_0);

errno_t strprefix_s(char const *dest_0, rsize_t dmax, char const *src);

errno_t strremovews_s(char *dest_0, rsize_t dmax);

errno_t strspn_s(char const *dest_0, rsize_t dmax, char const *src,
                 rsize_t slen, rsize_t *count);

errno_t strstr_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen,
                 char **substring);

char *strtok_s(char *dest_0, rsize_t *dmax, char const *src, char **ptr);

errno_t strtolowercase_s(char *dest_0, rsize_t dmax);

errno_t strtouppercase_s(char *dest_0, rsize_t dmax);

errno_t strzero_s(char *dest_0, rsize_t dmax);

wchar_t *wcpcpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  errno_t *err);

errno_t wcscat_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src);

errno_t wcsncat_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t slen);

errno_t wcscpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src);

errno_t wcsncpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t slen);

rsize_t wcsnlen_s(wchar_t const *dest_0, rsize_t dmax);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)), param0;
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 unsigned int param0, char *param1);

void abort_handler_s(char const *msg, void *ptr, errno_t error)
{
  char const *tmp;
  if (msg) tmp = msg; else tmp = "Null message";
  ;
  ;
  fprintf(__fc_stderr,"ABORT CONSTRAINT HANDLER: (%u) %s\n",
          (unsigned int)error,(char *)tmp); /* fprintf_va_1 */
  abort();
  return;
}

void ignore_handler_s(char const *msg, void *ptr, errno_t error)
{
  return;
}

void mem_prim_move(void *dest_0, void const *src, uint32_t len);

void mem_prim_move8(uint8_t *dp, uint8_t const *sp, uint32_t len);

void mem_prim_move16(uint16_t *dp, uint16_t const *sp, uint32_t len);

void mem_prim_move32(uint32_t *dp, uint32_t const *sp, uint32_t len);

void mem_prim_set(void *dest_0, uint32_t len, uint8_t value);

void mem_prim_set16(uint16_t *dp, uint32_t len, uint16_t value);

void mem_prim_set32(uint32_t *dp, uint32_t len, uint32_t value);

void mem_prim_set(void *dest_0, uint32_t len, uint8_t value)
{
  uint8_t *dp;
  uint32_t count;
  uint32_t lcount;
  uint32_t *lp;
  uint32_t value32;
  count = len;
  dp = (uint8_t *)dest_0;
  value32 = (uint32_t)((((int)value | ((int)value << 8)) | ((int)value << 16)) | (
                       (int)value << 24));
  while (1) {
    if (count) {
      if (! ((uintptr_t)dp & (sizeof(uint32_t) - (unsigned int)1))) break;
    }
    else break;
    {
      uint8_t *tmp;
      tmp = dp;
      dp ++;
      *tmp = value;
    }
    count --;
  }
  lp = (uint32_t *)dp;
  lcount = count >> 2;
  while (lcount != (uint32_t)0) 
    switch (lcount) {
      uint32_t *tmp_0;
      uint32_t *tmp_1;
      uint32_t *tmp_2;
      uint32_t *tmp_3;
      uint32_t *tmp_4;
      uint32_t *tmp_5;
      uint32_t *tmp_6;
      uint32_t *tmp_7;
      uint32_t *tmp_8;
      uint32_t *tmp_9;
      uint32_t *tmp_10;
      uint32_t *tmp_11;
      uint32_t *tmp_12;
      uint32_t *tmp_13;
      uint32_t *tmp_14;
      uint32_t *tmp_15;
      uint32_t *tmp_16;
      uint32_t *tmp_17;
      uint32_t *tmp_18;
      uint32_t *tmp_19;
      uint32_t *tmp_20;
      uint32_t *tmp_21;
      uint32_t *tmp_22;
      uint32_t *tmp_23;
      uint32_t *tmp_24;
      uint32_t *tmp_25;
      uint32_t *tmp_26;
      uint32_t *tmp_27;
      uint32_t *tmp_28;
      uint32_t *tmp_29;
      uint32_t *tmp_30;
      default: { /* sequence */
                 tmp_0 = lp;
                 lp ++;
                 *tmp_0 = value32;
               }
      tmp_1 = lp;
      lp ++;
      *tmp_1 = value32;
      tmp_2 = lp;
      lp ++;
      *tmp_2 = value32;
      tmp_3 = lp;
      lp ++;
      *tmp_3 = value32;
      tmp_4 = lp;
      lp ++;
      *tmp_4 = value32;
      tmp_5 = lp;
      lp ++;
      *tmp_5 = value32;
      tmp_6 = lp;
      lp ++;
      *tmp_6 = value32;
      tmp_7 = lp;
      lp ++;
      *tmp_7 = value32;
      tmp_8 = lp;
      lp ++;
      *tmp_8 = value32;
      tmp_9 = lp;
      lp ++;
      *tmp_9 = value32;
      tmp_10 = lp;
      lp ++;
      *tmp_10 = value32;
      tmp_11 = lp;
      lp ++;
      *tmp_11 = value32;
      tmp_12 = lp;
      lp ++;
      *tmp_12 = value32;
      tmp_13 = lp;
      lp ++;
      *tmp_13 = value32;
      tmp_14 = lp;
      lp ++;
      *tmp_14 = value32;
      tmp_15 = lp;
      lp ++;
      *tmp_15 = value32;
      lcount -= (uint32_t)16;
      break;
      case (uint32_t)15:
      { /* sequence */
        tmp_16 = lp;
        lp ++;
        *tmp_16 = value32;
      }
      case (uint32_t)14:
      { /* sequence */
        tmp_17 = lp;
        lp ++;
        *tmp_17 = value32;
      }
      case (uint32_t)13:
      { /* sequence */
        tmp_18 = lp;
        lp ++;
        *tmp_18 = value32;
      }
      case (uint32_t)12:
      { /* sequence */
        tmp_19 = lp;
        lp ++;
        *tmp_19 = value32;
      }
      case (uint32_t)11:
      { /* sequence */
        tmp_20 = lp;
        lp ++;
        *tmp_20 = value32;
      }
      case (uint32_t)10:
      { /* sequence */
        tmp_21 = lp;
        lp ++;
        *tmp_21 = value32;
      }
      case (uint32_t)9:
      { /* sequence */
        tmp_22 = lp;
        lp ++;
        *tmp_22 = value32;
      }
      case (uint32_t)8:
      { /* sequence */
        tmp_23 = lp;
        lp ++;
        *tmp_23 = value32;
      }
      case (uint32_t)7:
      { /* sequence */
        tmp_24 = lp;
        lp ++;
        *tmp_24 = value32;
      }
      case (uint32_t)6:
      { /* sequence */
        tmp_25 = lp;
        lp ++;
        *tmp_25 = value32;
      }
      case (uint32_t)5:
      { /* sequence */
        tmp_26 = lp;
        lp ++;
        *tmp_26 = value32;
      }
      case (uint32_t)4:
      { /* sequence */
        tmp_27 = lp;
        lp ++;
        *tmp_27 = value32;
      }
      case (uint32_t)3:
      { /* sequence */
        tmp_28 = lp;
        lp ++;
        *tmp_28 = value32;
      }
      case (uint32_t)2:
      { /* sequence */
        tmp_29 = lp;
        lp ++;
        *tmp_29 = value32;
      }
      case (uint32_t)1:
      { /* sequence */
        tmp_30 = lp;
        lp ++;
        *tmp_30 = value32;
      }
      lcount = (uint32_t)0;
      break;
    }
  dp = (uint8_t *)lp;
  count &= sizeof(uint32_t) - (unsigned int)1;
  while (count) {
    *dp = value;
    dp ++;
    count --;
  }
  return;
}

void mem_prim_set16(uint16_t *dp, uint32_t len, uint16_t value)
{
  while (len != (uint32_t)0) 
    switch (len) {
      uint16_t *tmp;
      uint16_t *tmp_0;
      uint16_t *tmp_1;
      uint16_t *tmp_2;
      uint16_t *tmp_3;
      uint16_t *tmp_4;
      uint16_t *tmp_5;
      uint16_t *tmp_6;
      uint16_t *tmp_7;
      uint16_t *tmp_8;
      uint16_t *tmp_9;
      uint16_t *tmp_10;
      uint16_t *tmp_11;
      uint16_t *tmp_12;
      uint16_t *tmp_13;
      uint16_t *tmp_14;
      uint16_t *tmp_15;
      uint16_t *tmp_16;
      uint16_t *tmp_17;
      uint16_t *tmp_18;
      uint16_t *tmp_19;
      uint16_t *tmp_20;
      uint16_t *tmp_21;
      uint16_t *tmp_22;
      uint16_t *tmp_23;
      uint16_t *tmp_24;
      uint16_t *tmp_25;
      uint16_t *tmp_26;
      uint16_t *tmp_27;
      uint16_t *tmp_28;
      uint16_t *tmp_29;
      default: { /* sequence */
                 tmp = dp;
                 dp ++;
                 *tmp = value;
               }
      tmp_0 = dp;
      dp ++;
      *tmp_0 = value;
      tmp_1 = dp;
      dp ++;
      *tmp_1 = value;
      tmp_2 = dp;
      dp ++;
      *tmp_2 = value;
      tmp_3 = dp;
      dp ++;
      *tmp_3 = value;
      tmp_4 = dp;
      dp ++;
      *tmp_4 = value;
      tmp_5 = dp;
      dp ++;
      *tmp_5 = value;
      tmp_6 = dp;
      dp ++;
      *tmp_6 = value;
      tmp_7 = dp;
      dp ++;
      *tmp_7 = value;
      tmp_8 = dp;
      dp ++;
      *tmp_8 = value;
      tmp_9 = dp;
      dp ++;
      *tmp_9 = value;
      tmp_10 = dp;
      dp ++;
      *tmp_10 = value;
      tmp_11 = dp;
      dp ++;
      *tmp_11 = value;
      tmp_12 = dp;
      dp ++;
      *tmp_12 = value;
      tmp_13 = dp;
      dp ++;
      *tmp_13 = value;
      tmp_14 = dp;
      dp ++;
      *tmp_14 = value;
      len -= (uint32_t)16;
      break;
      case (uint32_t)15:
      { /* sequence */
        tmp_15 = dp;
        dp ++;
        *tmp_15 = value;
      }
      case (uint32_t)14:
      { /* sequence */
        tmp_16 = dp;
        dp ++;
        *tmp_16 = value;
      }
      case (uint32_t)13:
      { /* sequence */
        tmp_17 = dp;
        dp ++;
        *tmp_17 = value;
      }
      case (uint32_t)12:
      { /* sequence */
        tmp_18 = dp;
        dp ++;
        *tmp_18 = value;
      }
      case (uint32_t)11:
      { /* sequence */
        tmp_19 = dp;
        dp ++;
        *tmp_19 = value;
      }
      case (uint32_t)10:
      { /* sequence */
        tmp_20 = dp;
        dp ++;
        *tmp_20 = value;
      }
      case (uint32_t)9:
      { /* sequence */
        tmp_21 = dp;
        dp ++;
        *tmp_21 = value;
      }
      case (uint32_t)8:
      { /* sequence */
        tmp_22 = dp;
        dp ++;
        *tmp_22 = value;
      }
      case (uint32_t)7:
      { /* sequence */
        tmp_23 = dp;
        dp ++;
        *tmp_23 = value;
      }
      case (uint32_t)6:
      { /* sequence */
        tmp_24 = dp;
        dp ++;
        *tmp_24 = value;
      }
      case (uint32_t)5:
      { /* sequence */
        tmp_25 = dp;
        dp ++;
        *tmp_25 = value;
      }
      case (uint32_t)4:
      { /* sequence */
        tmp_26 = dp;
        dp ++;
        *tmp_26 = value;
      }
      case (uint32_t)3:
      { /* sequence */
        tmp_27 = dp;
        dp ++;
        *tmp_27 = value;
      }
      case (uint32_t)2:
      { /* sequence */
        tmp_28 = dp;
        dp ++;
        *tmp_28 = value;
      }
      case (uint32_t)1:
      { /* sequence */
        tmp_29 = dp;
        dp ++;
        *tmp_29 = value;
      }
      len = (uint32_t)0;
      break;
    }
  return;
}

void mem_prim_set32(uint32_t *dp, uint32_t len, uint32_t value)
{
  while (len != (uint32_t)0) 
    switch (len) {
      uint32_t *tmp;
      uint32_t *tmp_0;
      uint32_t *tmp_1;
      uint32_t *tmp_2;
      uint32_t *tmp_3;
      uint32_t *tmp_4;
      uint32_t *tmp_5;
      uint32_t *tmp_6;
      uint32_t *tmp_7;
      uint32_t *tmp_8;
      uint32_t *tmp_9;
      uint32_t *tmp_10;
      uint32_t *tmp_11;
      uint32_t *tmp_12;
      uint32_t *tmp_13;
      uint32_t *tmp_14;
      uint32_t *tmp_15;
      uint32_t *tmp_16;
      uint32_t *tmp_17;
      uint32_t *tmp_18;
      uint32_t *tmp_19;
      uint32_t *tmp_20;
      uint32_t *tmp_21;
      uint32_t *tmp_22;
      uint32_t *tmp_23;
      uint32_t *tmp_24;
      uint32_t *tmp_25;
      uint32_t *tmp_26;
      uint32_t *tmp_27;
      uint32_t *tmp_28;
      uint32_t *tmp_29;
      default: { /* sequence */
                 tmp = dp;
                 dp ++;
                 *tmp = value;
               }
      tmp_0 = dp;
      dp ++;
      *tmp_0 = value;
      tmp_1 = dp;
      dp ++;
      *tmp_1 = value;
      tmp_2 = dp;
      dp ++;
      *tmp_2 = value;
      tmp_3 = dp;
      dp ++;
      *tmp_3 = value;
      tmp_4 = dp;
      dp ++;
      *tmp_4 = value;
      tmp_5 = dp;
      dp ++;
      *tmp_5 = value;
      tmp_6 = dp;
      dp ++;
      *tmp_6 = value;
      tmp_7 = dp;
      dp ++;
      *tmp_7 = value;
      tmp_8 = dp;
      dp ++;
      *tmp_8 = value;
      tmp_9 = dp;
      dp ++;
      *tmp_9 = value;
      tmp_10 = dp;
      dp ++;
      *tmp_10 = value;
      tmp_11 = dp;
      dp ++;
      *tmp_11 = value;
      tmp_12 = dp;
      dp ++;
      *tmp_12 = value;
      tmp_13 = dp;
      dp ++;
      *tmp_13 = value;
      tmp_14 = dp;
      dp ++;
      *tmp_14 = value;
      len -= (uint32_t)16;
      break;
      case (uint32_t)15:
      { /* sequence */
        tmp_15 = dp;
        dp ++;
        *tmp_15 = value;
      }
      case (uint32_t)14:
      { /* sequence */
        tmp_16 = dp;
        dp ++;
        *tmp_16 = value;
      }
      case (uint32_t)13:
      { /* sequence */
        tmp_17 = dp;
        dp ++;
        *tmp_17 = value;
      }
      case (uint32_t)12:
      { /* sequence */
        tmp_18 = dp;
        dp ++;
        *tmp_18 = value;
      }
      case (uint32_t)11:
      { /* sequence */
        tmp_19 = dp;
        dp ++;
        *tmp_19 = value;
      }
      case (uint32_t)10:
      { /* sequence */
        tmp_20 = dp;
        dp ++;
        *tmp_20 = value;
      }
      case (uint32_t)9:
      { /* sequence */
        tmp_21 = dp;
        dp ++;
        *tmp_21 = value;
      }
      case (uint32_t)8:
      { /* sequence */
        tmp_22 = dp;
        dp ++;
        *tmp_22 = value;
      }
      case (uint32_t)7:
      { /* sequence */
        tmp_23 = dp;
        dp ++;
        *tmp_23 = value;
      }
      case (uint32_t)6:
      { /* sequence */
        tmp_24 = dp;
        dp ++;
        *tmp_24 = value;
      }
      case (uint32_t)5:
      { /* sequence */
        tmp_25 = dp;
        dp ++;
        *tmp_25 = value;
      }
      case (uint32_t)4:
      { /* sequence */
        tmp_26 = dp;
        dp ++;
        *tmp_26 = value;
      }
      case (uint32_t)3:
      { /* sequence */
        tmp_27 = dp;
        dp ++;
        *tmp_27 = value;
      }
      case (uint32_t)2:
      { /* sequence */
        tmp_28 = dp;
        dp ++;
        *tmp_28 = value;
      }
      case (uint32_t)1:
      { /* sequence */
        tmp_29 = dp;
        dp ++;
        *tmp_29 = value;
      }
      len = (uint32_t)0;
      break;
    }
  return;
}

void mem_prim_move(void *dest_0, void const *src, uint32_t len)
{
  uint32_t tsp;
  uint8_t *dp = (uint8_t *)dest_0;
  uint8_t const *sp = (uint8_t const *)src;
  if ((uintptr_t)dp < (uintptr_t)sp) {
    tsp = (uintptr_t)sp;
    if ((tsp | (uintptr_t)dp) & (sizeof(uint32_t) - (unsigned int)1)) {
      if ((tsp ^ (uintptr_t)dp) & (sizeof(uint32_t) - (unsigned int)1)) 
        goto _LOR;
      else 
        if (len < sizeof(uint32_t)) _LOR: tsp = len;
        else {
          int tmp;
          tmp = Frama_C_interval(0,3);
          tsp = sizeof(uint32_t) - (unsigned int)tmp;
        }
      len -= tsp;
      while (1) {
        {
          uint8_t *tmp_0;
          uint8_t const *tmp_1;
          tmp_0 = dp;
          dp ++;
          tmp_1 = sp;
          sp ++;
          *tmp_0 = *tmp_1;
        }
        tsp --;
        if (! tsp) break;
      }
    }
    tsp = len / sizeof(uint32_t);
    if (tsp > (uint32_t)0) 
      while (1) {
        *((uint32_t *)dp) = *((uint32_t *)sp);
        sp += sizeof(uint32_t);
        dp += sizeof(uint32_t);
        tsp --;
        if (! tsp) break;
      }
    tsp = len & (sizeof(uint32_t) - (unsigned int)1);
    if (tsp > (uint32_t)0) 
      while (1) {
        {
          uint8_t *tmp_2;
          uint8_t const *tmp_3;
          tmp_2 = dp;
          dp ++;
          tmp_3 = sp;
          sp ++;
          *tmp_2 = *tmp_3;
        }
        tsp --;
        if (! tsp) break;
      }
  }
  else {
    sp += len;
    dp += len;
    tsp = (uintptr_t)sp;
    if ((tsp | (uintptr_t)dp) & (sizeof(uint32_t) - (unsigned int)1)) {
      if ((tsp ^ (uintptr_t)dp) & (sizeof(uint32_t) - (unsigned int)1)) 
        goto _LOR_0;
      else 
        if (len <= sizeof(uint32_t)) _LOR_0: tsp = len;
        else {
          int tmp_4;
          tmp_4 = Frama_C_interval(0,3);
          tsp = (uint32_t)tmp_4;
        }
      len -= tsp;
      while (1) {
        dp --;
        sp --;
        *dp = *sp;
        tsp --;
        if (! tsp) break;
      }
    }
    tsp = len / sizeof(uint32_t);
    if (tsp > (uint32_t)0) 
      while (1) {
        sp -= sizeof(uint32_t);
        dp -= sizeof(uint32_t);
        *((uint32_t *)dp) = *((uint32_t *)sp);
        tsp --;
        if (! tsp) break;
      }
    tsp = len & (sizeof(uint32_t) - (unsigned int)1);
    if (tsp > (uint32_t)0) {
      tsp = len & (sizeof(uint32_t) - (unsigned int)1);
      while (1) {
        dp --;
        sp --;
        *dp = *sp;
        tsp --;
        if (! tsp) break;
      }
    }
  }
  return;
}

void mem_prim_move8(uint8_t *dp, uint8_t const *sp, uint32_t len)
{
  if ((void *)dp < (void *)sp) 
    while (len != (uint32_t)0) 
      switch (len) {
        uint8_t *tmp;
        uint8_t const *tmp_0;
        uint8_t *tmp_1;
        uint8_t const *tmp_2;
        uint8_t *tmp_3;
        uint8_t const *tmp_4;
        uint8_t *tmp_5;
        uint8_t const *tmp_6;
        uint8_t *tmp_7;
        uint8_t const *tmp_8;
        uint8_t *tmp_9;
        uint8_t const *tmp_10;
        uint8_t *tmp_11;
        uint8_t const *tmp_12;
        uint8_t *tmp_13;
        uint8_t const *tmp_14;
        uint8_t *tmp_15;
        uint8_t const *tmp_16;
        uint8_t *tmp_17;
        uint8_t const *tmp_18;
        uint8_t *tmp_19;
        uint8_t const *tmp_20;
        uint8_t *tmp_21;
        uint8_t const *tmp_22;
        uint8_t *tmp_23;
        uint8_t const *tmp_24;
        uint8_t *tmp_25;
        uint8_t const *tmp_26;
        uint8_t *tmp_27;
        uint8_t const *tmp_28;
        uint8_t *tmp_29;
        uint8_t const *tmp_30;
        uint8_t *tmp_31;
        uint8_t const *tmp_32;
        uint8_t *tmp_33;
        uint8_t const *tmp_34;
        uint8_t *tmp_35;
        uint8_t const *tmp_36;
        uint8_t *tmp_37;
        uint8_t const *tmp_38;
        uint8_t *tmp_39;
        uint8_t const *tmp_40;
        uint8_t *tmp_41;
        uint8_t const *tmp_42;
        uint8_t *tmp_43;
        uint8_t const *tmp_44;
        uint8_t *tmp_45;
        uint8_t const *tmp_46;
        uint8_t *tmp_47;
        uint8_t const *tmp_48;
        uint8_t *tmp_49;
        uint8_t const *tmp_50;
        uint8_t *tmp_51;
        uint8_t const *tmp_52;
        uint8_t *tmp_53;
        uint8_t const *tmp_54;
        uint8_t *tmp_55;
        uint8_t const *tmp_56;
        uint8_t *tmp_57;
        uint8_t const *tmp_58;
        uint8_t *tmp_59;
        uint8_t const *tmp_60;
        default:
        { /* sequence */
          tmp = dp;
          dp ++;
          tmp_0 = sp;
          sp ++;
          *tmp = *tmp_0;
        }
        tmp_1 = dp;
        dp ++;
        tmp_2 = sp;
        sp ++;
        *tmp_1 = *tmp_2;
        tmp_3 = dp;
        dp ++;
        tmp_4 = sp;
        sp ++;
        *tmp_3 = *tmp_4;
        tmp_5 = dp;
        dp ++;
        tmp_6 = sp;
        sp ++;
        *tmp_5 = *tmp_6;
        tmp_7 = dp;
        dp ++;
        tmp_8 = sp;
        sp ++;
        *tmp_7 = *tmp_8;
        tmp_9 = dp;
        dp ++;
        tmp_10 = sp;
        sp ++;
        *tmp_9 = *tmp_10;
        tmp_11 = dp;
        dp ++;
        tmp_12 = sp;
        sp ++;
        *tmp_11 = *tmp_12;
        tmp_13 = dp;
        dp ++;
        tmp_14 = sp;
        sp ++;
        *tmp_13 = *tmp_14;
        tmp_15 = dp;
        dp ++;
        tmp_16 = sp;
        sp ++;
        *tmp_15 = *tmp_16;
        tmp_17 = dp;
        dp ++;
        tmp_18 = sp;
        sp ++;
        *tmp_17 = *tmp_18;
        tmp_19 = dp;
        dp ++;
        tmp_20 = sp;
        sp ++;
        *tmp_19 = *tmp_20;
        tmp_21 = dp;
        dp ++;
        tmp_22 = sp;
        sp ++;
        *tmp_21 = *tmp_22;
        tmp_23 = dp;
        dp ++;
        tmp_24 = sp;
        sp ++;
        *tmp_23 = *tmp_24;
        tmp_25 = dp;
        dp ++;
        tmp_26 = sp;
        sp ++;
        *tmp_25 = *tmp_26;
        tmp_27 = dp;
        dp ++;
        tmp_28 = sp;
        sp ++;
        *tmp_27 = *tmp_28;
        tmp_29 = dp;
        dp ++;
        tmp_30 = sp;
        sp ++;
        *tmp_29 = *tmp_30;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15:
        { /* sequence */
          tmp_31 = dp;
          dp ++;
          tmp_32 = sp;
          sp ++;
          *tmp_31 = *tmp_32;
        }
        case (uint32_t)14:
        { /* sequence */
          tmp_33 = dp;
          dp ++;
          tmp_34 = sp;
          sp ++;
          *tmp_33 = *tmp_34;
        }
        case (uint32_t)13:
        { /* sequence */
          tmp_35 = dp;
          dp ++;
          tmp_36 = sp;
          sp ++;
          *tmp_35 = *tmp_36;
        }
        case (uint32_t)12:
        { /* sequence */
          tmp_37 = dp;
          dp ++;
          tmp_38 = sp;
          sp ++;
          *tmp_37 = *tmp_38;
        }
        case (uint32_t)11:
        { /* sequence */
          tmp_39 = dp;
          dp ++;
          tmp_40 = sp;
          sp ++;
          *tmp_39 = *tmp_40;
        }
        case (uint32_t)10:
        { /* sequence */
          tmp_41 = dp;
          dp ++;
          tmp_42 = sp;
          sp ++;
          *tmp_41 = *tmp_42;
        }
        case (uint32_t)9:
        { /* sequence */
          tmp_43 = dp;
          dp ++;
          tmp_44 = sp;
          sp ++;
          *tmp_43 = *tmp_44;
        }
        case (uint32_t)8:
        { /* sequence */
          tmp_45 = dp;
          dp ++;
          tmp_46 = sp;
          sp ++;
          *tmp_45 = *tmp_46;
        }
        case (uint32_t)7:
        { /* sequence */
          tmp_47 = dp;
          dp ++;
          tmp_48 = sp;
          sp ++;
          *tmp_47 = *tmp_48;
        }
        case (uint32_t)6:
        { /* sequence */
          tmp_49 = dp;
          dp ++;
          tmp_50 = sp;
          sp ++;
          *tmp_49 = *tmp_50;
        }
        case (uint32_t)5:
        { /* sequence */
          tmp_51 = dp;
          dp ++;
          tmp_52 = sp;
          sp ++;
          *tmp_51 = *tmp_52;
        }
        case (uint32_t)4:
        { /* sequence */
          tmp_53 = dp;
          dp ++;
          tmp_54 = sp;
          sp ++;
          *tmp_53 = *tmp_54;
        }
        case (uint32_t)3:
        { /* sequence */
          tmp_55 = dp;
          dp ++;
          tmp_56 = sp;
          sp ++;
          *tmp_55 = *tmp_56;
        }
        case (uint32_t)2:
        { /* sequence */
          tmp_57 = dp;
          dp ++;
          tmp_58 = sp;
          sp ++;
          *tmp_57 = *tmp_58;
        }
        case (uint32_t)1:
        { /* sequence */
          tmp_59 = dp;
          dp ++;
          tmp_60 = sp;
          sp ++;
          *tmp_59 = *tmp_60;
        }
        len = (uint32_t)0;
        break;
      }
  else {
    sp += len;
    dp += len;
    while (len != (uint32_t)0) 
      switch (len) {
        default: { /* sequence */
                   dp --;
                   sp --;
                   *dp = *sp;
                 }
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)14: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)13: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)12: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)11: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)10: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)9: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)8: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)7: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)6: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)5: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)4: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)3: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)2: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)1: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        len = (uint32_t)0;
        break;
      }
  }
  return;
}

void mem_prim_move16(uint16_t *dp, uint16_t const *sp, uint32_t len)
{
  if ((void *)dp < (void *)sp) 
    while (len != (uint32_t)0) 
      switch (len) {
        uint16_t *tmp;
        uint16_t const *tmp_0;
        uint16_t *tmp_1;
        uint16_t const *tmp_2;
        uint16_t *tmp_3;
        uint16_t const *tmp_4;
        uint16_t *tmp_5;
        uint16_t const *tmp_6;
        uint16_t *tmp_7;
        uint16_t const *tmp_8;
        uint16_t *tmp_9;
        uint16_t const *tmp_10;
        uint16_t *tmp_11;
        uint16_t const *tmp_12;
        uint16_t *tmp_13;
        uint16_t const *tmp_14;
        uint16_t *tmp_15;
        uint16_t const *tmp_16;
        uint16_t *tmp_17;
        uint16_t const *tmp_18;
        uint16_t *tmp_19;
        uint16_t const *tmp_20;
        uint16_t *tmp_21;
        uint16_t const *tmp_22;
        uint16_t *tmp_23;
        uint16_t const *tmp_24;
        uint16_t *tmp_25;
        uint16_t const *tmp_26;
        uint16_t *tmp_27;
        uint16_t const *tmp_28;
        uint16_t *tmp_29;
        uint16_t const *tmp_30;
        uint16_t *tmp_31;
        uint16_t const *tmp_32;
        uint16_t *tmp_33;
        uint16_t const *tmp_34;
        uint16_t *tmp_35;
        uint16_t const *tmp_36;
        uint16_t *tmp_37;
        uint16_t const *tmp_38;
        uint16_t *tmp_39;
        uint16_t const *tmp_40;
        uint16_t *tmp_41;
        uint16_t const *tmp_42;
        uint16_t *tmp_43;
        uint16_t const *tmp_44;
        uint16_t *tmp_45;
        uint16_t const *tmp_46;
        uint16_t *tmp_47;
        uint16_t const *tmp_48;
        uint16_t *tmp_49;
        uint16_t const *tmp_50;
        uint16_t *tmp_51;
        uint16_t const *tmp_52;
        uint16_t *tmp_53;
        uint16_t const *tmp_54;
        uint16_t *tmp_55;
        uint16_t const *tmp_56;
        uint16_t *tmp_57;
        uint16_t const *tmp_58;
        uint16_t *tmp_59;
        uint16_t const *tmp_60;
        default:
        { /* sequence */
          tmp = dp;
          dp ++;
          tmp_0 = sp;
          sp ++;
          *tmp = *tmp_0;
        }
        tmp_1 = dp;
        dp ++;
        tmp_2 = sp;
        sp ++;
        *tmp_1 = *tmp_2;
        tmp_3 = dp;
        dp ++;
        tmp_4 = sp;
        sp ++;
        *tmp_3 = *tmp_4;
        tmp_5 = dp;
        dp ++;
        tmp_6 = sp;
        sp ++;
        *tmp_5 = *tmp_6;
        tmp_7 = dp;
        dp ++;
        tmp_8 = sp;
        sp ++;
        *tmp_7 = *tmp_8;
        tmp_9 = dp;
        dp ++;
        tmp_10 = sp;
        sp ++;
        *tmp_9 = *tmp_10;
        tmp_11 = dp;
        dp ++;
        tmp_12 = sp;
        sp ++;
        *tmp_11 = *tmp_12;
        tmp_13 = dp;
        dp ++;
        tmp_14 = sp;
        sp ++;
        *tmp_13 = *tmp_14;
        tmp_15 = dp;
        dp ++;
        tmp_16 = sp;
        sp ++;
        *tmp_15 = *tmp_16;
        tmp_17 = dp;
        dp ++;
        tmp_18 = sp;
        sp ++;
        *tmp_17 = *tmp_18;
        tmp_19 = dp;
        dp ++;
        tmp_20 = sp;
        sp ++;
        *tmp_19 = *tmp_20;
        tmp_21 = dp;
        dp ++;
        tmp_22 = sp;
        sp ++;
        *tmp_21 = *tmp_22;
        tmp_23 = dp;
        dp ++;
        tmp_24 = sp;
        sp ++;
        *tmp_23 = *tmp_24;
        tmp_25 = dp;
        dp ++;
        tmp_26 = sp;
        sp ++;
        *tmp_25 = *tmp_26;
        tmp_27 = dp;
        dp ++;
        tmp_28 = sp;
        sp ++;
        *tmp_27 = *tmp_28;
        tmp_29 = dp;
        dp ++;
        tmp_30 = sp;
        sp ++;
        *tmp_29 = *tmp_30;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15:
        { /* sequence */
          tmp_31 = dp;
          dp ++;
          tmp_32 = sp;
          sp ++;
          *tmp_31 = *tmp_32;
        }
        case (uint32_t)14:
        { /* sequence */
          tmp_33 = dp;
          dp ++;
          tmp_34 = sp;
          sp ++;
          *tmp_33 = *tmp_34;
        }
        case (uint32_t)13:
        { /* sequence */
          tmp_35 = dp;
          dp ++;
          tmp_36 = sp;
          sp ++;
          *tmp_35 = *tmp_36;
        }
        case (uint32_t)12:
        { /* sequence */
          tmp_37 = dp;
          dp ++;
          tmp_38 = sp;
          sp ++;
          *tmp_37 = *tmp_38;
        }
        case (uint32_t)11:
        { /* sequence */
          tmp_39 = dp;
          dp ++;
          tmp_40 = sp;
          sp ++;
          *tmp_39 = *tmp_40;
        }
        case (uint32_t)10:
        { /* sequence */
          tmp_41 = dp;
          dp ++;
          tmp_42 = sp;
          sp ++;
          *tmp_41 = *tmp_42;
        }
        case (uint32_t)9:
        { /* sequence */
          tmp_43 = dp;
          dp ++;
          tmp_44 = sp;
          sp ++;
          *tmp_43 = *tmp_44;
        }
        case (uint32_t)8:
        { /* sequence */
          tmp_45 = dp;
          dp ++;
          tmp_46 = sp;
          sp ++;
          *tmp_45 = *tmp_46;
        }
        case (uint32_t)7:
        { /* sequence */
          tmp_47 = dp;
          dp ++;
          tmp_48 = sp;
          sp ++;
          *tmp_47 = *tmp_48;
        }
        case (uint32_t)6:
        { /* sequence */
          tmp_49 = dp;
          dp ++;
          tmp_50 = sp;
          sp ++;
          *tmp_49 = *tmp_50;
        }
        case (uint32_t)5:
        { /* sequence */
          tmp_51 = dp;
          dp ++;
          tmp_52 = sp;
          sp ++;
          *tmp_51 = *tmp_52;
        }
        case (uint32_t)4:
        { /* sequence */
          tmp_53 = dp;
          dp ++;
          tmp_54 = sp;
          sp ++;
          *tmp_53 = *tmp_54;
        }
        case (uint32_t)3:
        { /* sequence */
          tmp_55 = dp;
          dp ++;
          tmp_56 = sp;
          sp ++;
          *tmp_55 = *tmp_56;
        }
        case (uint32_t)2:
        { /* sequence */
          tmp_57 = dp;
          dp ++;
          tmp_58 = sp;
          sp ++;
          *tmp_57 = *tmp_58;
        }
        case (uint32_t)1:
        { /* sequence */
          tmp_59 = dp;
          dp ++;
          tmp_60 = sp;
          sp ++;
          *tmp_59 = *tmp_60;
        }
        len = (uint32_t)0;
        break;
      }
  else {
    sp += len;
    dp += len;
    while (len != (uint32_t)0) 
      switch (len) {
        default: { /* sequence */
                   dp --;
                   sp --;
                   *dp = *sp;
                 }
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)14: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)13: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)12: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)11: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)10: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)9: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)8: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)7: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)6: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)5: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)4: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)3: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)2: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)1: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        len = (uint32_t)0;
        break;
      }
  }
  return;
}

void mem_prim_move32(uint32_t *dp, uint32_t const *sp, uint32_t len)
{
  if ((void *)dp < (void *)sp) 
    while (len != (uint32_t)0) 
      switch (len) {
        uint32_t *tmp;
        uint32_t const *tmp_0;
        uint32_t *tmp_1;
        uint32_t const *tmp_2;
        uint32_t *tmp_3;
        uint32_t const *tmp_4;
        uint32_t *tmp_5;
        uint32_t const *tmp_6;
        uint32_t *tmp_7;
        uint32_t const *tmp_8;
        uint32_t *tmp_9;
        uint32_t const *tmp_10;
        uint32_t *tmp_11;
        uint32_t const *tmp_12;
        uint32_t *tmp_13;
        uint32_t const *tmp_14;
        uint32_t *tmp_15;
        uint32_t const *tmp_16;
        uint32_t *tmp_17;
        uint32_t const *tmp_18;
        uint32_t *tmp_19;
        uint32_t const *tmp_20;
        uint32_t *tmp_21;
        uint32_t const *tmp_22;
        uint32_t *tmp_23;
        uint32_t const *tmp_24;
        uint32_t *tmp_25;
        uint32_t const *tmp_26;
        uint32_t *tmp_27;
        uint32_t const *tmp_28;
        uint32_t *tmp_29;
        uint32_t const *tmp_30;
        uint32_t *tmp_31;
        uint32_t const *tmp_32;
        uint32_t *tmp_33;
        uint32_t const *tmp_34;
        uint32_t *tmp_35;
        uint32_t const *tmp_36;
        uint32_t *tmp_37;
        uint32_t const *tmp_38;
        uint32_t *tmp_39;
        uint32_t const *tmp_40;
        uint32_t *tmp_41;
        uint32_t const *tmp_42;
        uint32_t *tmp_43;
        uint32_t const *tmp_44;
        uint32_t *tmp_45;
        uint32_t const *tmp_46;
        uint32_t *tmp_47;
        uint32_t const *tmp_48;
        uint32_t *tmp_49;
        uint32_t const *tmp_50;
        uint32_t *tmp_51;
        uint32_t const *tmp_52;
        uint32_t *tmp_53;
        uint32_t const *tmp_54;
        uint32_t *tmp_55;
        uint32_t const *tmp_56;
        uint32_t *tmp_57;
        uint32_t const *tmp_58;
        uint32_t *tmp_59;
        uint32_t const *tmp_60;
        default:
        { /* sequence */
          tmp = dp;
          dp ++;
          tmp_0 = sp;
          sp ++;
          *tmp = *tmp_0;
        }
        tmp_1 = dp;
        dp ++;
        tmp_2 = sp;
        sp ++;
        *tmp_1 = *tmp_2;
        tmp_3 = dp;
        dp ++;
        tmp_4 = sp;
        sp ++;
        *tmp_3 = *tmp_4;
        tmp_5 = dp;
        dp ++;
        tmp_6 = sp;
        sp ++;
        *tmp_5 = *tmp_6;
        tmp_7 = dp;
        dp ++;
        tmp_8 = sp;
        sp ++;
        *tmp_7 = *tmp_8;
        tmp_9 = dp;
        dp ++;
        tmp_10 = sp;
        sp ++;
        *tmp_9 = *tmp_10;
        tmp_11 = dp;
        dp ++;
        tmp_12 = sp;
        sp ++;
        *tmp_11 = *tmp_12;
        tmp_13 = dp;
        dp ++;
        tmp_14 = sp;
        sp ++;
        *tmp_13 = *tmp_14;
        tmp_15 = dp;
        dp ++;
        tmp_16 = sp;
        sp ++;
        *tmp_15 = *tmp_16;
        tmp_17 = dp;
        dp ++;
        tmp_18 = sp;
        sp ++;
        *tmp_17 = *tmp_18;
        tmp_19 = dp;
        dp ++;
        tmp_20 = sp;
        sp ++;
        *tmp_19 = *tmp_20;
        tmp_21 = dp;
        dp ++;
        tmp_22 = sp;
        sp ++;
        *tmp_21 = *tmp_22;
        tmp_23 = dp;
        dp ++;
        tmp_24 = sp;
        sp ++;
        *tmp_23 = *tmp_24;
        tmp_25 = dp;
        dp ++;
        tmp_26 = sp;
        sp ++;
        *tmp_25 = *tmp_26;
        tmp_27 = dp;
        dp ++;
        tmp_28 = sp;
        sp ++;
        *tmp_27 = *tmp_28;
        tmp_29 = dp;
        dp ++;
        tmp_30 = sp;
        sp ++;
        *tmp_29 = *tmp_30;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15:
        { /* sequence */
          tmp_31 = dp;
          dp ++;
          tmp_32 = sp;
          sp ++;
          *tmp_31 = *tmp_32;
        }
        case (uint32_t)14:
        { /* sequence */
          tmp_33 = dp;
          dp ++;
          tmp_34 = sp;
          sp ++;
          *tmp_33 = *tmp_34;
        }
        case (uint32_t)13:
        { /* sequence */
          tmp_35 = dp;
          dp ++;
          tmp_36 = sp;
          sp ++;
          *tmp_35 = *tmp_36;
        }
        case (uint32_t)12:
        { /* sequence */
          tmp_37 = dp;
          dp ++;
          tmp_38 = sp;
          sp ++;
          *tmp_37 = *tmp_38;
        }
        case (uint32_t)11:
        { /* sequence */
          tmp_39 = dp;
          dp ++;
          tmp_40 = sp;
          sp ++;
          *tmp_39 = *tmp_40;
        }
        case (uint32_t)10:
        { /* sequence */
          tmp_41 = dp;
          dp ++;
          tmp_42 = sp;
          sp ++;
          *tmp_41 = *tmp_42;
        }
        case (uint32_t)9:
        { /* sequence */
          tmp_43 = dp;
          dp ++;
          tmp_44 = sp;
          sp ++;
          *tmp_43 = *tmp_44;
        }
        case (uint32_t)8:
        { /* sequence */
          tmp_45 = dp;
          dp ++;
          tmp_46 = sp;
          sp ++;
          *tmp_45 = *tmp_46;
        }
        case (uint32_t)7:
        { /* sequence */
          tmp_47 = dp;
          dp ++;
          tmp_48 = sp;
          sp ++;
          *tmp_47 = *tmp_48;
        }
        case (uint32_t)6:
        { /* sequence */
          tmp_49 = dp;
          dp ++;
          tmp_50 = sp;
          sp ++;
          *tmp_49 = *tmp_50;
        }
        case (uint32_t)5:
        { /* sequence */
          tmp_51 = dp;
          dp ++;
          tmp_52 = sp;
          sp ++;
          *tmp_51 = *tmp_52;
        }
        case (uint32_t)4:
        { /* sequence */
          tmp_53 = dp;
          dp ++;
          tmp_54 = sp;
          sp ++;
          *tmp_53 = *tmp_54;
        }
        case (uint32_t)3:
        { /* sequence */
          tmp_55 = dp;
          dp ++;
          tmp_56 = sp;
          sp ++;
          *tmp_55 = *tmp_56;
        }
        case (uint32_t)2:
        { /* sequence */
          tmp_57 = dp;
          dp ++;
          tmp_58 = sp;
          sp ++;
          *tmp_57 = *tmp_58;
        }
        case (uint32_t)1:
        { /* sequence */
          tmp_59 = dp;
          dp ++;
          tmp_60 = sp;
          sp ++;
          *tmp_59 = *tmp_60;
        }
        len = (uint32_t)0;
        break;
      }
  else {
    sp += len;
    dp += len;
    while (len != (uint32_t)0) 
      switch (len) {
        default: { /* sequence */
                   dp --;
                   sp --;
                   *dp = *sp;
                 }
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        dp --;
        sp --;
        *dp = *sp;
        len -= (uint32_t)16;
        break;
        case (uint32_t)15: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)14: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)13: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)12: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)11: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)10: { /* sequence */
                             dp --;
                             sp --;
                             *dp = *sp;
                           }
        case (uint32_t)9: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)8: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)7: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)6: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)5: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)4: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)3: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)2: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        case (uint32_t)1: { /* sequence */
                            dp --;
                            sp --;
                            *dp = *sp;
                          }
        len = (uint32_t)0;
        break;
      }
  }
  return;
}

void invoke_safe_mem_constraint_handler(char const *msg, void *ptr,
                                        errno_t error);

errno_t memcmp16_s(uint16_t const *dest_0, rsize_t dmax, uint16_t const *src,
                   rsize_t smax, int *diff)
{
  errno_t __retres;
  uint16_t const *dp;
  uint16_t const *sp;
  dp = dest_0;
  sp = src;
  if (diff == (int *)0) {
    invoke_safe_mem_constraint_handler("memcmp16_s: diff is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *diff = -1;
  if (dp == (uint16_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp16_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (sp == (uint16_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp16_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp16_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)2) {
    invoke_safe_mem_constraint_handler("memcmp16_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp16_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    invoke_safe_mem_constraint_handler("memcmp16_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dp == sp) {
    *diff = 0;
    __retres = 0;
    goto return_label;
  }
  *diff = 0;
  while (1) {
    if (dmax != (rsize_t)0) {
      if (! (smax != (rsize_t)0)) break;
    }
    else break;
    if ((int)*dp != (int)*sp) {
      *diff = (int)*dp - (int)*sp;
      break;
    }
    dmax --;
    smax --;
    dp ++;
    sp ++;
  }
  __retres = 0;
  return_label: return __retres;
}

errno_t memcmp32_s(uint32_t const *dest_0, rsize_t dmax, uint32_t const *src,
                   rsize_t smax, int *diff)
{
  errno_t __retres;
  if (diff == (int *)0) {
    invoke_safe_mem_constraint_handler("memcmp32_s: diff is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *diff = -1;
  if (dest_0 == (uint32_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp32_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (uint32_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp32_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp32_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("memcmp32_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp32_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    invoke_safe_mem_constraint_handler("memcmp32_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dest_0 == src) {
    *diff = 0;
    __retres = 0;
    goto return_label;
  }
  *diff = 0;
  while (1) {
    if (dmax != (rsize_t)0) {
      if (! (smax != (rsize_t)0)) break;
    }
    else break;
    if (*dest_0 != *src) {
      *diff = (int)(*dest_0 - *src);
      break;
    }
    dmax --;
    smax --;
    dest_0 ++;
    src ++;
  }
  __retres = 0;
  return_label: return __retres;
}

errno_t memcmp_s(void const *dest_0, rsize_t dmax, void const *src,
                 rsize_t smax, int *diff)
{
  errno_t __retres;
  uint8_t const *dp;
  uint8_t const *sp;
  dp = (uint8_t const *)dest_0;
  sp = (uint8_t const *)src;
  if (diff == (int *)0) {
    invoke_safe_mem_constraint_handler("memcmp_s: diff is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *diff = -1;
  if (dp == (uint8_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (sp == (uint8_t const *)0) {
    invoke_safe_mem_constraint_handler("memcmp_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 256UL << 20) {
    invoke_safe_mem_constraint_handler("memcmp_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcmp_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    invoke_safe_mem_constraint_handler("memcmp_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dp == sp) {
    *diff = 0;
    __retres = 0;
    goto return_label;
  }
  *diff = 0;
  while (1) {
    if (dmax > (rsize_t)0) {
      if (! (smax > (rsize_t)0)) break;
    }
    else break;
    if ((int)*dp != (int)*sp) {
      if ((int)*dp < (int)*sp) *diff = -1; else *diff = 1;
      break;
    }
    dmax --;
    smax --;
    dp ++;
    sp ++;
  }
  __retres = 0;
  return_label: return __retres;
}

errno_t memcpy16_s(uint16_t *dest_0, rsize_t dmax, uint16_t const *src,
                   rsize_t smax)
{
  errno_t __retres;
  if (dest_0 == (uint16_t *)0) {
    invoke_safe_mem_constraint_handler("memcpy16_s: dest is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcpy16_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)2) {
    invoke_safe_mem_constraint_handler("memcpy16_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set16(dest_0,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memcpy16_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set16(dest_0,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memcpy16_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (uint16_t const *)0) {
    mem_prim_set16(dest_0,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memcpy16_s: src is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dest_0 > (void *)src) {
    if ((void *)dest_0 < (void *)(src + smax)) goto _LOR; else goto _LAND;
  }
  else {
    _LAND: ;
    if ((void *)src > (void *)dest_0) 
      if ((void *)src < (void *)(dest_0 + dmax)) {
        _LOR:
        {
          mem_prim_set16(dest_0,dmax,(uint16_t)0);
          invoke_safe_mem_constraint_handler("memcpy16_s: overlap undefined",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
      }
  }
  mem_prim_move16(dest_0,src,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memcpy32_s(uint32_t *dest_0, rsize_t dmax, uint32_t const *src,
                   rsize_t smax)
{
  errno_t __retres;
  if (dest_0 == (uint32_t *)0) {
    invoke_safe_mem_constraint_handler("memcpy32_s: dest is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcpy32_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("memcpy32_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set32(dest_0,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memcpy32_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set32(dest_0,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memcpy32_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (uint32_t const *)0) {
    mem_prim_set32(dest_0,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memcpy32_s: src is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dest_0 > (void *)src) {
    if ((void *)dest_0 < (void *)(src + smax)) goto _LOR; else goto _LAND;
  }
  else {
    _LAND: ;
    if ((void *)src > (void *)dest_0) 
      if ((void *)src < (void *)(dest_0 + dmax)) {
        _LOR:
        {
          mem_prim_set32(dest_0,dmax,(uint32_t)0);
          invoke_safe_mem_constraint_handler("memcpy32_s: overlap undefined",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
      }
  }
  mem_prim_move32(dest_0,src,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memcpy_s(void *dest_0, rsize_t dmax, void const *src, rsize_t smax)
{
  errno_t __retres;
  uint8_t *dp;
  uint8_t const *sp;
  dp = (uint8_t *)dest_0;
  sp = (uint8_t const *)src;
  if (dp == (uint8_t *)0) {
    invoke_safe_mem_constraint_handler("memcpy_s: dest is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memcpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 256UL << 20) {
    invoke_safe_mem_constraint_handler("memcpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memcpy_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memcpy_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (uint8_t const *)0) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memcpy_s: src is NULL",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dp > (void *)sp) {
    if ((void *)dp < (void *)(sp + smax)) goto _LOR; else goto _LAND;
  }
  else {
    _LAND: ;
    if ((void *)sp > (void *)dp) 
      if ((void *)sp < (void *)(dp + dmax)) {
        _LOR:
        {
          mem_prim_set((void *)dp,dmax,(uint8_t)0);
          invoke_safe_mem_constraint_handler("memcpy_s: overlap undefined",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
      }
  }
  mem_prim_move((void *)dp,(void const *)sp,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memmove16_s(uint16_t *dest_0, rsize_t dmax, uint16_t const *src,
                    rsize_t smax)
{
  errno_t __retres;
  uint16_t *dp;
  uint16_t const *sp;
  dp = dest_0;
  sp = src;
  if (dp == (uint16_t *)0) {
    invoke_safe_mem_constraint_handler("memove16_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memove16_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)2) {
    invoke_safe_mem_constraint_handler("memove16_s: dmax  exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set16(dp,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memove16_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set16(dp,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memove16_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (uint16_t const *)0) {
    mem_prim_set16(dp,dmax,(uint16_t)0);
    invoke_safe_mem_constraint_handler("memove16_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  mem_prim_move16(dp,sp,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memmove32_s(uint32_t *dest_0, rsize_t dmax, uint32_t const *src,
                    rsize_t smax)
{
  errno_t __retres;
  uint32_t *dp;
  uint32_t const *sp;
  dp = dest_0;
  sp = src;
  if (dp == (uint32_t *)0) {
    invoke_safe_mem_constraint_handler("memove32_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memove32_s: dest is zero",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("memove32_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set32(dp,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memove32_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set32(dp,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memove32_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (uint32_t const *)0) {
    mem_prim_set32(dp,dmax,(uint32_t)0);
    invoke_safe_mem_constraint_handler("memove32_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  mem_prim_move32(dp,sp,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memmove_s(void *dest_0, rsize_t dmax, void const *src, rsize_t smax)
{
  errno_t __retres;
  uint8_t *dp;
  uint8_t const *sp;
  dp = (uint8_t *)dest_0;
  sp = (uint8_t const *)src;
  if (dp == (uint8_t *)0) {
    invoke_safe_mem_constraint_handler("memmove_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memmove_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 256UL << 20) {
    invoke_safe_mem_constraint_handler("memmove_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memmove_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memmove_s: smax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (uint8_t const *)0) {
    mem_prim_set((void *)dp,dmax,(uint8_t)0);
    invoke_safe_mem_constraint_handler("memmove_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  mem_prim_move((void *)dp,(void const *)sp,smax);
  __retres = 0;
  return_label: return __retres;
}

errno_t memset16_s(uint16_t *dest_0, rsize_t len, uint16_t value)
{
  errno_t __retres;
  if (dest_0 == (uint16_t *)0) {
    invoke_safe_mem_constraint_handler("memset16_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memset16_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > (256UL << 20) / (unsigned long)2) {
    invoke_safe_mem_constraint_handler("memset16_s: len exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set16(dest_0,len,value);
  __retres = 0;
  return_label: return __retres;
}

errno_t memset32_s(uint32_t *dest_0, rsize_t len, uint32_t value)
{
  errno_t __retres;
  if (dest_0 == (uint32_t *)0) {
    invoke_safe_mem_constraint_handler("memset32_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memset32_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("memset32_s: len  exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set32(dest_0,len,value);
  __retres = 0;
  return_label: return __retres;
}

errno_t memset_s(void *dest_0, rsize_t len, uint8_t value)
{
  errno_t __retres;
  if (dest_0 == (void *)0) {
    invoke_safe_mem_constraint_handler("memset_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memset_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > 256UL << 20) {
    invoke_safe_mem_constraint_handler("memset_s: len exceeds max",(void *)0,
                                       403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set(dest_0,len,value);
  __retres = 0;
  return_label: return __retres;
}

errno_t memzero16_s(uint16_t *dest_0, rsize_t len)
{
  errno_t __retres;
  if (dest_0 == (uint16_t *)0) {
    invoke_safe_mem_constraint_handler("memzero16_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memzero16_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > (256UL << 20) / (unsigned long)2) {
    invoke_safe_mem_constraint_handler("memzero16_s: len exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set16(dest_0,len,(uint16_t)0);
  __retres = 0;
  return_label: return __retres;
}

errno_t memzero32_s(uint32_t *dest_0, rsize_t len)
{
  errno_t __retres;
  if (dest_0 == (uint32_t *)0) {
    invoke_safe_mem_constraint_handler("memzero32_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memzero32_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("memzero32_s: len exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set32(dest_0,len,(uint32_t)0);
  __retres = 0;
  return_label: return __retres;
}

errno_t memzero_s(void *dest_0, rsize_t len)
{
  errno_t __retres;
  if (dest_0 == (void *)0) {
    invoke_safe_mem_constraint_handler("memzero_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("memzero_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)len > 256UL << 20) {
    invoke_safe_mem_constraint_handler("memzero_s: len exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set(dest_0,len,(uint8_t)0);
  __retres = 0;
  return_label: return __retres;
}

static void (*mem_handler)(char const *, void *, errno_t ) =
  (void (*)(char const *, void *, errno_t ))0;
constraint_handler_t set_mem_constraint_handler_s(void (*handler)(char const *,
                                                                  void *,
                                                                  errno_t ))
{
  void (*prev_handler)(char const *, void *, errno_t ) = mem_handler;
  if ((void (*)(char const *, void *, errno_t ))0 == handler) mem_handler = & ignore_handler_s;
  else mem_handler = handler;
  return prev_handler;
}

void invoke_safe_mem_constraint_handler(char const *msg, void *ptr,
                                        errno_t error)
{
  if ((void (*)(char const *, void *, errno_t ))0 != mem_handler) (*mem_handler)
                                                                  (msg,ptr,
                                                                   error);
  else ignore_handler_s(msg,ptr,error);
  return;
}

void invoke_safe_str_constraint_handler(char const *msg, void *ptr,
                                        errno_t error);

__inline static void handle_error(char *orig_dest, rsize_t orig_dmax,
                                  char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error(wchar_t *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

static void (*str_handler)(char const *, void *, errno_t ) =
  (void (*)(char const *, void *, errno_t ))0;
constraint_handler_t set_str_constraint_handler_s(void (*handler)(char const *,
                                                                  void *,
                                                                  errno_t ))
{
  void (*prev_handler)(char const *, void *, errno_t ) = str_handler;
  if ((void (*)(char const *, void *, errno_t ))0 == handler) str_handler = & ignore_handler_s;
  else str_handler = handler;
  return prev_handler;
}

void invoke_safe_str_constraint_handler(char const *msg, void *ptr,
                                        errno_t error)
{
  if ((void (*)(char const *, void *, errno_t ))0 != str_handler) (*str_handler)
                                                                  (msg,ptr,
                                                                   error);
  else ignore_handler_s(msg,ptr,error);
  return;
}

__inline static void handle_error_0(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_0(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

int snprintf_s_i(char *dest_0, rsize_t dmax, char const *format, int a);

int snprintf_s_si(char *dest_0, rsize_t dmax, char const *format, char *s,
                  int a);

int snprintf_s_l(char *dest_0, rsize_t dmax, char const *format, long a);

int snprintf_s_sl(char *dest_0, rsize_t dmax, char const *format, char *s,
                  long a);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_2(char const * restrict format, int param0);

unsigned int parse_format(char const *format, char *pformatList,
                          unsigned int maxFormats)
{
  unsigned int numFormats = (unsigned int)0;
  unsigned int index_0 = (unsigned int)0;
  unsigned int start = (unsigned int)0;
  char lmod = (char)0;
  while (1) {
    if ((unsigned long)index_0 < 4UL << 10) 
      if ((int)*(format + index_0) != '\000') {
        if (! (numFormats < maxFormats)) break;
      }
      else break;
    else break;
    if ((int)*(format + index_0) == '%') {
      start = index_0;
      index_0 ++;
      ;
      switch ((int)*(format + index_0)) {
        case '\000': continue;
        case '%': continue;
        case '#': case '0': case '-': case ' ': case '+': index_0 ++;
        break;
      }
      while (1) {
        if ((int)*(format + index_0) != '\000') 
          if ((int)*(format + index_0) >= '0') {
            if (! ((int)*(format + index_0) <= '9')) break;
          }
          else break;
        else break;
        index_0 ++;
      }
      if ((int)*(format + index_0) != '\000') 
        if ((int)*(format + index_0) == '.') {
          index_0 ++;
          while (1) {
            if ((int)*(format + index_0) != '\000') 
              if ((int)*(format + index_0) >= '0') {
                if (! ((int)*(format + index_0) <= '9')) break;
              }
              else break;
            else break;
            index_0 ++;
          }
        }
      lmod = (char)' ';
      switch ((int)*(format + index_0)) {
        case 'h': { /* sequence */
                    index_0 ++;
                    ;
                  }
        if ((int)*(format + index_0) == 'h') {
          index_0 ++;
          lmod = (char)'H';
        }
        else lmod = (char)'h';
        break;
        case 'l': { /* sequence */
                    index_0 ++;
                    ;
                  }
        if ((int)*(format + index_0) == 'l') {
          index_0 ++;
          lmod = (char)'d';
        }
        else lmod = (char)'l';
        break;
        case 'L': lmod = (char)'L';
        break;
        case 'j': case 'z': case 't': index_0 ++;
        break;
      }
      switch ((int)*(format + index_0)) {
        case 'c': ;
        if ((int)lmod == 'l') *(pformatList + numFormats) = (char)'C';
        else *(pformatList + numFormats) = (char)'c';
        numFormats ++;
        index_0 ++;
        break;
        case 'd': case 'i': case 'o': case 'u': case 'x': case 'X': ;
        if ((int)lmod == 'H') *(pformatList + numFormats) = (char)'c';
        else 
          if ((int)lmod == 'l') *(pformatList + numFormats) = (char)'l';
          else 
            if ((int)lmod == 'h') *(pformatList + numFormats) = (char)'h';
            else *(pformatList + numFormats) = (char)'d';
        numFormats ++;
        index_0 ++;
        break;
        case 'e': case 'E': case 'f': case 'F': case 'g': case 'G': case 'a':
        case 'A':
        ;
        if ((int)lmod == 'L') *(pformatList + numFormats) = (char)'G';
        else *(pformatList + numFormats) = (char)'g';
        numFormats ++;
        index_0 ++;
        break;
        case 's': ;
        if ((int)lmod == 'l') goto _LOR;
        else 
          if ((int)lmod == 'L') _LOR:
                                *(pformatList + numFormats) = (char)'S';
          else *(pformatList + numFormats) = (char)'s';
        numFormats ++;
        index_0 ++;
        break;
        case 'p': *(pformatList + numFormats) = (char)'p';
        numFormats ++;
        index_0 ++;
        break;
        case 'n': ;
        if ((int)lmod == 'H') *(pformatList + numFormats) = (char)'1';
        else 
          if ((int)lmod == 'l') *(pformatList + numFormats) = (char)'4';
          else 
            if ((int)lmod == 'h') *(pformatList + numFormats) = (char)'2';
            else *(pformatList + numFormats) = (char)'3';
        numFormats ++;
        index_0 ++;
        break;
        case 'm': index_0 ++;
        continue;
        default:
        printf("failed to recognize format string ["); /* printf_va_1 */
        while (start < index_0) {
          printf("%c",(int)*(format + start)); /* printf_va_2 */
          start ++;
        }
        puts("]");
        break;
      }
    }
    else index_0 ++;
  }
  return numFormats;
}

unsigned int check_integer_format(char const format)
{
  unsigned int retValue = (unsigned int)0;
  switch ((int)format) {
    case 'c': case 'h': case 'd': retValue = (unsigned int)1;
    break;
  }
  return retValue;
}

/*@ requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))), (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param0;
 */
int snprintf_va_1(char * restrict s, size_t n, char const * restrict format,
                  int param0);

int snprintf_s_i(char *dest_0, rsize_t dmax, char const *format, int a)
{
  int __retres;
  char pformatList[16];
  unsigned int tmp_0;
  int tmp_1;
  unsigned int index_0 = (unsigned int)0;
  unsigned int nfo = parse_format(format,pformatList,(unsigned int)16);
  if (nfo != (unsigned int)1) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 410;
    goto return_label;
  }
  tmp_0 = check_integer_format(pformatList[index_0]);
  if (tmp_0 == (unsigned int)0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  tmp_1 = snprintf(dest_0,dmax,format,a); /* snprintf_va_1 */
  __retres = tmp_1;
  return_label: return __retres;
}

/*@ requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))), (indirect: param0);
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param0;
 */
int snprintf_va_2(char * restrict s, size_t n, char const * restrict format,
                  long param0);

int snprintf_s_l(char *dest_0, rsize_t dmax, char const *format, long a)
{
  int __retres;
  char pformatList[16];
  int tmp_0;
  int tmp_1;
  unsigned int index_0 = (unsigned int)0;
  unsigned int nfo = parse_format(format,pformatList,(unsigned int)16);
  if (nfo != (unsigned int)1) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 410;
    goto return_label;
  }
  if ('l' == (int)pformatList[index_0]) tmp_0 = 1; else tmp_0 = 0;
  if (tmp_0 == 0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  tmp_1 = snprintf(dest_0,dmax,format,a); /* snprintf_va_2 */
  __retres = tmp_1;
  return_label: return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param1,
            *(param0 + (0 ..));
 */
int snprintf_va_3(char * restrict s, size_t n, char const * restrict format,
                  char *param0, int param1);

int snprintf_s_si(char *dest_0, rsize_t dmax, char const *format, char *s,
                  int a)
{
  int __retres;
  char pformatList[16];
  int tmp_0;
  unsigned int tmp_1;
  int tmp_2;
  unsigned int index_0 = (unsigned int)0;
  unsigned int nfo = parse_format(format,pformatList,(unsigned int)16);
  if (nfo != (unsigned int)2) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 410;
    goto return_label;
  }
  if ('s' == (int)pformatList[index_0]) tmp_0 = 1; else tmp_0 = 0;
  if (tmp_0 == 0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  tmp_1 = check_integer_format(pformatList[index_0]);
  if (tmp_1 == (unsigned int)0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  tmp_2 = snprintf(dest_0,dmax,format,s,a); /* snprintf_va_3 */
  __retres = tmp_2;
  return_label: return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    requires
      \valid(s + (0 .. n - 1)) ∨
      \valid(s + (0 .. format_length(format) - 1));
    assigns \result, *(s + (0 ..));
    assigns \result
      \from (indirect: n), (indirect: *(format + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns *(s + (0 ..))
      \from (indirect: n), (indirect: *(format + (0 ..))), param1,
            *(param0 + (0 ..));
 */
int snprintf_va_4(char * restrict s, size_t n, char const * restrict format,
                  char *param0, long param1);

int snprintf_s_sl(char *dest_0, rsize_t dmax, char const *format, char *s,
                  long a)
{
  int __retres;
  char pformatList[16];
  int tmp_0;
  int tmp_1;
  int tmp_2;
  unsigned int index_0 = (unsigned int)0;
  unsigned int nfo = parse_format(format,pformatList,(unsigned int)16);
  if (nfo != (unsigned int)2) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 410;
    goto return_label;
  }
  if ('s' == (int)pformatList[index_0]) tmp_0 = 1; else tmp_0 = 0;
  if (tmp_0 == 0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  if ('l' == (int)pformatList[index_0]) tmp_1 = 1; else tmp_1 = 0;
  if (tmp_1 == 0) {
    *(dest_0 + 0) = (char)'\000';
    __retres = -1 * 411;
    goto return_label;
  }
  index_0 ++;
  tmp_2 = snprintf(dest_0,dmax,format,s,a); /* snprintf_va_4 */
  __retres = tmp_2;
  return_label: return __retres;
}

__inline static void handle_error_1(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_1(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

char *stpcpy_s(char *dest_0, rsize_t dmax, char const *src, errno_t *err)
{
  char *__retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("stpcpy_s: dest is null",(void *)0,
                                       400);
    *err = 400;
    __retres = (char *)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("stpcpy_s: dmax is 0",(void *)0,401);
    *err = 401;
    __retres = (char *)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("stpcpy_s: dmax exceeds max",
                                       (void *)0,403);
    *err = 403;
    __retres = (char *)0;
    goto return_label;
  }
  if (src == (char const *)0) {
    *dest_0 = (char)'\000';
    invoke_safe_str_constraint_handler("stpcpy_s: src is null",(void *)0,400);
    *err = 400;
    __retres = (char *)0;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 == (void *)src) {
    while (dmax > (rsize_t)0) {
      if ((int)*dest_0 == '\000') {
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
    }
    handle_error_1(orig_dest,orig_dmax,
                   (char *)"stpcpy_s: not enough space for src",406);
    *err = 406;
    __retres = (char *)0;
    goto return_label;
  }
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_1(orig_dest,orig_dmax,
                       (char *)"stpcpy_s: overlapping objects",404);
        *err = 404;
        __retres = (char *)0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_error_1(orig_dest,orig_dmax,
                       (char *)"stpcpy_s: overlapping objects",404);
        *err = 404;
        __retres = (char *)0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_error_1(orig_dest,orig_dmax,
                 (char *)"stpcpy_s: not enough space for src",406);
  *err = 406;
  __retres = (char *)0;
  return_label: return __retres;
}

__inline static void handle_error_2(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_2(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

char *stpncpy_s(char *dest_0, rsize_t dmax, char const *src, rsize_t smax,
                errno_t *err)
{
  char *__retres;
  rsize_t orig_dmax;
  char *orig_dest;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("stpncpy_s: dest is null",(void *)0,
                                       400);
    *err = 400;
    __retres = (char *)0;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("stpncpy_s: src is null",(void *)0,
                                       400);
    *err = 400;
    *(dest_0 + 0) = (char)'\000';
    __retres = (char *)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("stpncpy_s: dmax is 0",(void *)0,401);
    *err = 401;
    __retres = (char *)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("stpncpy_s: dmax exceeds max",
                                       (void *)0,403);
    *err = 403;
    __retres = (char *)0;
    goto return_label;
  }
  if ((unsigned long)smax > 4UL << 10) {
    invoke_safe_str_constraint_handler("stpncpy_s: smax exceeds max",
                                       (void *)0,403);
    *err = 403;
    __retres = (char *)0;
    goto return_label;
  }
  if (dmax < smax + (rsize_t)1) {
    invoke_safe_str_constraint_handler("stpncpy_s: dmax too short for smax",
                                       (void *)0,406);
    *err = 406;
    *(dest_0 + 0) = (char)'\000';
    __retres = (char *)0;
    goto return_label;
  }
  if ((void *)src < (void *)dest_0) 
    if ((void *)(src + smax) >= (void *)dest_0) {
      invoke_safe_str_constraint_handler("stpncpy_s: src+smax overlaps into dest",
                                         (void *)0,404);
      *err = 404;
      *(dest_0 + 0) = (char)'\000';
      __retres = (char *)0;
      goto return_label;
    }
  if ((void *)dest_0 < (void *)src) 
    if ((void *)(dest_0 + smax) >= (void *)src) {
      invoke_safe_str_constraint_handler("stpncpy_s: dest+smax overlaps into src",
                                         (void *)0,404);
      *err = 404;
      *(dest_0 + 0) = (char)'\000';
      __retres = (char *)0;
      goto return_label;
    }
  if (src == (char const *)0) {
    *dest_0 = (char)'\000';
    invoke_safe_str_constraint_handler("stpncpy_s: src is null",(void *)0,
                                       400);
    *err = 400;
    __retres = (char *)0;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 == (void *)src) {
    while (dmax > (rsize_t)0) {
      if ((int)*dest_0 == '\000') {
        char *filler = dest_0;
        while (smax) {
          *filler = (char)'\000';
          dmax --;
          smax --;
          filler ++;
        }
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      smax --;
      if (smax == (rsize_t)0) *dest_0 = (char)'\000';
    }
    handle_error_2(orig_dest,orig_dmax,
                   (char *)"stpncpy_s: not enough space for src",406);
    *err = 406;
    __retres = (char *)0;
    goto return_label;
  }
  while (dmax > (rsize_t)0) {
    *dest_0 = *src;
    if (smax == (rsize_t)0) *dest_0 = (char)'\000';
    if ((int)*dest_0 == '\000') {
      char *filler_0 = dest_0;
      while (smax) {
        *filler_0 = (char)'\000';
        dmax --;
        smax --;
        filler_0 ++;
      }
      *err = 0;
      __retres = dest_0;
      goto return_label;
    }
    dmax --;
    smax --;
    dest_0 ++;
    src ++;
  }
  handle_error_2(orig_dest,orig_dmax,
                 (char *)"stpncpy_s: not enough space for src",406);
  *err = 406;
  __retres = (char *)0;
  return_label: return __retres;
}

__inline static void handle_error_3(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_3(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcasecmp_s(char const *dest_0, rsize_t dmax, char const *src,
                     int *indicator)
{
  errno_t __retres;
  int tmp_1;
  int tmp_2;
  unsigned char const *udest = (unsigned char const *)dest_0;
  unsigned char const *usrc = (unsigned char const *)src;
  if (indicator == (int *)0) {
    invoke_safe_str_constraint_handler("strcasecmp_s: indicator is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *indicator = 0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strcasecmp_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcasecmp_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcasecmp_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcasecmp_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*udest) 
      if (*usrc) {
        if (! dmax) break;
      }
      else break;
    else break;
    {
      int tmp;
      int tmp_0;
      tmp = toupper((int)*udest);
      tmp_0 = toupper((int)*usrc);
      if (tmp != tmp_0) break;
      udest ++;
      usrc ++;
      dmax --;
    }
  }
  tmp_1 = toupper((int)*udest);
  tmp_2 = toupper((int)*usrc);
  *indicator = tmp_1 - tmp_2;
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_4(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_4(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcasestr_s(char *dest_0, rsize_t dmax, char const *src,
                     rsize_t slen, char **substring)
{
  errno_t __retres;
  rsize_t len;
  rsize_t dlen;
  int i;
  if (substring == (char **)0) {
    invoke_safe_str_constraint_handler("strcasestr_s: substring is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *substring = (char *)0;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcasestr_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcasestr_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcasestr_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcasestr_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcasestr_s: slen is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcasestr_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if ((int)*src == '\000') goto _LOR;
  else 
    if ((void *)dest_0 == (void *)src) {
      _LOR: {
              *substring = dest_0;
              __retres = 0;
              goto return_label;
            }
    }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    i = 0;
    len = slen;
    dlen = dmax;
    while (1) {
      if (*(dest_0 + i)) {
        if (! dlen) break;
      }
      else break;
      {
        int tmp;
        int tmp_0;
        tmp = toupper((int)*(dest_0 + i));
        tmp_0 = toupper((int)*(src + i));
        if (tmp != tmp_0) break;
        i ++;
        len --;
        dlen --;
        if ((int)*(src + i) == '\000') goto _LOR_0;
        else 
          if (! len) {
            _LOR_0: {
                      *substring = dest_0;
                      __retres = 0;
                      goto return_label;
                    }
          }
      }
    }
    dest_0 ++;
    dmax --;
  }
  *substring = (char *)0;
  __retres = 409;
  return_label: return __retres;
}

__inline static void handle_error_5(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_5(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcat_s(char *dest_0, rsize_t dmax, char const *src)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcat_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcat_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcat_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcat_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while ((int)*dest_0 != '\000') {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_5(orig_dest,orig_dmax,
                       (char *)"strcat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_error_5(orig_dest,orig_dmax,
                       (char *)"strcat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_5(orig_dest,orig_dmax,
                       (char *)"strcat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while ((int)*dest_0 != '\000') {
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_error_5(orig_dest,orig_dmax,
                       (char *)"strcat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_error_5(orig_dest,orig_dmax,
                       (char *)"strcat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_error_5(orig_dest,orig_dmax,
                 (char *)"strcat_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_6(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_6(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcmp_s(char const *dest_0, rsize_t dmax, char const *src,
                 int *indicator)
{
  errno_t __retres;
  if (indicator == (int *)0) {
    invoke_safe_str_constraint_handler("strcmp_s: indicator is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *indicator = 0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strcmp_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcmp_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcmp_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcmp_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) 
      if (*src) {
        if (! dmax) break;
      }
      else break;
    else break;
    if ((int)*dest_0 != (int)*src) break;
    dest_0 ++;
    src ++;
    dmax --;
  }
  *indicator = (int)*dest_0 - (int)*src;
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_7(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_7(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcmpfld_s(char const *dest_0, rsize_t dmax, char const *src,
                    int *indicator)
{
  errno_t __retres;
  if (indicator == (int *)0) {
    invoke_safe_str_constraint_handler("strcmpfld_s: indicator is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *indicator = 0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strcmpfld_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcmpfld_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcmpfld_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcmpfld_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (dmax) {
    if ((int)*dest_0 != (int)*src) break;
    dest_0 ++;
    src ++;
    dmax --;
  }
  *indicator = (int)*dest_0 - (int)*src;
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_8(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_8(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcpy_s(char *dest_0, rsize_t dmax, char const *src)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcpy_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    *dest_0 = (char)'\000';
    invoke_safe_str_constraint_handler("strcpy_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dest_0 == (void *)src) {
    __retres = 0;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_8(orig_dest,orig_dmax,
                       (char *)"strcpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_error_8(orig_dest,orig_dmax,
                       (char *)"strcpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_error_8(orig_dest,orig_dmax,
                 (char *)"strcpy_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_9(char *orig_dest, rsize_t orig_dmax,
                                    char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_9(wchar_t *orig_dest, rsize_t orig_dmax,
                                       char *err_msg, errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcpyfld_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcpyfld_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcpyfld_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcpyfld_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfld_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfld_s: slen is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if (slen > dmax) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfld_s: src exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (slen > (rsize_t)0) {
      char *tmp;
      char const *tmp_0;
      if ((void *)dest_0 == (void *)overlap_bumper) {
        dmax = orig_dmax;
        dest_0 = orig_dest;
        while (dmax) {
          *dest_0 = (char)'\000';
          dmax --;
          dest_0 ++;
        }
        invoke_safe_str_constraint_handler("strcpyfld_s: overlapping objects",
                                           (void *)0,404);
        __retres = 404;
        goto return_label;
      }
      tmp = dest_0;
      dest_0 ++;
      tmp_0 = src;
      src ++;
      *tmp = *tmp_0;
      slen --;
      dmax --;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (slen > (rsize_t)0) {
      char *tmp_1;
      char const *tmp_2;
      if (src == overlap_bumper) {
        dmax = orig_dmax;
        dest_0 = orig_dest;
        while (dmax) {
          *dest_0 = (char)'\000';
          dmax --;
          dest_0 ++;
        }
        invoke_safe_str_constraint_handler("strcpyfld_s: overlapping objects",
                                           (void *)0,404);
        __retres = 404;
        goto return_label;
      }
      tmp_1 = dest_0;
      dest_0 ++;
      tmp_2 = src;
      src ++;
      *tmp_1 = *tmp_2;
      slen --;
      dmax --;
    }
  }
  while (dmax) {
    *dest_0 = (char)'\000';
    dmax --;
    dest_0 ++;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_10(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_10(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcpyfldin_s(char *dest_0, rsize_t dmax, char const *src,
                      rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcpyfldin_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcpyfldin_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcpyfldin_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldin_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldin_s: slen is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if (slen > dmax) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldin_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (1) {
      if (dmax > (rsize_t)0) {
        if (! *src) break;
      }
      else break;
      {
        char *tmp;
        char const *tmp_0;
        if ((void *)dest_0 == (void *)overlap_bumper) {
          dmax = orig_dmax;
          dest_0 = orig_dest;
          while (dmax) {
            *dest_0 = (char)'\000';
            dmax --;
            dest_0 ++;
          }
          invoke_safe_str_constraint_handler("strcpyfldin_s: overlapping objects",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
        dmax --;
        tmp = dest_0;
        dest_0 ++;
        tmp_0 = src;
        src ++;
        *tmp = *tmp_0;
      }
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (1) {
      if (dmax > (rsize_t)0) {
        if (! *src) break;
      }
      else break;
      {
        char *tmp_1;
        char const *tmp_2;
        if (src == overlap_bumper) {
          dmax = orig_dmax;
          dest_0 = orig_dest;
          while (dmax) {
            *dest_0 = (char)'\000';
            dmax --;
            dest_0 ++;
          }
          invoke_safe_str_constraint_handler("strcpyfldin_s: overlapping objects",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
        dmax --;
        tmp_1 = dest_0;
        dest_0 ++;
        tmp_2 = src;
        src ++;
        *tmp_1 = *tmp_2;
      }
    }
  }
  while (dmax) {
    *dest_0 = (char)'\000';
    dmax --;
    dest_0 ++;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_11(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_11(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcpyfldout_s(char *dest_0, rsize_t dmax, char const *src,
                       rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strcpyfldout_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcpyfldout_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcpyfldout_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldout_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldout_s: slen is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if (slen > dmax) {
    while (dmax) {
      *dest_0 = (char)'\000';
      dmax --;
      dest_0 ++;
    }
    invoke_safe_str_constraint_handler("strcpyfldout_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (1) {
      if (dmax > (rsize_t)1) {
        if (! slen) break;
      }
      else break;
      {
        char *tmp;
        char const *tmp_0;
        if ((void *)dest_0 == (void *)overlap_bumper) {
          dmax = orig_dmax;
          dest_0 = orig_dest;
          while (dmax) {
            *dest_0 = (char)'\000';
            dmax --;
            dest_0 ++;
          }
          invoke_safe_str_constraint_handler("strcpyfldout_s: overlapping objects",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
        dmax --;
        slen --;
        tmp = dest_0;
        dest_0 ++;
        tmp_0 = src;
        src ++;
        *tmp = *tmp_0;
      }
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (1) {
      if (dmax > (rsize_t)1) {
        if (! slen) break;
      }
      else break;
      {
        char *tmp_1;
        char const *tmp_2;
        if (src == overlap_bumper) {
          dmax = orig_dmax;
          dest_0 = orig_dest;
          while (dmax) {
            *dest_0 = (char)'\000';
            dmax --;
            dest_0 ++;
          }
          invoke_safe_str_constraint_handler("strcpyfldout_s: overlapping objects",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
        dmax --;
        slen --;
        tmp_1 = dest_0;
        dest_0 ++;
        tmp_2 = src;
        src ++;
        *tmp_1 = *tmp_2;
      }
    }
  }
  while (dmax) {
    *dest_0 = (char)'\000';
    dmax --;
    dest_0 ++;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_12(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_12(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strcspn_s(char const *dest_0, rsize_t dmax, char const *src,
                  rsize_t slen, rsize_t *count)
{
  errno_t __retres;
  char const *scan2;
  rsize_t smax;
  if (count == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strcspn_s: count is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *count = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strcspn_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strcspn_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcspn_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcspn_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strcspn_s: slen is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strcspn_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    smax = slen;
    scan2 = src;
    while (1) {
      if (*scan2) {
        if (! smax) break;
      }
      else break;
      if ((int)*dest_0 == (int)*scan2) {
        __retres = 0;
        goto return_label;
      }
      scan2 ++;
      smax --;
    }
    (*count) ++;
    dest_0 ++;
    dmax --;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_13(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_13(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strfirstchar_s(char *dest_0, rsize_t dmax, char c, char **first)
{
  errno_t __retres;
  if (first == (char **)0) {
    invoke_safe_str_constraint_handler("strfirstchar_s: index is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *first = (char *)0;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strfirstchar_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strfirstchar_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strfirstchar_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 == (int)c) {
      *first = dest_0;
      __retres = 0;
      goto return_label;
    }
    dest_0 ++;
    dmax --;
  }
  __retres = 409;
  return_label: return __retres;
}

__inline static void handle_error_14(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_14(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strfirstdiff_s(char const *dest_0, rsize_t dmax, char const *src,
                       rsize_t *index_0)
{
  errno_t __retres;
  char const *rp;
  if (index_0 == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strfirstdiff_s: index is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *index_0 = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strfirstdiff_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strfirstdiff_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strfirstdiff_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strfirstdiff_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  rp = dest_0;
  while (1) {
    if (*dest_0) 
      if (*src) {
        if (! dmax) break;
      }
      else break;
    else break;
    if ((int)*dest_0 != (int)*src) {
      *index_0 = (rsize_t)(dest_0 - rp);
      __retres = 0;
      goto return_label;
    }
    dmax --;
    dest_0 ++;
    src ++;
  }
  __retres = 408;
  return_label: return __retres;
}

__inline static void handle_error_15(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_15(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strfirstsame_s(char const *dest_0, rsize_t dmax, char const *src,
                       rsize_t *index_0)
{
  errno_t __retres;
  char const *rp = (char const *)0;
  if (index_0 == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strfirstsame_s: index is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *index_0 = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strfirstsame_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strfirstsame_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strfirstsame_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strfirstsame_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  rp = dest_0;
  while (1) {
    if (*dest_0) 
      if (*src) {
        if (! dmax) break;
      }
      else break;
    else break;
    if ((int)*dest_0 == (int)*src) {
      *index_0 = (uint32_t)(dest_0 - rp);
      __retres = 0;
      goto return_label;
    }
    dest_0 ++;
    src ++;
    dmax --;
  }
  __retres = 409;
  return_label: return __retres;
}

__inline static void handle_error_16(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_16(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strisalphanumeric_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strisalphanumeric_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strisalphanumeric_s: dmax is 0",
                                       (void *)0,401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strisalphanumeric_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 >= '0') {
      if ((int)*dest_0 <= '9') goto _LOR; else goto _LAND_1;
    }
    else {
      _LAND_1: ;
      if ((int)*dest_0 >= 'a') {
        if ((int)*dest_0 <= 'z') goto _LOR; else goto _LAND_0;
      }
      else {
        _LAND_0: ;
        if ((int)*dest_0 >= 'A') {
          if ((int)*dest_0 <= 'Z') {
            _LOR: {
                    dest_0 ++;
                    dmax --;
                  }
          }
          else goto _LAND;
        }
        else {
          _LAND: {
                   __retres = (_Bool)0;
                   goto return_label;
                 }
        }
      }
    }
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_17(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_17(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strisascii_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strisascii_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strisascii_s: dmax is 0",(void *)0,
                                       401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strisascii_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)((unsigned char)*dest_0) > 127) {
      __retres = (_Bool)0;
      goto return_label;
    }
    dest_0 ++;
    dmax --;
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_18(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_18(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strisdigit_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strisdigit_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strisdigit_s: dmax is 0",(void *)0,
                                       401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strisdigit_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (*dest_0) {
    if ((int)*dest_0 < '0') goto _LOR;
    else 
      if ((int)*dest_0 > '9') {
        _LOR: {
                __retres = (_Bool)0;
                goto return_label;
              }
      }
    dest_0 ++;
    dmax --;
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_19(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_19(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strishex_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strishex_s: dest is null",(void *)0,
                                       400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strishex_s: dmax is 0",(void *)0,401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strishex_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 >= '0') {
      if ((int)*dest_0 <= '9') goto _LOR; else goto _LAND_1;
    }
    else {
      _LAND_1: ;
      if ((int)*dest_0 >= 'a') {
        if ((int)*dest_0 <= 'f') goto _LOR; else goto _LAND_0;
      }
      else {
        _LAND_0: ;
        if ((int)*dest_0 >= 'A') {
          if ((int)*dest_0 <= 'F') {
            _LOR: {
                    dest_0 ++;
                    dmax --;
                  }
          }
          else goto _LAND;
        }
        else {
          _LAND: {
                   __retres = (_Bool)0;
                   goto return_label;
                 }
        }
      }
    }
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_20(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_20(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strislowercase_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strislowercase_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strislowercase_s: dmax is 0",
                                       (void *)0,401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strislowercase_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 < 'a') goto _LOR;
    else 
      if ((int)*dest_0 > 'z') {
        _LOR: {
                __retres = (_Bool)0;
                goto return_label;
              }
      }
    dest_0 ++;
    dmax --;
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_21(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_21(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strismixedcase_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strismixedcase_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strismixedcase_s: dmax is 0",
                                       (void *)0,401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strismixedcase_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (*dest_0) 
    if ((int)*dest_0 >= 'a') {
      if ((int)*dest_0 <= 'z') goto _LOR; else goto _LAND_0;
    }
    else {
      _LAND_0: ;
      if ((int)*dest_0 >= 'A') {
        if ((int)*dest_0 <= 'Z') {
          _LOR: {
                  dest_0 ++;
                  dmax --;
                }
        }
        else goto _LAND;
      }
      else {
        _LAND: {
                 __retres = (_Bool)0;
                 goto return_label;
               }
      }
    }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_22(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_22(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strispassword_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  uint32_t cnt_all;
  uint32_t cnt_lowercase;
  uint32_t cnt_uppercase;
  uint32_t cnt_numbers;
  uint32_t cnt_specials;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strispassword_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax < (rsize_t)6) {
    invoke_safe_str_constraint_handler("strispassword_s: dest is too short",
                                       (void *)0,402);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax > (rsize_t)32) {
    invoke_safe_str_constraint_handler("strispassword_s: dest exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  cnt_uppercase = (uint32_t)0;
  cnt_lowercase = cnt_uppercase;
  cnt_all = cnt_lowercase;
  cnt_specials = (uint32_t)0;
  cnt_numbers = cnt_specials;
  while (*dest_0) {
    if (dmax == (rsize_t)0) {
      invoke_safe_str_constraint_handler("strispassword_s: dest is unterminated",
                                         (void *)0,407);
      __retres = (_Bool)0;
      goto return_label;
    }
    dmax --;
    cnt_all ++;
    if ((int)*dest_0 >= '0') {
      if ((int)*dest_0 <= '9') cnt_numbers ++; else goto _LAND_6;
    }
    else {
      _LAND_6: ;
      if ((int)*dest_0 >= 'a') {
        if ((int)*dest_0 <= 'z') cnt_lowercase ++; else goto _LAND_5;
      }
      else {
        _LAND_5: ;
        if ((int)*dest_0 >= 'A') {
          if ((int)*dest_0 <= 'Z') cnt_uppercase ++; else goto _LAND_4;
        }
        else {
          _LAND_4: ;
          if ((int)*dest_0 >= 33) {
            if ((int)*dest_0 <= 47) cnt_specials ++; else goto _LAND_3;
          }
          else {
            _LAND_3: ;
            if ((int)*dest_0 >= 58) {
              if ((int)*dest_0 <= 64) cnt_specials ++; else goto _LAND_2;
            }
            else {
              _LAND_2: ;
              if ((int)*dest_0 >= 91) {
                if ((int)*dest_0 <= 94) cnt_specials ++; else goto _LAND_1;
              }
              else {
                _LAND_1: ;
                if ((int)*dest_0 >= 95) {
                  if ((int)*dest_0 <= 96) cnt_specials ++; else goto _LAND_0;
                }
                else {
                  _LAND_0: ;
                  if ((int)*dest_0 >= 123) {
                    if ((int)*dest_0 <= 126) cnt_specials ++;
                    else goto _LAND;
                  }
                  else {
                    _LAND: {
                             __retres = (_Bool)0;
                             goto return_label;
                           }
                  }
                }
              }
            }
          }
        }
      }
    }
    dest_0 ++;
  }
  if (cnt_all < (uint32_t)32) {
    if (cnt_numbers >= (uint32_t)1) {
      if (cnt_lowercase >= (uint32_t)2) {
        if (cnt_uppercase >= (uint32_t)2) {
          if (cnt_specials >= (uint32_t)1) {
            __retres = (_Bool)1;
            goto return_label;
          }
          else goto _LAND_10;
        }
        else goto _LAND_10;
      }
      else goto _LAND_10;
    }
    else goto _LAND_10;
  }
  else {
    _LAND_10: {
                __retres = (_Bool)0;
                goto return_label;
              }
  }
  return_label: return __retres;
}

__inline static void handle_error_23(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_23(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

_Bool strisuppercase_s(char const *dest_0, rsize_t dmax)
{
  _Bool __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strisuppercase_s: dest is null",
                                       (void *)0,400);
    __retres = (_Bool)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strisuppercase_s: dmax is 0",
                                       (void *)0,401);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strisuppercase_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (_Bool)0;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') {
    __retres = (_Bool)0;
    goto return_label;
  }
  while (*dest_0) {
    if ((int)*dest_0 < 'A') goto _LOR;
    else 
      if ((int)*dest_0 > 'Z') {
        _LOR: {
                __retres = (_Bool)0;
                goto return_label;
              }
      }
    dest_0 ++;
    dmax --;
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

__inline static void handle_error_24(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_24(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strlastchar_s(char *dest_0, rsize_t dmax, char c, char **last)
{
  errno_t __retres;
  if (last == (char **)0) {
    invoke_safe_str_constraint_handler("strlastchar_s: last is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *last = (char *)0;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strlastchar_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strlastchar_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strlastchar_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 == (int)c) *last = dest_0;
    dest_0 ++;
    dmax --;
  }
  if (*last == (char *)0) {
    __retres = 409;
    goto return_label;
  }
  else {
    __retres = 0;
    goto return_label;
  }
  return_label: return __retres;
}

__inline static void handle_error_25(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_25(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strlastdiff_s(char const *dest_0, rsize_t dmax, char const *src,
                      rsize_t *index_0)
{
  errno_t __retres;
  char const *rp;
  _Bool there_is_a_diff = (_Bool)0;
  if (index_0 == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strlastdiff_s: index is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *index_0 = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strlastdiff_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strlastdiff_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strlastdiff_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strlastdiff_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  rp = dest_0;
  while (1) {
    if (*dest_0) 
      if (*src) {
        if (! dmax) break;
      }
      else break;
    else break;
    if ((int)*dest_0 != (int)*src) {
      there_is_a_diff = (_Bool)1;
      *index_0 = (rsize_t)(dest_0 - rp);
    }
    dest_0 ++;
    src ++;
    dmax --;
  }
  if (there_is_a_diff) {
    __retres = 0;
    goto return_label;
  }
  else {
    __retres = 408;
    goto return_label;
  }
  return_label: return __retres;
}

__inline static void handle_error_26(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_26(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strlastsame_s(char const *dest_0, rsize_t dmax, char const *src,
                      rsize_t *index_0)
{
  errno_t __retres;
  char const *rp;
  _Bool similarity;
  if (index_0 == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strlastsame_s: index is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *index_0 = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strlastsame_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strlastsame_s: src is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strlastsame_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strlastsame_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  rp = dest_0;
  similarity = (_Bool)0;
  while (1) {
    if (*dest_0) 
      if (*src) {
        if (! dmax) break;
      }
      else break;
    else break;
    if ((int)*dest_0 == (int)*src) {
      similarity = (_Bool)1;
      *index_0 = (uint32_t)(dest_0 - rp);
    }
    dest_0 ++;
    src ++;
    dmax --;
  }
  if (similarity) {
    __retres = 0;
    goto return_label;
  }
  else {
    __retres = 409;
    goto return_label;
  }
  return_label: return __retres;
}

__inline static void handle_error_27(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_27(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strljustify_s(char *dest_0, rsize_t dmax)
{
  errno_t __retres;
  char *orig_dest;
  rsize_t orig_dmax;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strljustify_s_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strljustify_s_s: dmax is 0",
                                       (void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strljustify_s_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') goto _LOR;
  else 
    if (dmax <= (rsize_t)1) {
      _LOR: {
              *dest_0 = (char)'\000';
              __retres = 0;
              goto return_label;
            }
    }
  orig_dmax = dmax;
  orig_dest = dest_0;
  while (*dest_0) {
    if (dmax == (rsize_t)0) {
      while (orig_dmax) {
        char *tmp;
        tmp = orig_dest;
        orig_dest ++;
        *tmp = (char)'\000';
        orig_dmax --;
      }
      invoke_safe_str_constraint_handler("strljustify_s: dest is unterminated",
                                         (void *)0,407);
      __retres = 407;
      goto return_label;
    }
    dmax --;
    dest_0 ++;
  }
  dest_0 = orig_dest;
  while (1) {
    if (! ((int)*dest_0 == ' ')) 
      if (! ((int)*dest_0 == '\t')) break;
    dest_0 ++;
  }
  if (orig_dest != dest_0) 
    if (*dest_0) {
      while (*dest_0) {
        char *tmp_0;
        char *tmp_1;
        tmp_0 = orig_dest;
        orig_dest ++;
        *tmp_0 = *dest_0;
        tmp_1 = dest_0;
        dest_0 ++;
        *tmp_1 = (char)' ';
      }
      *orig_dest = (char)'\000';
    }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_28(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_28(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strncat_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strncat_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strncat_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strncat_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strncat_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strncat_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while ((int)*dest_0 != '\000') {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_28(orig_dest,orig_dmax,
                        (char *)"strncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_error_28(orig_dest,orig_dmax,
                        (char *)"strncat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_28(orig_dest,orig_dmax,
                        (char *)"strncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (char)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while ((int)*dest_0 != '\000') {
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_error_28(orig_dest,orig_dmax,
                        (char *)"strncat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_error_28(orig_dest,orig_dmax,
                        (char *)"strncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (char)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  handle_error_28(orig_dest,orig_dmax,
                  (char *)"strncat_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_29(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_29(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strncpy_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  char *orig_dest;
  char const *overlap_bumper;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strncpy_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strncpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strncpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if (src == (char const *)0) {
    handle_error_29(orig_dest,orig_dmax,(char *)"strncpy_s: src is null",400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    handle_error_29(orig_dest,orig_dmax,(char *)"strncpy_s: slen is zero",
                    401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    handle_error_29(orig_dest,orig_dmax,
                    (char *)"strncpy_s: slen exceeds max",403);
    __retres = 403;
    goto return_label;
  }
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_error_29(orig_dest,orig_dmax,
                        (char *)"strncpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (char)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (char const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_error_29(orig_dest,orig_dmax,
                        (char *)"strncpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (char)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if ((int)*dest_0 == '\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  handle_error_29(orig_dest,orig_dmax,
                  (char *)"strncpy_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_30(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_30(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

rsize_t strnlen_s(char const *dest_0, rsize_t dmax)
{
  rsize_t __retres;
  rsize_t count;
  if (dest_0 == (char const *)0) {
    __retres = (rsize_t)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strnlen_s: dmax is 0",(void *)0,401);
    __retres = (rsize_t)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strnlen_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (rsize_t)0;
    goto return_label;
  }
  count = (rsize_t)0;
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    count ++;
    dmax --;
    dest_0 ++;
  }
  __retres = count;
  return_label: return __retres;
}

__inline static void handle_error_31(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_31(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

rsize_t strnterminate_s(char *dest_0, rsize_t dmax)
{
  rsize_t __retres;
  rsize_t count;
  if (dest_0 == (char *)0) {
    __retres = (rsize_t)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strnterminate_s: dmax is 0",
                                       (void *)0,401);
    __retres = (rsize_t)0;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strnterminate_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (rsize_t)0;
    goto return_label;
  }
  count = (rsize_t)0;
  while (dmax > (rsize_t)1) 
    if (*dest_0) {
      count ++;
      dmax --;
      dest_0 ++;
    }
    else break;
  *dest_0 = (char)'\000';
  __retres = count;
  return_label: return __retres;
}

__inline static void handle_error_32(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_32(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strpbrk_s(char *dest_0, rsize_t dmax, char *src, rsize_t slen,
                  char **first)
{
  errno_t __retres;
  char *ps;
  rsize_t len;
  if (first == (char **)0) {
    invoke_safe_str_constraint_handler("strpbrk_s: count is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *first = (char *)0;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strpbrk_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char *)0) {
    invoke_safe_str_constraint_handler("strpbrk_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strpbrk_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strpbrk_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strpbrk_s: slen is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strpbrk_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    ps = src;
    len = slen;
    while (*ps) {
      if ((int)*dest_0 == (int)*ps) {
        *first = dest_0;
        __retres = 0;
        goto return_label;
      }
      ps ++;
      len --;
    }
    dest_0 ++;
    dmax --;
  }
  __retres = 409;
  return_label: return __retres;
}

__inline static void handle_error_33(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_33(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strprefix_s(char const *dest_0, rsize_t dmax, char const *src)
{
  errno_t __retres;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strprefix_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strprefix_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strprefix_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strprefix_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if ((int)*src == '\000') {
    __retres = 409;
    goto return_label;
  }
  while (1) {
    if (*src) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 != (int)*src) {
      __retres = 409;
      goto return_label;
    }
    dmax --;
    dest_0 ++;
    src ++;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_34(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_34(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strremovews_s(char *dest_0, rsize_t dmax)
{
  errno_t __retres;
  char *orig_dest;
  char *orig_end;
  rsize_t orig_dmax;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strremovews_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strremovews_s: dmax is 0",(void *)0,
                                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strremovews_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if ((int)*dest_0 == '\000') goto _LOR;
  else 
    if (dmax <= (rsize_t)1) {
      _LOR: {
              *dest_0 = (char)'\000';
              __retres = 0;
              goto return_label;
            }
    }
  orig_dest = dest_0;
  orig_dmax = dmax;
  while (*dest_0) {
    if (dmax == (rsize_t)0) {
      while (orig_dmax) {
        char *tmp;
        tmp = orig_dest;
        orig_dest ++;
        *tmp = (char)'\000';
        orig_dmax --;
      }
      invoke_safe_str_constraint_handler("strremovews_s: dest is unterminated",
                                         (void *)0,407);
      __retres = 407;
      goto return_label;
    }
    dmax --;
    dest_0 ++;
  }
  orig_end = dest_0 - 1;
  dest_0 = orig_dest;
  while (1) {
    if (! ((int)*dest_0 == ' ')) 
      if (! ((int)*dest_0 == '\t')) break;
    dest_0 ++;
  }
  if (orig_dest != dest_0) 
    if (*dest_0) {
      while (*dest_0) {
        char *tmp_0;
        char *tmp_1;
        tmp_0 = orig_dest;
        orig_dest ++;
        *tmp_0 = *dest_0;
        tmp_1 = dest_0;
        dest_0 ++;
        *tmp_1 = (char)' ';
      }
      *dest_0 = (char)'\000';
    }
  dest_0 = orig_end;
  while (1) {
    if (! ((int)*dest_0 == ' ')) 
      if (! ((int)*dest_0 == '\t')) break;
    *dest_0 = (char)'\000';
    dest_0 --;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_35(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_35(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strspn_s(char const *dest_0, rsize_t dmax, char const *src,
                 rsize_t slen, rsize_t *count)
{
  errno_t __retres;
  char const *scan2;
  rsize_t smax;
  _Bool match_found;
  if (count == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strspn_s: count is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *count = (rsize_t)0;
  if (dest_0 == (char const *)0) {
    invoke_safe_str_constraint_handler("strspn_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strspn_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strspn_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strspn_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strspn_s: slen is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strspn_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    match_found = (_Bool)0;
    smax = slen;
    scan2 = src;
    while (1) {
      if (*scan2) {
        if (! smax) break;
      }
      else break;
      if ((int)*dest_0 == (int)*scan2) {
        match_found = (_Bool)1;
        break;
      }
      scan2 ++;
      smax --;
    }
    if (match_found) (*count) ++; else break;
    dest_0 ++;
    dmax --;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_36(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_36(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strstr_s(char *dest_0, rsize_t dmax, char const *src, rsize_t slen,
                 char **substring)
{
  errno_t __retres;
  rsize_t len;
  rsize_t dlen;
  int i;
  if (substring == (char **)0) {
    invoke_safe_str_constraint_handler("strstr_s: substring is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  *substring = (char *)0;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strstr_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strstr_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strstr_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strstr_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strstr_s: slen is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)slen > 4UL << 10) {
    invoke_safe_str_constraint_handler("strstr_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if ((int)*src == '\000') goto _LOR;
  else 
    if ((void *)dest_0 == (void *)src) {
      _LOR: {
              *substring = dest_0;
              __retres = 0;
              goto return_label;
            }
    }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    i = 0;
    len = slen;
    dlen = dmax;
    while (1) {
      if (*(src + i)) {
        if (! dlen) break;
      }
      else break;
      if ((int)*(dest_0 + i) != (int)*(src + i)) break;
      i ++;
      len --;
      dlen --;
      if ((int)*(src + i) == '\000') goto _LOR_0;
      else 
        if (! len) {
          _LOR_0: {
                    *substring = dest_0;
                    __retres = 0;
                    goto return_label;
                  }
        }
    }
    dest_0 ++;
    dmax --;
  }
  *substring = (char *)0;
  __retres = 409;
  return_label: return __retres;
}

__inline static void handle_error_37(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_37(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

char *strtok_s(char *dest_0, rsize_t *dmax, char const *src, char **ptr)
{
  char *__retres;
  char const *pt;
  char *ptoken;
  rsize_t dlen;
  rsize_t slen;
  if (dmax == (rsize_t *)0) {
    invoke_safe_str_constraint_handler("strtok_s: dmax is NULL",(void *)0,
                                       400);
    __retres = (char *)0;
    goto return_label;
  }
  if (*dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strtok_s: dmax is 0",(void *)0,401);
    __retres = (char *)0;
    goto return_label;
  }
  if ((unsigned long)*dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strtok_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (char *)0;
    goto return_label;
  }
  if (src == (char const *)0) {
    invoke_safe_str_constraint_handler("strtok_s: src is null",(void *)0,400);
    __retres = (char *)0;
    goto return_label;
  }
  if (ptr == (char **)0) {
    invoke_safe_str_constraint_handler("strtok_s: ptr is null",(void *)0,400);
    __retres = (char *)0;
    goto return_label;
  }
  if (dest_0 == (char *)0) dest_0 = *ptr;
  dlen = *dmax;
  ptoken = (char *)0;
  while (1) {
    if ((int)*dest_0 != '\000') {
      if (! (! ptoken)) break;
    }
    else break;
    if (dlen == (rsize_t)0) {
      *ptr = (char *)0;
      invoke_safe_str_constraint_handler("strtok_s: dest is unterminated",
                                         (void *)0,407);
      __retres = (char *)0;
      goto return_label;
    }
    slen = (rsize_t)16;
    pt = src;
    while ((int)*pt != '\000') {
      if (slen == (rsize_t)0) {
        *ptr = (char *)0;
        invoke_safe_str_constraint_handler("strtok_s: src is unterminated",
                                           (void *)0,407);
        __retres = (char *)0;
        goto return_label;
      }
      slen --;
      if ((int)*dest_0 == (int)*pt) {
        ptoken = (char *)0;
        break;
      }
      else {
        pt ++;
        ptoken = dest_0;
      }
    }
    dest_0 ++;
    dlen --;
  }
  if (ptoken == (char *)0) {
    *dmax = dlen;
    __retres = ptoken;
    goto return_label;
  }
  while ((int)*dest_0 != '\000') {
    if (dlen == (rsize_t)0) {
      *ptr = (char *)0;
      invoke_safe_str_constraint_handler("strtok_s: dest is unterminated",
                                         (void *)0,407);
      __retres = (char *)0;
      goto return_label;
    }
    slen = (rsize_t)16;
    pt = src;
    while ((int)*pt != '\000') {
      if (slen == (rsize_t)0) {
        *ptr = (char *)0;
        invoke_safe_str_constraint_handler("strtok_s: src is unterminated",
                                           (void *)0,407);
        __retres = (char *)0;
        goto return_label;
      }
      slen --;
      if ((int)*dest_0 == (int)*pt) {
        *dest_0 = (char)'\000';
        *ptr = dest_0 + 1;
        *dmax = dlen - (rsize_t)1;
        __retres = ptoken;
        goto return_label;
      }
      else pt ++;
    }
    dest_0 ++;
    dlen --;
  }
  *dmax = dlen;
  __retres = ptoken;
  return_label: return __retres;
}

__inline static void handle_error_38(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_38(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strtolowercase_s(char *dest_0, rsize_t dmax)
{
  errno_t __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strtolowercase_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strtolowercase_s: dmax is 0",
                                       (void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strtolowercase_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 >= 'A') 
      if ((int)*dest_0 <= 'Z') *dest_0 = (char)((int)*dest_0 + (int)((char)32));
    dest_0 ++;
    dmax --;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_39(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_39(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strtouppercase_s(char *dest_0, rsize_t dmax)
{
  errno_t __retres;
  if (! dest_0) {
    invoke_safe_str_constraint_handler("strtouppercase_s: dest is null",
                                       (void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strtouppercase_s: dmax is 0",
                                       (void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strtouppercase_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    if ((int)*dest_0 >= 'a') 
      if ((int)*dest_0 <= 'z') *dest_0 = (char)((int)*dest_0 - 32);
    dest_0 ++;
    dmax --;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_40(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_40(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t strzero_s(char *dest_0, rsize_t dmax)
{
  errno_t __retres;
  if (dest_0 == (char *)0) {
    invoke_safe_str_constraint_handler("strzero_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("strzero_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 4UL << 10) {
    invoke_safe_str_constraint_handler("strzero_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  while (dmax) {
    *dest_0 = (char)'\000';
    dmax --;
    dest_0 ++;
  }
  __retres = 0;
  return_label: return __retres;
}

__inline static void handle_error_41(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_41(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

wchar_t *wcpcpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  errno_t *err)
{
  wchar_t *__retres;
  rsize_t orig_dmax;
  wchar_t *orig_dest;
  wchar_t const *overlap_bumper;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_str_constraint_handler("wcpcpy_s: dest is null",(void *)0,
                                       400);
    *err = 400;
    __retres = (wchar_t *)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcpcpy_s: dmax is 0",(void *)0,401);
    *err = 401;
    __retres = (wchar_t *)0;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcpcpy_s: dmax exceeds max",
                                       (void *)0,403);
    *err = 403;
    __retres = (wchar_t *)0;
    goto return_label;
  }
  if (src == (wchar_t const *)0) {
    *dest_0 = 0L;
    invoke_safe_str_constraint_handler("wcpcpy_s: src is null",(void *)0,400);
    *err = 400;
    __retres = (wchar_t *)0;
    goto return_label;
  }
  if ((void *)dest_0 == (void *)src) {
    while (1) {
      if (dmax) {
        if (! (*dest_0 != 0L)) break;
      }
      else break;
      dmax --;
      dest_0 ++;
    }
    if (*dest_0 != 0L) {
      invoke_safe_str_constraint_handler("wcpcpy_s: no null terminator in dest",
                                         (void *)0,403);
      *err = 403;
      __retres = (wchar_t *)0;
      goto return_label;
    }
    *err = 0;
    __retres = dest_0;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_41(orig_dest,orig_dmax,
                           (char *)"wcpcpy_s: overlapping objects",404);
        *err = 404;
        __retres = (wchar_t *)0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (wchar_t const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_wc_error_41(orig_dest,orig_dmax,
                           (char *)"wcpcpy_s: overlapping objects",404);
        *err = 404;
        __retres = (wchar_t *)0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        *err = 0;
        __retres = dest_0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_wc_error_41(orig_dest,orig_dmax,
                     (char *)"wcpcpy_s: not enough space for src",406);
  *err = 406;
  __retres = (wchar_t *)0;
  return_label: return __retres;
}

__inline static void handle_error_42(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_42(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t wcscat_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src)
{
  errno_t __retres;
  rsize_t orig_dmax;
  wchar_t *orig_dest;
  wchar_t const *overlap_bumper;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_str_constraint_handler("wcscat_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (wchar_t const *)0) {
    invoke_safe_str_constraint_handler("wcscat_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcscat_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcscat_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (*dest_0 != 0L) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_42(orig_dest,orig_dmax,
                           (char *)"wcscat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_wc_error_42(orig_dest,orig_dmax,
                           (char *)"wcscat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_42(orig_dest,orig_dmax,
                           (char *)"wcscat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (wchar_t const *)dest_0;
    while (*dest_0 != 0L) {
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_wc_error_42(orig_dest,orig_dmax,
                           (char *)"wcscat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_wc_error_42(orig_dest,orig_dmax,
                           (char *)"wcscat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_wc_error_42(orig_dest,orig_dmax,
                     (char *)"wcscat_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_43(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_43(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t wcscpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src)
{
  errno_t __retres;
  rsize_t orig_dmax;
  wchar_t *orig_dest;
  wchar_t const *overlap_bumper;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_str_constraint_handler("wcscpy_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcscpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcscpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (src == (wchar_t const *)0) {
    *dest_0 = (wchar_t)'\000';
    invoke_safe_str_constraint_handler("wcscpy_s: src is null",(void *)0,400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dest_0 == (void *)src) {
    while (1) {
      if (*src != 0L) {
        if (! (dmax != (rsize_t)0)) break;
      }
      else break;
      src ++;
      dmax --;
    }
    if (*src != 0L) {
      invoke_safe_str_constraint_handler("wcscpy_s: src exceeds dmax",
                                         (void *)0,403);
      __retres = 403;
      goto return_label;
    }
    __retres = 0;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_43(orig_dest,orig_dmax,
                           (char *)"wcscpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == (wchar_t)'\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (wchar_t const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_wc_error_43(orig_dest,orig_dmax,
                           (char *)"wcscpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == (wchar_t)'\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      dest_0 ++;
      src ++;
    }
  }
  handle_wc_error_43(orig_dest,orig_dmax,
                     (char *)"wcscpy_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_44(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_44(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t wcsncat_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  wchar_t *orig_dest;
  wchar_t const *overlap_bumper;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_str_constraint_handler("wcsncat_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (wchar_t const *)0) {
    invoke_safe_str_constraint_handler("wcsncat_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if ((unsigned long)(slen * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcsncat_s: slen exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcsncat_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcsncat_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (*dest_0 != 0L) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_44(orig_dest,orig_dmax,
                           (char *)"wcsncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_wc_error_44(orig_dest,orig_dmax,
                           (char *)"wcsncat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_44(orig_dest,orig_dmax,
                           (char *)"wcsncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = 0L;
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (wchar_t const *)dest_0;
    while (*dest_0 != 0L) {
      dest_0 ++;
      dmax --;
      if (dmax == (rsize_t)0) {
        handle_wc_error_44(orig_dest,orig_dmax,
                           (char *)"wcsncat_s: dest unterminated",407);
        __retres = 407;
        goto return_label;
      }
    }
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_wc_error_44(orig_dest,orig_dmax,
                           (char *)"wcsncat_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = 0L;
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == 0L) {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  handle_wc_error_44(orig_dest,orig_dmax,
                     (char *)"wcsncat_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_45(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_45(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

errno_t wcsncpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t slen)
{
  errno_t __retres;
  rsize_t orig_dmax;
  wchar_t *orig_dest;
  wchar_t const *overlap_bumper;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_str_constraint_handler("wcsncpy_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcsncpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcsncpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  orig_dmax = dmax;
  orig_dest = dest_0;
  if (src == (wchar_t const *)0) {
    handle_wc_error_45(orig_dest,orig_dmax,(char *)"wcsncpy_s: src is null",
                       400);
    __retres = 400;
    goto return_label;
  }
  if (slen == (rsize_t)0) {
    handle_wc_error_45(orig_dest,orig_dmax,(char *)"wcsncpy_s: slen is zero",
                       401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(slen * sizeof(wchar_t)) > 4UL << 10) {
    handle_wc_error_45(orig_dest,orig_dmax,
                       (char *)"wcsncpy_s: slen exceeds max",403);
    __retres = 403;
    goto return_label;
  }
  if ((void *)dest_0 < (void *)src) {
    overlap_bumper = src;
    while (dmax > (rsize_t)0) {
      if ((void *)dest_0 == (void *)overlap_bumper) {
        handle_wc_error_45(orig_dest,orig_dmax,
                           (char *)"wcsncpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (wchar_t)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == (wchar_t)'\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  else {
    overlap_bumper = (wchar_t const *)dest_0;
    while (dmax > (rsize_t)0) {
      if (src == overlap_bumper) {
        handle_wc_error_45(orig_dest,orig_dmax,
                           (char *)"wcsncpy_s: overlapping objects",404);
        __retres = 404;
        goto return_label;
      }
      if (slen == (rsize_t)0) {
        *dest_0 = (wchar_t)'\000';
        __retres = 0;
        goto return_label;
      }
      *dest_0 = *src;
      if (*dest_0 == (wchar_t)'\000') {
        __retres = 0;
        goto return_label;
      }
      dmax --;
      slen --;
      dest_0 ++;
      src ++;
    }
  }
  handle_wc_error_45(orig_dest,orig_dmax,
                     (char *)"wcsncpy_s: not enough space for src",406);
  __retres = 406;
  return_label: return __retres;
}

__inline static void handle_error_46(char *orig_dest, rsize_t orig_dmax,
                                     char *err_msg, errno_t err_code)
{
  *orig_dest = (char)'\000';
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

__inline static void handle_wc_error_46(wchar_t *orig_dest,
                                        rsize_t orig_dmax, char *err_msg,
                                        errno_t err_code)
{
  *orig_dest = 0L;
  invoke_safe_str_constraint_handler((char const *)err_msg,(void *)0,
                                     err_code);
  return;
}

rsize_t wcsnlen_s(wchar_t const *dest_0, rsize_t dmax)
{
  rsize_t __retres;
  rsize_t count;
  if (dest_0 == (wchar_t const *)0) {
    __retres = (rsize_t)0;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_str_constraint_handler("wcsnlen_s: dmax is 0",(void *)0,401);
    __retres = (rsize_t)0;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 4UL << 10) {
    invoke_safe_str_constraint_handler("wcsnlen_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = (rsize_t)0;
    goto return_label;
  }
  count = (rsize_t)0;
  while (1) {
    if (*dest_0) {
      if (! dmax) break;
    }
    else break;
    count ++;
    dmax --;
    dest_0 ++;
  }
  __retres = count;
  return_label: return __retres;
}

errno_t wmemcmp_s(wchar_t const *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t smax, int *diff)
{
  errno_t __retres;
  if (diff == (int *)0) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: diff is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  *diff = -1;
  if (dest_0 == (wchar_t const *)0) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (src == (wchar_t const *)0) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > (256UL << 20) / (unsigned long)4) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    invoke_safe_mem_constraint_handler("wmemcmp_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (dest_0 == src) {
    *diff = 0;
    __retres = 0;
    goto return_label;
  }
  *diff = 0;
  while (1) {
    if (dmax != (rsize_t)0) {
      if (! (smax != (rsize_t)0)) break;
    }
    else break;
    if (*dest_0 != *src) {
      *diff = (int)(*dest_0 - *src);
      break;
    }
    dmax --;
    smax --;
    dest_0 ++;
    src ++;
  }
  __retres = 0;
  return_label: return __retres;
}

errno_t wmemcpy_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                  rsize_t smax)
{
  errno_t __retres;
  wchar_t *dp;
  wchar_t const *sp;
  dp = dest_0;
  sp = src;
  if (dp == (wchar_t *)0) {
    invoke_safe_mem_constraint_handler("wmemcpy_s: dest is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("wmemcpy_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)dmax > 256UL << 20) {
    invoke_safe_mem_constraint_handler("wmemcpy_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemcpy_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemcpy_s: smax exceeds dmax",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (wchar_t const *)0) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemcpy_s: src is NULL",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if ((void *)dp > (void *)sp) {
    if ((void *)dp < (void *)(sp + smax)) goto _LOR; else goto _LAND;
  }
  else {
    _LAND: ;
    if ((void *)sp > (void *)dp) 
      if ((void *)sp < (void *)(dp + dmax)) {
        _LOR:
        {
          mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
          invoke_safe_mem_constraint_handler("wmemcpy_s: overlap undefined",
                                             (void *)0,404);
          __retres = 404;
          goto return_label;
        }
      }
  }
  mem_prim_move((void *)dp,(void const *)sp,smax * sizeof(wchar_t));
  __retres = 0;
  return_label: return __retres;
}

errno_t wmemmove_s(wchar_t *dest_0, rsize_t dmax, wchar_t const *src,
                   rsize_t smax)
{
  errno_t __retres;
  wchar_t *dp;
  wchar_t const *sp;
  dp = dest_0;
  sp = src;
  if (dp == (wchar_t *)0) {
    invoke_safe_mem_constraint_handler("wmemmove_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (dmax == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("wmemmove_s: dmax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(dmax * sizeof(wchar_t)) > 256UL << 20) {
    invoke_safe_mem_constraint_handler("wmemmove_s: dmax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (smax == (rsize_t)0) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemmove_s: smax is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if (smax > dmax) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemmove_s: smax exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  if (sp == (wchar_t const *)0) {
    mem_prim_set((void *)dp,dmax * sizeof(wchar_t),(uint8_t)0);
    invoke_safe_mem_constraint_handler("wmemmove_s: src is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  mem_prim_move((void *)dp,(void const *)sp,smax * sizeof(wchar_t));
  __retres = 0;
  return_label: return __retres;
}

errno_t wmemset_s(wchar_t *dest_0, wchar_t value, rsize_t len)
{
  errno_t __retres;
  if (dest_0 == (wchar_t *)0) {
    invoke_safe_mem_constraint_handler("wmemset_s: dest is null",(void *)0,
                                       400);
    __retres = 400;
    goto return_label;
  }
  if (len == (rsize_t)0) {
    invoke_safe_mem_constraint_handler("wmemset_s: len is 0",(void *)0,401);
    __retres = 401;
    goto return_label;
  }
  if ((unsigned long)(len * sizeof(wchar_t)) > 256UL << 20) {
    invoke_safe_mem_constraint_handler("wmemset_s: len exceeds max",
                                       (void *)0,403);
    __retres = 403;
    goto return_label;
  }
  mem_prim_set32((uint32_t *)dest_0,len,(uint32_t)value);
  __retres = 0;
  return_label: return __retres;
}

int test_memcmp_s(void);

int test_memcmp16_s(void);

int test_memcmp32_s(void);

int test_memcpy_s(void);

int test_memcpy16_s(void);

int test_memcpy32_s(void);

int test_memmove_s(void);

int test_memmove16_s(void);

int test_memmove32_s(void);

int test_memset_s(void);

int test_memset16_s(void);

int test_memset32_s(void);

int test_memzero_s(void);

int test_memzero16_s(void);

int test_memzero32_s(void);

int test_strcasecmp_s(void);

int test_strcasestr_s(void);

int test_strcat_s(void);

int test_strcmp_s(void);

int test_strcmpfld_s(void);

int test_strcpy_s(void);

int test_strcpyfld_s(void);

int test_strcpyfldin_s(void);

int test_strcpyfldout_s(void);

int test_strcspn_s(void);

int test_strfirstchar_s(void);

int test_strfirstdiff_s(void);

int test_strfirstsame_s(void);

int test_strisalphanumeric_s(void);

int test_strisascii_s(void);

int test_strisdigit_s(void);

int test_strishex_s(void);

int test_strislowercase_s(void);

int test_strismixed_s(void);

int test_strispassword_s(void);

int test_strisuppercase_s(void);

int test_strlastchar_s(void);

int test_strlastdiff_s(void);

int test_strlastsame_s(void);

int test_strljustify_s(void);

int test_strncat_s(void);

int test_strncpy_s(void);

int test_strnlen_s(void);

int test_strnterminate_s(void);

int test_strpbrk_s(void);

int test_strprefix_s(void);

int test_strremovews_s(void);

int test_strspn_s(void);

int test_strstr_s(void);

int test_strtok_s(void);

int test_strtolowercase_s(void);

int test_strtouppercase_s(void);

int test_strzero_s(void);

int test_stpncpy_s(void);

int test_stpcpy_s(void);

int test_wcpcpy_s(void);

int test_wcscat_s(void);

int test_wcscpy_s(void);

int test_wcsncat_s(void);

int test_wcsncpy_s(void);

int test_wcsnlen_s(void);

int test_wmemcpy_s(void);

int test_wmemmove_s(void);

int test_wmemset_s(void);

int test_wmemcmp_s(void);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

int main(void)
{
  int __retres;
  char dest_0[128];
  char src[128];
  errno_t err;
  rsize_t dmax = (rsize_t)128;
  rsize_t smax = (rsize_t)21;
  puts("!!!Basic Test Suite for Safe String Operations!!!");
  puts("       ERRORS PRINT TO CONSOLE");
  puts("----------------BEGIN TEST--------------------");
  test_memcmp_s();
  test_memcmp16_s();
  test_memcmp32_s();
  test_memcpy_s();
  test_memcpy16_s();
  test_memcpy32_s();
  test_memmove_s();
  test_memmove16_s();
  test_memmove32_s();
  test_memset_s();
  test_memset16_s();
  test_memset32_s();
  test_memzero_s();
  test_memzero16_s();
  test_memzero32_s();
  test_stpcpy_s();
  test_stpncpy_s();
  test_strcasecmp_s();
  test_strcasestr_s();
  test_strcat_s();
  test_strcmp_s();
  test_strcmpfld_s();
  test_strcpy_s();
  test_strcpyfld_s();
  test_strcpyfldin_s();
  test_strcpyfldout_s();
  test_strcspn_s();
  test_strfirstchar_s();
  test_strfirstdiff_s();
  test_strfirstsame_s();
  test_strisalphanumeric_s();
  test_strisascii_s();
  test_strisdigit_s();
  test_strishex_s();
  test_strislowercase_s();
  test_strismixed_s();
  test_strispassword_s();
  test_strisuppercase_s();
  test_strlastchar_s();
  test_strlastdiff_s();
  test_strlastsame_s();
  test_strljustify_s();
  test_strncat_s();
  test_strncpy_s();
  test_strnlen_s();
  test_strnterminate_s();
  test_strpbrk_s();
  test_strprefix_s();
  test_strremovews_s();
  test_strspn_s();
  test_strstr_s();
  test_strtok_s();
  test_strtolowercase_s();
  test_strtouppercase_s();
  test_strzero_s();
  test_wcpcpy_s();
  test_wcscat_s();
  test_wcscpy_s();
  test_wcsncat_s();
  test_wcsncpy_s();
  test_wcsnlen_s();
  test_wmemcpy_s();
  test_wmemmove_s();
  test_wmemset_s();
  test_wmemcmp_s();
  char str[21] =
    {(char)'T',
     (char)'h',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'i',
     (char)'s',
     (char)' ',
     (char)'a',
     (char)' ',
     (char)'c',
     (char)'h',
     (char)'a',
     (char)'r',
     (char)' ',
     (char)'a',
     (char)'r',
     (char)'r',
     (char)'a',
     (char)'y',
     (char)'\000'};
  char str2_16[20] =
    {(char)'.',
     (char)'.',
     (char)'.',
     (char)'A',
     (char)'n',
     (char)'d',
     (char)' ',
     (char)'a',
     (char)'n',
     (char)'o',
     (char)'t',
     (char)'h',
     (char)'e',
     (char)'r',
     (char)' ',
     (char)'o',
     (char)'n',
     (char)'e',
     (char)'.',
     (char)'\000'};
  int indicator = -1;
  strcpy_s(dest_0,dmax,(char const *)(str));
  char *ret =
    stpcpy_s(& dest_0[20],(rsize_t)108,(char const *)(str2_16),& err);
  if (err != 0) puts("stpcpy_s returned failure");
  int val = 55;
  err = snprintf_s_si(src,(rsize_t)128,
                      "Test sprintf_s_si() with simple format string [%s] and %d",
                      dest_0,val);
  if (err < 0) 
    if (-1 * 410 == err) puts("snprintf_s_si returned failure: Error Bad Format String.");
    else 
      if (-1 * 411 == err) puts("snprintf_s_si returned failure: Error Bad Argument Type for format string.");
      else printf("snprintf_s_si failed with unknown error: %d\n",err); /* printf_va_3 */
  else {
    errno_t tmp_0;
    tmp_0 = strcmp_s((char const *)(src),smax,
                     "Test sprintf_s_si() with simple format string [This is a char array...And another one.] and 55",
                     & indicator);
    if (tmp_0 != 0) goto _LOR;
    else 
      if (indicator != 0) {
        _LOR:
        {
          puts("snprintf_s_si() failed - output was:");
          puts((char const *)(src));
        }
      }
  }
  puts("----------------END TEST--------------------");
  __retres = 0;
  return __retres;
}

int test_memcmp16_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  int32_t ind;
  int32_t std_ind;
  uint32_t i;
  uint16_t mem1_6[128];
  uint16_t mem2_4[128];
  rc = memcmp16_s((uint16_t const *)0,(rsize_t)128,
                  (uint16_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)0,(rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)(mem2_4),(rsize_t)128,(int *)0);
  if (rc != 400) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)0,
                  (uint16_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 401) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)(mem2_4),(rsize_t)0,& ind);
  if (rc != 401) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),
                  (rsize_t)((256UL << 20) + (unsigned long)1),
                  (uint16_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 403) ;
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) + (unsigned long)1),& ind);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (uint16_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (uint16_t)i;
    i ++;
  }
  len = (uint32_t)1;
  rc = memcmp16_s((uint16_t const *)(mem1_6),len,(uint16_t const *)(mem2_4),
                  len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   len * (uint32_t)2);
  if (ind != std_ind) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (uint16_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (uint16_t)i;
    i ++;
  }
  len = (uint32_t)2;
  rc = memcmp16_s((uint16_t const *)(mem1_6),len,(uint16_t const *)(mem2_4),
                  len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   len * (uint32_t)2);
  if (ind != std_ind) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (uint16_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (uint16_t)i;
    i ++;
  }
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   (size_t)(128 * 2));
  if (ind != std_ind) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (uint16_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (uint16_t)i;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(128 - 10)) {
    mem2_4[i] = (uint16_t)5;
    i ++;
  }
  rc = memcmp16_s((uint16_t const *)(mem1_6),(rsize_t)128,
                  (uint16_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) ;
  if (ind == 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   (size_t)(128 * 2));
  if (ind != std_ind) ;
  __retres = 0;
  return __retres;
}

int test_memcmp32_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  int32_t ind;
  int32_t std_ind;
  uint32_t i;
  uint32_t mem1_6[128];
  uint32_t mem2_4[128];
  rc = memcmp32_s((uint32_t const *)0,(rsize_t)128,
                  (uint32_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)0,(rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)(mem2_4),(rsize_t)128,(int *)0);
  if (rc != 400) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)0,
                  (uint32_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 401) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)(mem2_4),(rsize_t)0,& ind);
  if (rc != 401) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),
                  (rsize_t)((256UL << 20) + (unsigned long)1),
                  (uint32_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 403) ;
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) + (unsigned long)1),& ind);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = i;
    i ++;
  }
  len = (uint32_t)1;
  rc = memcmp32_s((uint32_t const *)(mem1_6),len,(uint32_t const *)(mem2_4),
                  len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   len * (uint32_t)4);
  if (ind != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = i;
    i ++;
  }
  len = (uint32_t)2;
  rc = memcmp32_s((uint32_t const *)(mem1_6),len,(uint32_t const *)(mem2_4),
                  len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
                   len * (uint32_t)4);
  if (ind != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = i;
    i ++;
  }
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
               (size_t)(128 * 4));
  if (ind != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = i;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(128 - 10)) {
    mem2_4[i] = (uint32_t)5;
    i ++;
  }
  rc = memcmp32_s((uint32_t const *)(mem1_6),(rsize_t)128,
                  (uint32_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) ;
  if (ind == 0) ;
  __retres = 0;
  return __retres;
}

static uint8_t mem1[128];
static uint8_t mem2[128];
int test_memcmp_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  int32_t std_ind;
  uint32_t len;
  rc = memcmp_s((void const *)0,(rsize_t)128,(void const *)(mem2),
                (rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp_s((void const *)(mem1),(rsize_t)128,(void const *)0,
                (rsize_t)128,& ind);
  if (rc != 400) ;
  rc = memcmp_s((void const *)(mem1),(rsize_t)128,(void const *)(mem2),
                (rsize_t)128,(int *)0);
  if (rc != 400) ;
  rc = memcmp_s((void const *)(mem1),(rsize_t)0,(void const *)(mem2),
                (rsize_t)128,& ind);
  if (rc != 401) ;
  rc = memcmp_s((void const *)(mem1),(rsize_t)128,(void const *)(mem2),
                (rsize_t)0,& ind);
  if (rc != 401) ;
  rc = memcmp_s((void const *)(mem1),(rsize_t)128,(void const *)(mem2),
                (rsize_t)((256UL << 20) + (unsigned long)1),& ind);
  if (rc != 403) ;
  rc = memcmp_s((void const *)(mem1),
                (rsize_t)((256UL << 20) + (unsigned long)1),
                (void const *)(mem2),(rsize_t)128,& ind);
  if (rc != 403) ;
  len = (uint32_t)1;
  memset((void *)(mem1),55,len);
  memset((void *)(mem2),55,len);
  rc = memcmp_s((void const *)(mem1),len,(void const *)(mem2),len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1),(void const *)(mem2),len);
  if (ind != std_ind) ;
  len = (uint32_t)2;
  memset((void *)(mem1),55,(size_t)128);
  memset((void *)(mem2),55,(size_t)128);
  rc = memcmp_s((void const *)(& mem1[1]),len,(void const *)(& mem2[1]),len,
                & ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1),(void const *)(mem2),len);
  if (ind != std_ind) ;
  len = (uint32_t)32;
  memset((void *)(mem1),55,len);
  memset((void *)(mem2),55,len);
  rc = memcmp_s((void const *)(mem1),len,(void const *)(mem2),len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  std_ind = memcmp((void const *)(mem1),(void const *)(mem2),len);
  if (ind != std_ind) ;
  len = (uint32_t)32;
  memset((void *)(mem1),55,len);
  memset((void *)(mem2),55,len);
  memset((void *)(& mem2[len / (uint32_t)2]),35,len);
  rc = memcmp_s((void const *)(mem1),len,(void const *)(mem2),len,& ind);
  if (rc != 0) ;
  if (ind < 1) ;
  len = (uint32_t)32;
  memset((void *)(mem1),55,len);
  memset((void *)(mem2),55,len);
  memset((void *)(& mem2[len / (uint32_t)2]),65,len);
  rc = memcmp_s((void const *)(mem1),len,(void const *)(mem2),len,& ind);
  if (rc != 0) ;
  if (ind > -1) ;
  len = (uint32_t)3;
  memset((void *)(mem1),55,len);
  memset((void *)(mem2),55,len);
  rc = memcmp_s((void const *)(mem1),len,(void const *)(mem2),len,& ind);
  if (rc != 0) ;
  if (ind != 0) ;
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_4(char const * restrict format, int param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_5(char const * restrict format, int param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_6(char const * restrict format, int param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_7(char const * restrict format, int param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_8(char const * restrict format, int param0, int param1,
                int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_9(char const * restrict format, int param0, int param1,
                int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_10(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_11(char const * restrict format, int param0, int param1,
                 int param2, int param3);

int test_memcpy16_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  uint16_t mem1_6[1024];
  uint16_t mem2_4[1024];
  rc = memcpy16_s((uint16_t *)0,(rsize_t)1024,(uint16_t const *)(mem2_4),
                  (rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy16_s(mem1_6,(rsize_t)0,(uint16_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 401) ;
  rc = memcpy16_s(mem1_6,
                  (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1),
                  (uint16_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)0,(rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy16_s(mem1_6,(rsize_t)10,(uint16_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)1;
  rc = memcpy16_s(mem1_6,len,(uint16_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)mem2_4[i]) printf("%d - %d m1=%d  m2=%d  \n",
                                                 86,(int)i,(int)mem1_6[i],
                                                 (int)mem2_4[i]); /* printf_va_4 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)2;
  rc = memcpy16_s(mem1_6,len,(uint16_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)mem2_4[i]) printf("%d - %d m1=%d  m2=%d  \n",
                                                 105,(int)i,(int)mem1_6[i],
                                                 (int)mem2_4[i]); /* printf_va_5 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)(1024 / 2),(uint16_t const *)(mem2_4),
                  (rsize_t)1024);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 / 2)) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",125,(int)i,
                                    (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_6 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",144,(int)i,
                                    (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_7 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",163,(int)i,
                                    (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_8 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)55;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)65;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem1_6),
                  (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)100) {
    mem1_6[i] = (uint16_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)100) {
    mem1_6[i] = (uint16_t)35;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)100,(uint16_t const *)(& mem1_6[10]),
                  (rsize_t)100);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < (uint32_t)100) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d  \n",195,(int)i,
                                    (int)mem1_6[i]); /* printf_va_9 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)100) {
    mem1_6[i] = (uint16_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)100) {
    mem1_6[i] = (uint16_t)45;
    i ++;
  }
  rc = memcpy16_s(& mem1_6[10],(rsize_t)100,(uint16_t const *)(mem1_6),
                  (rsize_t)100);
  if (rc != 404) ;
  i = (uint32_t)10;
  while (i < (uint32_t)100) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d  \n",215,(int)i,
                                    (int)mem1_6[i]); /* printf_va_10 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  rc = memcpy16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem2_4),
                  (rsize_t)(1024 / 2));
  if (rc != 0) ;
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 / 2)) {
    if ((int)mem1_6[i] != 44) printf("%d - %d m1=%d  m2=%d  \n",233,(int)i,
                                     (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_11 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_12(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_13(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_14(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_15(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_16(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_17(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_18(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_19(char const * restrict format, int param0, int param1,
                 int param2, int param3);

int test_memcpy32_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  uint32_t mem1_6[1024];
  uint32_t mem2_4[1024];
  rc = memcpy32_s((uint32_t *)0,(rsize_t)1024,(uint32_t const *)(mem2_4),
                  (rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy32_s(mem1_6,(rsize_t)0,(uint32_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 401) ;
  rc = memcpy32_s(mem1_6,
                  (rsize_t)((256UL << 20) / (unsigned long)4 + (unsigned long)1),
                  (uint32_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)0,(rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy32_s(mem1_6,(rsize_t)10,(uint32_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) / (unsigned long)4 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)1;
  rc = memcpy32_s(mem1_6,len,(uint32_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != mem2_4[i]) printf("%d - %d m1=%d  m2=%d  \n",85,(int)i,
                                       (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_12 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)2;
  rc = memcpy32_s(mem1_6,len,(uint32_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != mem2_4[i]) printf("%d - %d m1=%d  m2=%d  \n",104,(int)i,
                                       (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_13 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)(1024 / 2),(uint32_t const *)(mem2_4),
                  (rsize_t)1024);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 / 2)) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d  m2=%d  \n",124,
                                         (int)i,(int)mem1_6[i],
                                         (int)mem2_4[i]); /* printf_va_14 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d  m2=%d  \n",143,
                                         (int)i,(int)mem1_6[i],
                                         (int)mem2_4[i]); /* printf_va_15 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem2_4),
                  (rsize_t)((256UL << 20) / (unsigned long)4 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d  m2=%d  \n",162,
                                         (int)i,(int)mem1_6[i],
                                         (int)mem2_4[i]); /* printf_va_16 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)25;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)35;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem1_6),
                  (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)25;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)35;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)100,(uint32_t const *)(& mem1_6[10]),
                  (rsize_t)100);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < (uint32_t)100) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d  m2=%d  \n",194,
                                         (int)i,(int)mem1_6[i],
                                         (int)mem2_4[i]); /* printf_va_17 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)65;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)75;
    i ++;
  }
  rc = memcpy32_s(& mem1_6[10],(rsize_t)100,(uint32_t const *)(mem1_6),
                  (rsize_t)100);
  if (rc != 404) ;
  i = (uint32_t)10;
  while (i < (uint32_t)100) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d  m2=%d  \n",214,
                                         (int)i,(int)mem1_6[i],
                                         (int)mem2_4[i]); /* printf_va_18 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)65;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)75;
    i ++;
  }
  rc = memcpy32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem2_4),
                  (rsize_t)(1024 / 2));
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 / 2)) {
    if (mem1_6[i] != (uint32_t)75) printf("%d - %d m1=%d  m2=%d  \n",232,
                                          (int)i,(int)mem1_6[i],
                                          (int)mem2_4[i]); /* printf_va_19 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

static uint8_t mem1_0[1024 + 2];
static uint8_t mem2_0[1024 + 2];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_20(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_21(char const * restrict format, int param0, size_t param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_22(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_23(char const * restrict format, int param0, size_t param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_24(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_25(char const * restrict format, int param0, size_t param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_26(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_27(char const * restrict format, int param0, size_t param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_28(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_29(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_30(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_31(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_32(char const * restrict format, int param0, int param1,
                 int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_33(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_34(char const * restrict format, int param0, int param1,
                 int param2, int param3);

int test_memcpy_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  rc = memcpy_s((void *)0,(rsize_t)1024,(void const *)(mem2_0),(rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy_s((void *)(mem1_0),(rsize_t)0,(void const *)(mem2_0),
                (rsize_t)1024);
  if (rc != 401) ;
  rc = memcpy_s((void *)(mem1_0),(rsize_t)((256UL << 20) + (unsigned long)1),
                (void const *)(mem2_0),(rsize_t)1024);
  if (rc != 403) ;
  rc = memcpy_s((void *)(mem1_0),(rsize_t)1024,(void const *)0,(rsize_t)1024);
  if (rc != 400) ;
  rc = memcpy_s((void *)(mem1_0),(rsize_t)10,(void const *)(mem2_0),
                (rsize_t)0);
  if (rc != 401) ;
  rc = memcpy_s((void *)(mem1_0),(rsize_t)1024,(void const *)(mem2_0),
                (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 + 1)) {
    mem1_0[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)44;
    i ++;
  }
  len = (rsize_t)1024;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),len);
  if (! (rc != 0)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != (int)mem2_0[i]) printf("%d - %d m1=%d  m2=%d  \n",
                                                   85,(int)i,(int)mem1_0[i],
                                                   (int)mem2_0[i]); /* printf_va_20 */
      i ++;
    }
    if ((int)mem1_0[i] != 33) printf("%d - %zu m1=%d  m2=%d  \n",91,len,
                                     (int)mem1_0[len],(int)mem2_0[len]); /* printf_va_21 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 + 1)) {
    mem1_0[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)44;
    i ++;
  }
  len = (rsize_t)1024;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),len + (rsize_t)1);
  if (! (rc == 0)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",112,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_22 */
      i ++;
    }
    if ((int)mem1_0[i] != 33) printf("%d - %zu m1=%d  m2=%d  \n",118,len,
                                     (int)mem1_0[len],(int)mem2_0[len]); /* printf_va_23 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 + 2)) {
    mem1_0[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)44;
    i ++;
  }
  len = (rsize_t)(1024 / 2);
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),(rsize_t)1024);
  if (! (rc != 403)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",139,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_24 */
      i ++;
    }
    if ((int)mem1_0[len] != 33) printf("%d - %zu m1=%d  m2=%d  \n",145,len,
                                       (int)mem1_0[len],(int)mem2_0[len]); /* printf_va_25 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(1024 + 2)) {
    mem1_0[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)44;
    i ++;
  }
  len = (rsize_t)1024;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),(rsize_t)0);
  if (! (rc != 401)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",166,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_26 */
      i ++;
    }
    if ((int)mem1_0[len] != 33) printf("%d - %zu m1=%d  m2=%d  \n",172,len,
                                       (int)mem1_0[len],(int)mem2_0[len]); /* printf_va_27 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)44;
    i ++;
  }
  len = (rsize_t)1024;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),
                (rsize_t)((256UL << 20) + (unsigned long)1));
  if (! (rc != 403)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",193,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_28 */
      i ++;
    }
    if ((int)mem1_0[len] == 0) printf("%d - %d m1=%d  m2=%d  \n",199,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_29 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)55;
    i ++;
  }
  rc = memcpy_s((void *)(mem1_0),(rsize_t)1024,(void const *)(mem1_0),
                (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)55;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)65;
    i ++;
  }
  len = (rsize_t)100;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(& mem1_0[10]),len);
  if (! (rc != 404)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",231,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_30 */
      i ++;
    }
    if ((int)mem1_0[len] == 0) printf("%d - %d m1=%d  m2=%d  \n",237,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_31 */
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)55;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)65;
    i ++;
  }
  len = (rsize_t)100;
  rc = memcpy_s((void *)(& mem1_0[10]),len,(void const *)(mem1_0),len);
  if (! (rc != 404)) {
    i = (uint32_t)10;
    while (i < len + (rsize_t)10) {
      if ((int)mem1_0[i] != 0) printf("%d - %d m1=%d  m2=%d  \n",258,(int)i,
                                      (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_32 */
      i ++;
    }
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)55;
    i ++;
  }
  len = (rsize_t)5;
  rc = memcpy_s((void *)(mem1_0),len,(void const *)(mem2_0),len);
  if (! (rc != 0)) {
    i = (uint32_t)0;
    while (i < len) {
      if ((int)mem1_0[i] != 55) printf("%d - %d m1=%d\n",279,(int)i,
                                       (int)mem1_0[i]); /* printf_va_33 */
      i ++;
    }
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_0[i] = (uint8_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_0[i] = (uint8_t)55;
    i ++;
  }
  rc = memcpy_s((void *)(mem1_0),(rsize_t)1024,(void const *)(mem2_0),
                (rsize_t)(1024 / 2));
  if (! (rc != 0)) {
    i = (uint32_t)0;
    while (i < (uint32_t)(1024 / 2)) {
      if ((int)mem1_0[i] != 55) printf("%d - %d m1=%d  m2=%d  \n",299,(int)i,
                                       (int)mem1_0[i],(int)mem2_0[i]); /* printf_va_34 */
      i ++;
    }
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_35(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_36(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_37(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_38(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_39(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_40(char const * restrict format, int param0, int param1,
                 int param2);

int test_memmove16_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  uint16_t mem1_6[1024];
  uint16_t mem2_4[1024];
  rc = memmove16_s((uint16_t *)0,(rsize_t)1024,(uint16_t const *)(mem2_4),
                   (rsize_t)1024);
  if (rc != 400) ;
  rc = memmove16_s(mem1_6,(rsize_t)0,(uint16_t const *)(mem2_4),
                   (rsize_t)1024);
  if (rc != 401) ;
  rc = memmove16_s(mem1_6,
                   (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1),
                   (uint16_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  rc = memmove16_s(mem1_6,(rsize_t)1024,(uint16_t const *)0,(rsize_t)1024);
  if (rc != 400) ;
  rc = memmove16_s(mem1_6,(rsize_t)10,(uint16_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  rc = memmove16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem2_4),
                   (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove16_s(mem1_6,len,(uint16_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)mem2_4[i]) printf("%d m1=%d  m2=%d  \n",
                                                 (int)i,(int)mem1_6[i],
                                                 (int)mem2_4[i]); /* printf_va_35 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)(1024 / 2);
  rc = memmove16_s(mem1_6,len,(uint16_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",110,(int)i,
                                    (int)mem1_6[i]); /* printf_va_36 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove16_s(mem1_6,len,(uint16_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",131,(int)i,
                                    (int)mem1_6[i]); /* printf_va_37 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove16_s(mem1_6,len,(uint16_t const *)(mem2_4),
                   (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",154,(int)i,
                                    (int)mem1_6[i]); /* printf_va_38 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint16_t)44;
    i ++;
  }
  rc = memmove16_s(mem1_6,(rsize_t)1024,(uint16_t const *)(mem1_6),
                   (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_6[i] = (uint16_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove16_s(mem1_6,len,(uint16_t const *)(& mem1_6[10]),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 35) printf("%d - %d m1=%d \n",186,(int)i,
                                     (int)mem1_6[i]); /* printf_va_39 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint16_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_6[i] = (uint16_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove16_s(& mem1_6[10],len,(uint16_t const *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    if ((int)mem1_6[i] != 25) printf("%d - %d m1=%d \n",206,(int)i,
                                     (int)mem1_6[i]); /* printf_va_40 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_41(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_42(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_43(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_44(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_45(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_46(char const * restrict format, int param0, int param1,
                 int param2);

int test_memmove32_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  uint32_t mem1_6[1024];
  uint32_t mem2_4[1024];
  rc = memmove32_s((uint32_t *)0,(rsize_t)1024,(uint32_t const *)(mem2_4),
                   (rsize_t)1024);
  if (rc != 400) ;
  rc = memmove32_s(mem1_6,(rsize_t)0,(uint32_t const *)(mem2_4),
                   (rsize_t)1024);
  if (rc != 401) ;
  rc = memmove32_s(mem1_6,
                   (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1),
                   (uint32_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  rc = memmove32_s(mem1_6,(rsize_t)1024,(uint32_t const *)0,(rsize_t)1024);
  if (rc != 400) ;
  rc = memmove32_s(mem1_6,(rsize_t)10,(uint32_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  rc = memmove32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem2_4),
                   (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove32_s(mem1_6,len,(uint32_t const *)(mem2_4),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != mem2_4[i]) printf("%d m1=%d  m2=%d  \n",(int)i,
                                       (int)mem1_6[i],(int)mem2_4[i]); /* printf_va_41 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)(1024 / 2);
  rc = memmove32_s(mem1_6,len,(uint32_t const *)(mem2_4),(rsize_t)1024);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",110,(int)i,
                                         (int)mem1_6[i]); /* printf_va_42 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove32_s(mem1_6,len,(uint32_t const *)(mem2_4),(rsize_t)0);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",131,(int)i,
                                         (int)mem1_6[i]); /* printf_va_43 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove32_s(mem1_6,len,(uint32_t const *)(mem2_4),
                   (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",154,(int)i,
                                         (int)mem1_6[i]); /* printf_va_44 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_4[i] = (uint32_t)44;
    i ++;
  }
  rc = memmove32_s(mem1_6,(rsize_t)1024,(uint32_t const *)(mem1_6),
                   (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_6[i] = (uint32_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove32_s(mem1_6,len,(uint32_t const *)(& mem1_6[10]),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)35) printf("%d - %d m1=%d \n",186,(int)i,
                                          (int)mem1_6[i]); /* printf_va_45 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_6[i] = (uint32_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_6[i] = (uint32_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove32_s(& mem1_6[10],len,(uint32_t const *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    if (mem1_6[i] != (uint32_t)25) printf("%d - %d m1=%d \n",206,(int)i,
                                          (int)mem1_6[i]); /* printf_va_46 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

static uint8_t mem1_1[1024];
static uint8_t mem2_1[1024];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_47(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_48(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_49(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_50(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_51(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_52(char const * restrict format, int param0, int param1,
                 int param2);

int test_memmove_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  rc = memmove_s((void *)0,(rsize_t)1024,(void const *)(mem2_1),
                 (rsize_t)1024);
  if (rc != 400) ;
  rc = memmove_s((void *)(mem1_1),(rsize_t)0,(void const *)(mem2_1),
                 (rsize_t)1024);
  if (rc != 401) ;
  rc = memmove_s((void *)(mem1_1),
                 (rsize_t)((256UL << 20) + (unsigned long)1),
                 (void const *)(mem2_1),(rsize_t)1024);
  if (rc != 403) ;
  rc = memmove_s((void *)(mem1_1),(rsize_t)1024,(void const *)0,
                 (rsize_t)1024);
  if (rc != 400) ;
  rc = memmove_s((void *)(mem1_1),(rsize_t)10,(void const *)(mem2_1),
                 (rsize_t)0);
  if (rc != 401) ;
  rc = memmove_s((void *)(mem1_1),(rsize_t)1024,(void const *)(mem2_1),
                 (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove_s((void *)(mem1_1),len,(void const *)(mem2_1),(rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_1[i] != (int)mem2_1[i]) printf("%d m1=%d  m2=%d  \n",
                                                 (int)i,(int)mem1_1[i],
                                                 (int)mem2_1[i]); /* printf_va_47 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)44;
    i ++;
  }
  len = (uint32_t)(1024 / 2);
  rc = memmove_s((void *)(mem1_1),len,(void const *)(mem2_1),(rsize_t)1024);
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_1[i] != 0) printf("%d - %d m1=%d \n",107,(int)i,
                                    (int)mem1_1[i]); /* printf_va_48 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove_s((void *)(mem1_1),len,(void const *)(mem2_1),(rsize_t)0);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_1[i] != 0) printf("%d - %d m1=%d \n",128,(int)i,
                                    (int)mem1_1[i]); /* printf_va_49 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)44;
    i ++;
  }
  len = (uint32_t)1024;
  rc = memmove_s((void *)(mem1_1),len,(void const *)(mem2_1),
                 (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_1[i] != 0) printf("%d - %d m1=%d \n",149,(int)i,
                                    (int)mem1_1[i]); /* printf_va_50 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)44;
    i ++;
  }
  rc = memmove_s((void *)(mem1_1),(rsize_t)1024,(void const *)(mem1_1),
                 (rsize_t)1024);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_1[i] = (uint8_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove_s((void *)(mem1_1),len,(void const *)(& mem1_1[10]),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_1[i] != 35) printf("%d - %d m1=%d \n",181,(int)i,
                                     (int)mem1_1[i]); /* printf_va_51 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem1_1[i] = (uint8_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem1_1[i] = (uint8_t)35;
    i ++;
  }
  len = (uint32_t)20;
  rc = memmove_s((void *)(& mem1_1[10]),len,(void const *)(mem1_1),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < (uint32_t)1024) {
    mem2_1[i] = (uint8_t)25;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(1024 - 10)) {
    mem2_1[i] = (uint8_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    if ((int)mem1_1[i] != 25) printf("%d - %d m1=%d \n",204,(int)i,
                                     (int)mem1_1[i]); /* printf_va_52 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_53(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_54(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_55(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_56(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_57(char const * restrict format, int param0, int param1,
                 int param2);

int test_memset16_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  uint16_t value;
  uint16_t mem1_6[256];
  value = (uint16_t)34;
  rc = memset16_s((uint16_t *)0,(rsize_t)256,value);
  if (rc != 400) ;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,(rsize_t)0,value);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint16_t)99;
    i ++;
  }
  len = (uint32_t)1;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)value) printf("%d - %d m1=%d \n",59,(int)i,
                                             (int)mem1_6[i]); /* printf_va_53 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint16_t)99;
    i ++;
  }
  len = (uint32_t)2;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)value) printf("%d - %d m1=%d \n",79,(int)i,
                                             (int)mem1_6[i]); /* printf_va_54 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint16_t)99;
    i ++;
  }
  len = (uint32_t)12;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)value) printf("%d - %d m1=%d \n",99,(int)i,
                                             (int)mem1_6[i]); /* printf_va_55 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint16_t)99;
    i ++;
  }
  len = (uint32_t)31;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)value) printf("%d - %d m1=%d \n",119,(int)i,
                                             (int)mem1_6[i]); /* printf_va_56 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint16_t)99;
    i ++;
  }
  len = (uint32_t)133;
  value = (uint16_t)34;
  rc = memset16_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != (int)value) printf("%d - %d m1=%d \n",139,(int)i,
                                             (int)mem1_6[i]); /* printf_va_57 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_58(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_59(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_60(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_61(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_62(char const * restrict format, int param0, int param1,
                 int param2);

int test_memset32_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  uint32_t value;
  uint32_t mem1_6[256];
  value = (uint32_t)34;
  rc = memset32_s((uint32_t *)0,(rsize_t)256,value);
  if (rc != 400) ;
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,(rsize_t)0,value);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  len = (uint32_t)1;
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != value) printf("%d - %d m1=%d  \n",62,(int)i,
                                   (int)mem1_6[i]); /* printf_va_58 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  len = (uint32_t)2;
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != value) printf("%d - %d m1=%d  \n",82,(int)i,
                                   (int)mem1_6[i]); /* printf_va_59 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  len = (uint32_t)12;
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != value) printf("%d - %d m1=%d  \n",102,(int)i,
                                   (int)mem1_6[i]); /* printf_va_60 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  len = (uint32_t)31;
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != value) printf("%d - %d m1=%d  \n",122,(int)i,
                                   (int)mem1_6[i]); /* printf_va_61 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_6[i] = (uint32_t)99;
    i ++;
  }
  len = (uint32_t)133;
  value = (uint32_t)34;
  rc = memset32_s(mem1_6,len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != value) printf("%d - %d m1=%d  \n",142,(int)i,
                                   (int)mem1_6[i]); /* printf_va_62 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

static uint8_t mem1_2[256];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_63(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_64(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_65(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_66(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_67(char const * restrict format, int param0, int param1,
                 int param2);

int test_memset_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  uint8_t value;
  value = (uint8_t)34;
  rc = memset_s((void *)0,(rsize_t)256,value);
  if (rc != 400) ;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),(rsize_t)0,value);
  if (rc != 401) ;
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_2[i] = (uint8_t)99;
    i ++;
  }
  len = (uint32_t)1;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_2[i] != (int)value) printf("%d - %d m1=%d \n",59,(int)i,
                                             (int)mem1_2[i]); /* printf_va_63 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_2[i] = (uint8_t)99;
    i ++;
  }
  len = (uint32_t)2;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_2[i] != (int)value) printf("%d - %d m1=%d \n",79,(int)i,
                                             (int)mem1_2[i]); /* printf_va_64 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_2[i] = (uint8_t)99;
    i ++;
  }
  len = (uint32_t)12;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_2[i] != (int)value) printf("%d - %d m1=%d \n",99,(int)i,
                                             (int)mem1_2[i]); /* printf_va_65 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_2[i] = (uint8_t)99;
    i ++;
  }
  len = (uint32_t)31;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_2[i] != (int)value) printf("%d - %d m1=%d \n",119,(int)i,
                                             (int)mem1_2[i]); /* printf_va_66 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_2[i] = (uint8_t)99;
    i ++;
  }
  len = (uint32_t)133;
  value = (uint8_t)34;
  rc = memset_s((void *)(mem1_2),len,value);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_2[i] != (int)value) printf("%d - %d m1=%d \n",139,(int)i,
                                             (int)mem1_2[i]); /* printf_va_67 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_68(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_69(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_70(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_71(char const * restrict format, int param0, int param1,
                 int param2);

int test_memzero16_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  uint16_t mem1_6[512];
  rc = memzero16_s((uint16_t *)0,(rsize_t)512);
  if (rc != 400) ;
  rc = memzero16_s(mem1_6,(rsize_t)0);
  if (rc != 401) ;
  rc = memzero16_s(mem1_6,
                   (rsize_t)((256UL << 20) / (unsigned long)2 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  len = (uint32_t)1;
  rc = memzero16_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",61,(int)i,
                                    (int)mem1_6[i]); /* printf_va_68 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  len = (uint32_t)2;
  rc = memzero16_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",80,(int)i,
                                    (int)mem1_6[i]); /* printf_va_69 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  len = (uint32_t)3;
  rc = memzero16_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",99,(int)i,
                                    (int)mem1_6[i]); /* printf_va_70 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint16_t)33;
    i ++;
  }
  len = (uint32_t)512;
  rc = memzero16_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",118,(int)i,
                                    (int)mem1_6[i]); /* printf_va_71 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_72(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_73(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_74(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_75(char const * restrict format, int param0, int param1,
                 int param2);

int test_memzero32_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  uint32_t mem1_6[512];
  rc = memzero32_s((uint32_t *)0,(rsize_t)512);
  if (rc != 400) ;
  rc = memzero32_s(mem1_6,(rsize_t)0);
  if (rc != 401) ;
  rc = memzero32_s(mem1_6,
                   (rsize_t)((256UL << 20) / (unsigned long)4 + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  len = (uint32_t)1;
  rc = memzero32_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",61,(int)i,
                                         (int)mem1_6[i]); /* printf_va_72 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  len = (uint32_t)2;
  rc = memzero32_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",80,(int)i,
                                         (int)mem1_6[i]); /* printf_va_73 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  len = (uint32_t)3;
  rc = memzero32_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",99,(int)i,
                                         (int)mem1_6[i]); /* printf_va_74 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint32_t)33;
    i ++;
  }
  len = (uint32_t)512;
  rc = memzero32_s(mem1_6,len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_6[i] != (uint32_t)0) printf("%d - %d m1=%d \n",118,(int)i,
                                         (int)mem1_6[i]); /* printf_va_75 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_76(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_77(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_78(char const * restrict format, int param0, int param1,
                 int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_79(char const * restrict format, int param0, int param1,
                 int param2);

int test_memzero_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  uint32_t len;
  uint8_t mem1_6[512];
  rc = memzero_s((void *)0,(rsize_t)512);
  if (rc != 400) ;
  rc = memzero_s((void *)(mem1_6),(rsize_t)0);
  if (rc != 401) ;
  rc = memzero_s((void *)(mem1_6),
                 (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) ;
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint8_t)33;
    i ++;
  }
  len = (uint32_t)1;
  rc = memzero_s((void *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",61,(int)i,
                                    (int)mem1_6[i]); /* printf_va_76 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint8_t)33;
    i ++;
  }
  len = (uint32_t)2;
  rc = memzero_s((void *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",80,(int)i,
                                    (int)mem1_6[i]); /* printf_va_77 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint8_t)33;
    i ++;
  }
  len = (uint32_t)3;
  rc = memzero_s((void *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",99,(int)i,
                                    (int)mem1_6[i]); /* printf_va_78 */
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)512) {
    mem1_6[i] = (uint8_t)33;
    i ++;
  }
  len = (uint32_t)512;
  rc = memzero_s((void *)(mem1_6),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)mem1_6[i] != 0) printf("%d - %d m1=%d \n",118,(int)i,
                                    (int)mem1_6[i]); /* printf_va_79 */
    i ++;
  }
  __retres = 0;
  return __retres;
}

static char str1[128];
static char str2[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_80(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_81(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_82(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_83(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_84(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_85(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_86(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_87(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_88(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_89(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_90(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_91(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_92(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_93(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_94(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_95(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_96(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_97(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_98(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_99(char const * restrict format, char *param0,
                 unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_100(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_101(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_102(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_103(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_104(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_105(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_106(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_107(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_108(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_109(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_110(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_111(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_112(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_113(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_114(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_115(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_116(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_117(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_118(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_119(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_120(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_121(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_122(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_123(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_124(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_125(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_126(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_127(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_128(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_129(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_130(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_131(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_132(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_133(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_134(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_135(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_136(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_137(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_138(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_139(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

int test_stpcpy_s(void)
{
  int __retres;
  char *ret;
  errno_t rc;
  int32_t ind;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting stpcpy_s:\n"); /* printf_va_80 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_81 */
  ret = stpcpy_s((char *)0,(rsize_t)128,(char const *)(str2),& rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)99,(unsigned int)rc); /* printf_va_82 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)104,
                               (unsigned int)rc); /* printf_va_83 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_84 */
  ret = stpcpy_s(str1,(rsize_t)0,(char const *)(str2),& rc);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)114,(unsigned int)rc); /* printf_va_85 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)118,
                               (unsigned int)rc); /* printf_va_86 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_87 */
  ret = stpcpy_s(str1,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (char const *)(str2),& rc);
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)129,(unsigned int)rc); /* printf_va_88 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)133,
                               (unsigned int)rc); /* printf_va_89 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_90 */
  strcpy(str1,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  ret = stpcpy_s(str1,(rsize_t)5,(char const *)0,& rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)145,(unsigned int)rc); /* printf_va_91 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)150,
                               (unsigned int)rc); /* printf_va_92 */
  if ((int)str1[0] != '\000') printf("%s %u   Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)163,(unsigned int)rc); /* printf_va_93 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_94 */
  strcpy(str1,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  ret = stpcpy_s(str1,(rsize_t)5,(char const *)(str1),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)177,(unsigned int)rc); /* printf_va_95 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)183,
                               (unsigned int)rc); /* printf_va_96 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_97 */
  strcpy(str1,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  ret = stpcpy_s(str1,(rsize_t)128,(char const *)(str1),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)196,(unsigned int)rc); /* printf_va_98 */
  if (ret == (char *)0) goto _LOR;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR;
    else {
      rsize_t tmp;
      tmp = strnlen_s((char const *)(str1),(rsize_t)128);
      ;
      if (ret != & str1[tmp]) _LOR:
                              printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)201,(unsigned int)rc); /* printf_va_99 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_100 */
  strcpy(str1,"keep it simple");
  ret = stpcpy_s(str1,(rsize_t)128,(char const *)(& str1[5]),& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)215,(unsigned int)rc); /* printf_va_101 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)219,
                               (unsigned int)rc); /* printf_va_102 */
  if ((int)str1[0] != '\000') printf("%s %u   Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)232,(unsigned int)rc); /* printf_va_103 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_104 */
  strcpy(str1,"keep it simple");
  ret = stpcpy_s(& str1[5],(rsize_t)128,(char const *)(str1),& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)248,(unsigned int)rc); /* printf_va_105 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)252,
                               (unsigned int)rc); /* printf_va_106 */
  if ((int)str1[5] != '\000') printf("%s %u   Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)265,(unsigned int)rc); /* printf_va_107 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_108 */
  strcpy(str1,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2[0] = (char)'\000';
  ret = stpcpy_s(str1,(rsize_t)(128 / 2),(char const *)(str2),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)287,(unsigned int)rc); /* printf_va_109 */
  if (ret == (char *)0) goto _LOR_0;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_0;
    else 
      if (ret != str1) _LOR_0:
                       printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                              (char *)"test_stpcpy_s",(unsigned int)291,
                              (unsigned int)rc); /* printf_va_110 */
  if ((int)str1[0] != '\000') printf("%s %u   Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)304,(unsigned int)rc); /* printf_va_111 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_112 */
  str1[0] = (char)'\000';
  strcpy(str2,"keep it simple");
  ret = stpcpy_s(str2,(rsize_t)128,(char const *)(str1),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)319,(unsigned int)rc); /* printf_va_113 */
  if (ret == (char *)0) goto _LOR_1;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_1;
    else 
      if (ret != str2) _LOR_1:
                       printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                              (char *)"test_stpcpy_s",(unsigned int)323,
                              (unsigned int)rc); /* printf_va_114 */
  if ((int)str2[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)328,str1,(unsigned int)rc); /* printf_va_115 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_116 */
  str1[0] = (char)'\000';
  strcpy(str2,"keep it simple");
  ret = stpcpy_s(str1,(rsize_t)128,(char const *)(str2),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)341,(unsigned int)rc); /* printf_va_117 */
  ind = strcmp((char const *)(str1),(char const *)(str2));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpcpy_s",
                       (unsigned int)348,str1,(unsigned int)rc); /* printf_va_118 */
  if (ret == (char *)0) goto _LOR_2;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_2;
    else {
      rsize_t tmp_0;
      tmp_0 = strnlen_s((char const *)(str1),(rsize_t)128);
      ;
      if (ret != & str1[tmp_0]) _LOR_2:
                                printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                       (char *)"test_stpcpy_s",
                                       (unsigned int)353,(unsigned int)rc); /* printf_va_119 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_120 */
  strcpy(str1,"qqweqeqeqeq");
  strcpy(str2,"keep it simple");
  ret = stpcpy_s(str1,(rsize_t)128,(char const *)(str2),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)366,(unsigned int)rc); /* printf_va_121 */
  if (ret == (char *)0) goto _LOR_3;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_3;
    else {
      rsize_t tmp_1;
      tmp_1 = strnlen_s((char const *)(str1),(rsize_t)128);
      ;
      if (ret != & str1[tmp_1]) _LOR_3:
                                printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                       (char *)"test_stpcpy_s",
                                       (unsigned int)371,(unsigned int)rc); /* printf_va_122 */
    }
  ind = strcmp((char const *)(str1),(char const *)(str2));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpcpy_s",
                       (unsigned int)378,str1,(unsigned int)rc); /* printf_va_123 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_124 */
  strcpy(str1,"qqweqeqeqeq");
  strcpy(str2,"keep it simple");
  ret = stpcpy_s(str1,(rsize_t)1,(char const *)(str2),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)391,(unsigned int)rc); /* printf_va_125 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)395,
                               (unsigned int)rc); /* printf_va_126 */
  if ((int)str1[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)400,str1,(unsigned int)rc); /* printf_va_127 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_128 */
  strcpy(str1,"qqweqeqeqeq");
  strcpy(str2,"keep it simple");
  ret = stpcpy_s(str2,(rsize_t)2,(char const *)(str1),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                        (unsigned int)413,(unsigned int)rc); /* printf_va_129 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpcpy_s",(unsigned int)417,
                               (unsigned int)rc); /* printf_va_130 */
  if ((int)str2[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                     (char *)"test_stpcpy_s",
                                     (unsigned int)422,str1,(unsigned int)rc); /* printf_va_131 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_132 */
  strcpy(str1,"qqweqeqeqeq");
  strcpy(str2,"it");
  ret = stpcpy_s(str1,(rsize_t)3,(char const *)(str2),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)435,(unsigned int)rc); /* printf_va_133 */
  ind = strcmp((char const *)(str1),(char const *)(str2));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpcpy_s",
                       (unsigned int)442,str1,(unsigned int)rc); /* printf_va_134 */
  if (ret == (char *)0) goto _LOR_4;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_4;
    else {
      rsize_t tmp_2;
      tmp_2 = strnlen_s((char const *)(str1),(rsize_t)128);
      ;
      if (ret != & str1[tmp_2]) _LOR_4:
                                printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                       (char *)"test_stpcpy_s",
                                       (unsigned int)446,(unsigned int)rc); /* printf_va_135 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_136 */
  strcpy(str2,"qq12345weqeqeqeq");
  strcpy(str1,"it");
  ret = stpcpy_s(str2,(rsize_t)10,(char const *)(str1),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpcpy_s",
                      (unsigned int)459,(unsigned int)rc); /* printf_va_137 */
  if (ret == (char *)0) goto _LOR_5;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_5;
    else {
      rsize_t tmp_3;
      tmp_3 = strnlen_s((char const *)(str2),(rsize_t)128);
      ;
      if (ret != & str2[tmp_3]) _LOR_5:
                                printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                       (char *)"test_stpcpy_s",
                                       (unsigned int)463,(unsigned int)rc); /* printf_va_138 */
    }
  ind = strcmp((char const *)(str1),(char const *)(str2));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpcpy_s",
                       (unsigned int)470,str1,(unsigned int)rc); /* printf_va_139 */
  __retres = 0;
  return __retres;
}

static char str1_0[128];
static char str2_0[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_140(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_141(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_142(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_143(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_144(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_145(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_146(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_147(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_148(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_149(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_150(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_151(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_152(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_153(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_154(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_155(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_156(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_157(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_158(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_159(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_160(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_161(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_162(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_163(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_164(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_165(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_166(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_167(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_168(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_169(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_170(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_171(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_172(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_173(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_174(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_175(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_176(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_177(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_178(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3,
                  size_t param4, unsigned int param5);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_179(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_180(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_181(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_182(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_183(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3,
                  size_t param4, unsigned int param5);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_184(char const * restrict format, char *param0,
                  unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_185(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_186(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_187(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_188(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_189(char const * restrict format, char *param0,
                  unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_190(char const * restrict format, char *param0,
                  unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_191(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_192(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_193(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_194(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_195(char const * restrict format, char *param0,
                  unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_196(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_197(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_198(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_199(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_200(char const * restrict format, char *param0,
                  unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_201(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_202(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_203(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_204(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_205(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_206(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_207(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_208(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_209(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_210(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_211(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_212(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_213(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_214(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_215(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_216(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, unsigned int param3);

int test_stpncpy_s(void)
{
  int __retres;
  char *ret;
  errno_t rc;
  uint32_t i;
  int32_t ind;
  rsize_t sz;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting stpncpy_s:\n"); /* printf_va_140 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_141 */
  ret = stpncpy_s((char *)0,(rsize_t)128,(char const *)(str2_0),(rsize_t)128,
                  & rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)107,(unsigned int)rc); /* printf_va_142 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)112,
                               (unsigned int)rc); /* printf_va_143 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_144 */
  ret = stpncpy_s(str1_0,(rsize_t)0,(char const *)(str2_0),(rsize_t)128,& rc);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)122,(unsigned int)rc); /* printf_va_145 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)126,
                               (unsigned int)rc); /* printf_va_146 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_147 */
  ret = stpncpy_s(str1_0,(rsize_t)((4UL << 10) + (unsigned long)1),
                  (char const *)(str2_0),(rsize_t)128,& rc);
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)137,(unsigned int)rc); /* printf_va_148 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)141,
                               (unsigned int)rc); /* printf_va_149 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_150 */
  strcpy(str1_0,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  ret = stpncpy_s(str1_0,(rsize_t)5,(char const *)0,(rsize_t)128,& rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)153,(unsigned int)rc); /* printf_va_151 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)158,
                               (unsigned int)rc); /* printf_va_152 */
  if ((int)str1_0[0] != '\000') printf("%s %u   Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)171,(unsigned int)rc); /* printf_va_153 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_154 */
  strcpy(str1_0,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  sz = strnlen_s((char const *)(str1_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)5,(char const *)(str1_0),sz,& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)186,(unsigned int)rc); /* printf_va_155 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)192,
                               (unsigned int)rc); /* printf_va_156 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_157 */
  strcpy(str1_0,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  sz = strnlen_s((char const *)(str1_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str1_0),sz,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)206,(unsigned int)rc); /* printf_va_158 */
  if (ret == (char *)0) goto _LOR;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR;
    else {
      rsize_t tmp;
      tmp = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp]) _LOR:
                                printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)211,(unsigned int)rc); /* printf_va_159 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_160 */
  strcpy(str1_0,"keep it simple");
  sz = strnlen_s((char const *)(str1_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(& str1_0[5]),sz,& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)225,(unsigned int)rc); /* printf_va_161 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)229,
                               (unsigned int)rc); /* printf_va_162 */
  if ((int)str1_0[0] != '\000') printf("%s %u   Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)242,(unsigned int)rc); /* printf_va_163 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_164 */
  strcpy(str1_0,"keep it simple");
  sz = strnlen_s((char const *)(str1_0),(rsize_t)128);
  ret = stpncpy_s(& str1_0[5],(rsize_t)128,(char const *)(str1_0),sz,& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)258,(unsigned int)rc); /* printf_va_165 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)262,
                               (unsigned int)rc); /* printf_va_166 */
  if ((int)str1_0[5] != '\000') printf("%s %u   Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)275,(unsigned int)rc); /* printf_va_167 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_168 */
  strcpy(str1_0,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_0[0] = (char)'\000';
  ret = stpncpy_s(str1_0,(rsize_t)(128 / 2),(char const *)(str2_0),
                  (rsize_t)1,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)297,(unsigned int)rc); /* printf_va_169 */
  if (ret == (char *)0) goto _LOR_0;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_0;
    else 
      if (ret != str1_0) _LOR_0:
                         printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                (char *)"test_stpncpy_s",(unsigned int)301,
                                (unsigned int)rc); /* printf_va_170 */
  if ((int)str1_0[0] != '\000') printf("%s %u   Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)314,(unsigned int)rc); /* printf_va_171 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_172 */
  memset_s((void *)(str1_0),(rsize_t)'\000',(uint8_t)5);
  strcpy(str2_0,"keep it simple");
  ret = stpncpy_s(str2_0,(rsize_t)128,(char const *)(str1_0),(rsize_t)5,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)329,(unsigned int)rc); /* printf_va_173 */
  if (ret == (char *)0) goto _LOR_1;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_1;
    else 
      if (ret != str2_0) _LOR_1:
                         printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                (char *)"test_stpncpy_s",(unsigned int)333,
                                (unsigned int)rc); /* printf_va_174 */
  if ((int)str2_0[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)338,str1_0,
                                       (unsigned int)rc); /* printf_va_175 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_176 */
  memset_s((void *)(str1_0),(rsize_t)'\000',(uint8_t)50);
  strcpy(str2_0,"keep it simple");
  sz = strnlen_s((char const *)(str2_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str2_0),sz,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)353,(unsigned int)rc); /* printf_va_177 */
  ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
  if (ind != 0) printf("%s %u -%s- <> -%s-  (smax=%zu) Error rc=%u \n",
                       (char *)"test_stpncpy_s",(unsigned int)360,str1_0,
                       str2_0,sz,(unsigned int)rc); /* printf_va_178 */
  if (ret == (char *)0) goto _LOR_2;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_2;
    else {
      rsize_t tmp_0;
      tmp_0 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_0]) _LOR_2:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)365,(unsigned int)rc); /* printf_va_179 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_180 */
  strcpy(str1_0,"xxxxxxxxxx");
  strcpy(str2_0,"abcde");
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str2_0),(rsize_t)3,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)378,(unsigned int)rc); /* printf_va_181 */
  if (ret == (char *)0) goto _LOR_4;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_4;
    else {
      rsize_t tmp_1;
      tmp_1 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_1]) _LOR_4:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)383,(unsigned int)rc); /* printf_va_182 */
      else {
        sz = strnlen_s((char const *)(str1_0),(rsize_t)128);
        ind = strncmp((char const *)(str1_0),(char const *)(str2_0),sz);
        if (ind != 0) goto _LOR_3;
        else 
          if (sz != (rsize_t)3) _LOR_3:
                                printf("%s %u -%s- <> -%s-  (smax=%zu) Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)391,str1_0,str2_0,sz,
                                       (unsigned int)rc); /* printf_va_183 */
        i = (uint32_t)1;
        while (i < (uint32_t)6) {
          if ((int)*(ret + i) != 'x') printf("%s %u Incorrect Slack at returned ptr index %d  Error rc=%u \n",
                                             (char *)"test_stpncpy_s",
                                             (unsigned int)397,(int)i,
                                             (unsigned int)rc); /* printf_va_184 */
          i ++;
        }
      }
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_185 */
  strcpy(str1_0,"xxxxxxxxxxxxxxxxxxxx");
  strcpy(str2_0,"abcde");
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str2_0),(rsize_t)10,
                  & rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)412,(unsigned int)rc); /* printf_va_186 */
  if (ret == (char *)0) goto _LOR_5;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_5;
    else {
      rsize_t tmp_2;
      tmp_2 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_2]) _LOR_5:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)417,(unsigned int)rc); /* printf_va_187 */
      else {
        ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
        if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",
                             (char *)"test_stpncpy_s",(unsigned int)424,
                             str1_0,(unsigned int)rc); /* printf_va_188 */
        else {
          i = (uint32_t)0;
          while (i < (uint32_t)5) {
            if ((int)*(ret + i) != '\000') printf("%s %u Incorrect NULL fill at returned ptr index %d  Error rc=%u \n",
                                                  (char *)"test_stpncpy_s",
                                                  (unsigned int)430,(int)i,
                                                  (unsigned int)rc); /* printf_va_189 */
            i ++;
          }
          while (i < (uint32_t)15) {
            if ((int)*(ret + i) != 'x') printf("%s %u Incorrect Slack at returned ptr index %d  Error rc=%u \n",
                                               (char *)"test_stpncpy_s",
                                               (unsigned int)437,(int)i,
                                               (unsigned int)rc); /* printf_va_190 */
            i ++;
          }
        }
      }
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_191 */
  strcpy(str1_0,"xxxxxxxxxx");
  strcpy(str2_0,"abcde");
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str2_0),(rsize_t)5,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)453,(unsigned int)rc); /* printf_va_192 */
  if (ret == (char *)0) goto _LOR_6;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_6;
    else {
      rsize_t tmp_3;
      tmp_3 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_3]) _LOR_6:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)458,(unsigned int)rc); /* printf_va_193 */
      else {
        ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
        if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",
                             (char *)"test_stpncpy_s",(unsigned int)465,
                             str1_0,(unsigned int)rc); /* printf_va_194 */
        else {
          i = (uint32_t)1;
          while (i < (uint32_t)5) {
            if ((int)*(ret + i) != 'x') printf("%s %u Incorrect Slack at returned ptr index %d  Error rc=%u \n",
                                               (char *)"test_stpncpy_s",
                                               (unsigned int)471,(int)i,
                                               (unsigned int)rc); /* printf_va_195 */
            i ++;
          }
        }
      }
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_196 */
  strcpy(str1_0,"xxxxxxxxxx");
  strcpy(str2_0,"abcde");
  ret = stpncpy_s(str1_0,(rsize_t)128,(char const *)(str2_0),(rsize_t)6,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)487,(unsigned int)rc); /* printf_va_197 */
  if (ret == (char *)0) goto _LOR_7;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_7;
    else {
      rsize_t tmp_4;
      tmp_4 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_4]) _LOR_7:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)492,(unsigned int)rc); /* printf_va_198 */
      else {
        ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
        if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",
                             (char *)"test_stpncpy_s",(unsigned int)499,
                             str1_0,(unsigned int)rc); /* printf_va_199 */
        else {
          i = (uint32_t)1;
          while (i < (uint32_t)5) {
            if ((int)*(ret + i) != 'x') printf("%s %u Incorrect Slack at returned ptr index %d  Error rc=%u \n",
                                               (char *)"test_stpncpy_s",
                                               (unsigned int)505,(int)i,
                                               (unsigned int)rc); /* printf_va_200 */
            i ++;
          }
        }
      }
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_201 */
  strcpy(str1_0,"qqweqeqeqeq");
  strcpy(str2_0,"keep it simple");
  sz = strnlen_s((char const *)(str2_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)1,(char const *)(str2_0),sz,& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)522,(unsigned int)rc); /* printf_va_202 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)526,
                               (unsigned int)rc); /* printf_va_203 */
  if ((int)str1_0[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)531,str1_0,
                                       (unsigned int)rc); /* printf_va_204 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_205 */
  strcpy(str1_0,"qqweqeqeqeq");
  strcpy(str2_0,"keep it simple");
  sz = strnlen_s((char const *)(str2_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)14,(char const *)(str2_0),sz,& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                        (unsigned int)545,(unsigned int)rc); /* printf_va_206 */
  if (ret != (char *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                               (char *)"test_stpncpy_s",(unsigned int)549,
                               (unsigned int)rc); /* printf_va_207 */
  if ((int)str1_0[0] != '\000') printf("%s %u -%s-  Error rc=%u \n",
                                       (char *)"test_stpncpy_s",
                                       (unsigned int)554,str1_0,
                                       (unsigned int)rc); /* printf_va_208 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_209 */
  strcpy(str1_0,"qqweqeqeqeq");
  strcpy(str2_0,"it");
  sz = strnlen_s((char const *)(str2_0),(rsize_t)128);
  ret = stpncpy_s(str1_0,(rsize_t)3,(char const *)(str2_0),sz,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)568,(unsigned int)rc); /* printf_va_210 */
  ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpncpy_s",
                       (unsigned int)575,str1_0,(unsigned int)rc); /* printf_va_211 */
  if (ret == (char *)0) goto _LOR_8;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_8;
    else {
      rsize_t tmp_5;
      tmp_5 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_5]) _LOR_8:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)579,(unsigned int)rc); /* printf_va_212 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_213 */
  strcpy(str1_0,"qq12345weqeqeqeq");
  strcpy(str2_0,"it");
  ret = stpncpy_s(str1_0,(rsize_t)10,(char const *)(str2_0),(rsize_t)2,& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_stpncpy_s",
                      (unsigned int)592,(unsigned int)rc); /* printf_va_214 */
  if (ret == (char *)0) goto _LOR_9;
  else 
    if ((int)*(ret + 0) != '\000') goto _LOR_9;
    else {
      rsize_t tmp_6;
      tmp_6 = strnlen_s((char const *)(str1_0),(rsize_t)128);
      ;
      if (ret != & str1_0[tmp_6]) _LOR_9:
                                  printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                         (char *)"test_stpncpy_s",
                                         (unsigned int)596,(unsigned int)rc); /* printf_va_215 */
    }
  ind = strcmp((char const *)(str1_0),(char const *)(str2_0));
  if (ind != 0) printf("%s %u -%s-  Error rc=%u \n",(char *)"test_stpncpy_s",
                       (unsigned int)603,str1_0,(unsigned int)rc); /* printf_va_216 */
  __retres = 0;
  return __retres;
}

static char str1_1[128];
static char str2_1[128];
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_217(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_218(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_219(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_220(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_221(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_222(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_223(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_224(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_225(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_226(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_227(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_228(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_229(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_230(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_231(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_232(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_233(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_234(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_235(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_236(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_237(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_238(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_239(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_240(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_241(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_242(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_243(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_244(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_245(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

int test_strcasecmp_s(void)
{
  int __retres;
  errno_t rc;
  int ind;
  int std_ind;
  rc = strcasecmp_s((char const *)0,(rsize_t)128,(char const *)(str2_1),
                    & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                        (unsigned int)29,rc); /* printf_va_217 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)34,ind,rc); /* printf_va_218 */
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,(char const *)0,
                    & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                        (unsigned int)42,rc); /* printf_va_219 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)47,ind,rc); /* printf_va_220 */
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),(int *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                        (unsigned int)55,rc); /* printf_va_221 */
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)0,(char const *)(str2_1),
                    & ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                        (unsigned int)63,rc); /* printf_va_222 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)68,ind,rc); /* printf_va_223 */
  rc = strcasecmp_s((char const *)(str1_1),
                    (rsize_t)((4UL << 10) + (unsigned long)1),
                    (char const *)(str2_1),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                        (unsigned int)76,rc); /* printf_va_224 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)81,ind,rc); /* printf_va_225 */
  str1_1[0] = (char)'\000';
  str2_1[0] = (char)'\000';
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)92,rc); /* printf_va_226 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)97,ind,rc); /* printf_va_227 */
  std_ind = strcasecmp((char const *)(str1_1),(char const *)(str2_1));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcasecmp_s",(unsigned int)103,
                             ind,std_ind,rc); /* printf_va_228 */
  strcpy(str1_1,"KEEP IT SIMPLE");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)1,(char const *)(str2_1),
                    & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)114,rc); /* printf_va_229 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)119,ind,rc); /* printf_va_230 */
  strcpy(str1_1,"KEEP IT SIMPLE");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)2,(char const *)(str2_1),
                    & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)129,rc); /* printf_va_231 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)134,ind,rc); /* printf_va_232 */
  strcpy(str1_1,"KEEP IT SIMPLE");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)4,(char const *)(str2_1),
                    & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)145,rc); /* printf_va_233 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)150,ind,rc); /* printf_va_234 */
  strcpy(str1_1,"KEEP IT SIMPLE");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)161,rc); /* printf_va_235 */
  if (ind != 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)166,ind,rc); /* printf_va_236 */
  std_ind = strcasecmp((char const *)(str1_1),(char const *)(str2_1));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcasecmp_s",(unsigned int)172,
                             ind,std_ind,rc); /* printf_va_237 */
  strcpy(str1_1,"keep it simple");
  strcpy(str2_1,"keeP it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)183,rc); /* printf_va_238 */
  if (ind != 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)188,ind,rc); /* printf_va_239 */
  strcpy(str1_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str1_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)198,rc); /* printf_va_240 */
  if (ind != 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcasecmp_s",(unsigned int)203,ind,rc); /* printf_va_241 */
  strcpy(str1_1,"KEEP it simplified");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)214,rc); /* printf_va_242 */
  if (ind != 'I' - 'E') printf("%s %u  Error ind=%d  rc=%d \n",
                               (char *)"test_strcasecmp_s",(unsigned int)219,
                               ind,rc); /* printf_va_243 */
  strcpy(str1_1,"KEEP 1234567890");
  strcpy(str2_1,"keep it simple");
  rc = strcasecmp_s((char const *)(str1_1),(rsize_t)128,
                    (char const *)(str2_1),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasecmp_s",
                      (unsigned int)230,rc); /* printf_va_244 */
  if (ind != '1' - 'I') printf("%s %u  Error ind=%d  rc=%d  %d \n",
                               (char *)"test_strcasecmp_s",(unsigned int)235,
                               ind,rc,'1' - 'I'); /* printf_va_245 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_246(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_247(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_248(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_249(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_250(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_251(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_252(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_253(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_254(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_255(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_256(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_257(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_258(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_259(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_260(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_261(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_262(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_263(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_264(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_265(char const * restrict format, void *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_266(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_267(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_268(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_269(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_270(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_271(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_272(char const * restrict format, void *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_273(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_274(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_275(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_276(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_277(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_278(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_279(char const * restrict format, void *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_280(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_281(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_282(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_283(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_284(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_285(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_286(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_287(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_288(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_289(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_290(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_291(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_292(char const * restrict format, void *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_293(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_294(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_295(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_296(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_297(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_298(char const * restrict format, void *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_299(char const * restrict format, void *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_300(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_301(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_302(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_303(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_304(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_305(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_306(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_307(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_308(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_309(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_310(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_311(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_312(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_313(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_314(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strcasestr_s(void)
{
  int __retres;
  errno_t rc;
  char *sub;
  char *std_sub;
  rsize_t len1;
  rsize_t len2;
  char str1_17[128];
  char str2_16[128];
  rc = strcasestr_s((char *)0,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)34,rc); /* printf_va_246 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)39,rc); /* printf_va_247 */
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)0,(rsize_t)128,& sub);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)47,rc); /* printf_va_248 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)52,rc); /* printf_va_249 */
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,(char **)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)60,rc); /* printf_va_250 */
  rc = strcasestr_s(str1_17,(rsize_t)0,(char const *)(str2_16),(rsize_t)128,
                    & sub);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)68,rc); /* printf_va_251 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)73,rc); /* printf_va_252 */
  rc = strcasestr_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                    (char const *)(str2_16),(rsize_t)128,& sub);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)81,rc); /* printf_va_253 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)86,rc); /* printf_va_254 */
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),(rsize_t)0,
                    & sub);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)94,rc); /* printf_va_255 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)99,rc); /* printf_va_256 */
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)((4UL << 10) + (unsigned long)1),& sub);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)107,rc); /* printf_va_257 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                  (unsigned int)112,rc); /* printf_va_258 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)123,rc); /* printf_va_259 */
  if (sub != str1_17) printf("%s %u  Error rc=%d \n",
                             (char *)"test_strcasestr_s",(unsigned int)128,
                             rc); /* printf_va_260 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) {
    printf("%s %u  Error strcasestr_s() does not have same return as strcasestr() when str1 & str2 are zero length strings. rc=%u \n",
           (char *)"test_strcasestr_s",(unsigned int)135,(unsigned int)rc); /* printf_va_261 */
    printf("str1:[%s]\n",str1_17); /* printf_va_262 */
    printf("str2:[%s]\n",str2_16); /* printf_va_263 */
    printf("strcasestr_s returns:[%p]\n",(void *)sub); /* printf_va_264 */
    printf("strcasestr   returns:[%p]\n\n",(void *)std_sub); /* printf_va_265 */
  }
  str1_17[0] = (char)'\000';
  strcpy(str1_17,"key");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)150,rc); /* printf_va_266 */
  if (sub != str1_17) printf("%s %u  Error rc=%d \n",
                             (char *)"test_strcasestr_s",(unsigned int)155,
                             rc); /* printf_va_267 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) {
    printf("%s %u  Error strcasestr_s() does not have same return value as strcasestr() when str2 is zero length string. rc=%u \n",
           (char *)"test_strcasestr_s",(unsigned int)162,(unsigned int)rc); /* printf_va_268 */
    printf("str1:[%s]\n",str1_17); /* printf_va_269 */
    printf("str2:[%s]\n",str2_16); /* printf_va_270 */
    printf("strcasestr_s returns:[%p]\n",(void *)sub); /* printf_va_271 */
    printf("strcasestr   returns:[%p]\n\n",(void *)std_sub); /* printf_va_272 */
  }
  strcpy(str1_17,"keep it all together");
  str2_16[0] = (char)'\000';
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)178,rc); /* printf_va_273 */
  if (sub != str1_17) printf("%s %u  Error rc=%d \n",
                             (char *)"test_strcasestr_s",(unsigned int)183,
                             rc); /* printf_va_274 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) {
    printf("%s %u  Error strcasestr_s() does not have same return value as strcasestr() when str2 is zero length string. rc=%u \n",
           (char *)"test_strcasestr_s",(unsigned int)190,(unsigned int)rc); /* printf_va_275 */
    printf("str1:[%s]\n",str1_17); /* printf_va_276 */
    printf("str2:[%s]\n",str2_16); /* printf_va_277 */
    printf("strcasestr_s returns:[%p]\n",(void *)sub); /* printf_va_278 */
    printf("strcasestr   returns:[%p]\n\n",(void *)std_sub); /* printf_va_279 */
  }
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"kee");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)206,rc); /* printf_va_280 */
  if (sub != str1_17) printf("%s %u  Error rc=%d \n",
                             (char *)"test_strcasestr_s",(unsigned int)211,
                             rc); /* printf_va_281 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"eep it");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)223,rc); /* printf_va_282 */
  if (sub != & str1_17[1]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)228,rc); /* printf_va_283 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"ethe");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)240,rc); /* printf_va_284 */
  if (sub != & str1_17[15]) printf("%s %u  Error rc=%d \n",
                                   (char *)"test_strcasestr_s",
                                   (unsigned int)245,rc); /* printf_va_285 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"er");
  len1 = strlen((char const *)(str1_17));
  len2 = strlen((char const *)(str2_16));
  rc = strcasestr_s(str1_17,len1,(char const *)(str2_16),len2,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)260,rc); /* printf_va_286 */
  if (sub != & str1_17[18]) printf("%s %u  Error rc=%d \n",
                                   (char *)"test_strcasestr_s",
                                   (unsigned int)265,rc); /* printf_va_287 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) {
    printf("%s %u  Error strcasestr_s() does not have same return value as strcasestr() when str2 is substring of the end of str1. rc=%u \n",
           (char *)"test_strcasestr_s",(unsigned int)272,(unsigned int)rc); /* printf_va_288 */
    printf("str1:[%s]\n",str1_17); /* printf_va_289 */
    printf("str2:[%s]\n",str2_16); /* printf_va_290 */
    printf("strcasestr_s returns:[%p]\n",(void *)sub); /* printf_va_291 */
    printf("strcasestr   returns:[%p]\n\n",(void *)std_sub); /* printf_va_292 */
  }
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"er");
  len1 = strlen((char const *)(str1_17));
  len2 = strlen((char const *)(str2_16));
  rc = strcasestr_s(str1_17,len1,(char const *)(str2_16),(rsize_t)2,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)291,rc); /* printf_va_293 */
  if (sub != & str1_17[18]) printf("%s %u  Error rc=%d \n",
                                   (char *)"test_strcasestr_s",
                                   (unsigned int)296,rc); /* printf_va_294 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) {
    printf("%s %u  Error strcasestr_s() does not have same return value as strcasestr() when str2 is substring of middle of str1. rc=%u \n",
           (char *)"test_strcasestr_s",(unsigned int)303,(unsigned int)rc); /* printf_va_295 */
    printf("str1:[%s]\n",str1_17); /* printf_va_296 */
    printf("str2:[%s]\n",str2_16); /* printf_va_297 */
    printf("strcasestr_s returns:[%p]\n",(void *)sub); /* printf_va_298 */
    printf("strcasestr   returns:[%p]\n\n",(void *)std_sub); /* printf_va_299 */
  }
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"it all");
  rc = strcasestr_s(str1_17,(rsize_t)3,(char const *)(str2_16),(rsize_t)128,
                    & sub);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)318,rc); /* printf_va_300 */
  if (sub != (char *)0) printf("%s %u  Error rc=%d \n",
                               (char *)"test_strcasestr_s",(unsigned int)323,
                               rc); /* printf_va_301 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"it all");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),(rsize_t)1,
                    & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)334,rc); /* printf_va_302 */
  if (sub != & str1_17[5]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)339,rc); /* printf_va_303 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"it all");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),(rsize_t)2,
                    & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)350,rc); /* printf_va_304 */
  if (sub != & str1_17[5]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)355,rc); /* printf_va_305 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"it all");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),(rsize_t)5,
                    & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)366,rc); /* printf_va_306 */
  if (sub != & str1_17[5]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)371,rc); /* printf_va_307 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"1234");
  len1 = strlen((char const *)(str1_17));
  rc = strcasestr_s(str1_17,len1,(char const *)(str2_16),(rsize_t)128,& sub);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                        (unsigned int)383,rc); /* printf_va_308 */
  if (sub != (char *)0) printf("%s %u  Error rc=%d \n",
                               (char *)"test_strcasestr_s",(unsigned int)388,
                               rc); /* printf_va_309 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"IT ALL");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcasestr_s",
                      (unsigned int)399,rc); /* printf_va_310 */
  if (sub != & str1_17[5]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)404,rc); /* printf_va_311 */
  strcpy(str1_17,"keep it all together");
  strcpy(str2_16,"EEP");
  rc = strcasestr_s(str1_17,(rsize_t)128,(char const *)(str2_16),
                    (rsize_t)128,& sub);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_strcasestr_s",
                      (unsigned int)416,(unsigned int)rc); /* printf_va_312 */
  if (sub != & str1_17[1]) printf("%s %u  Error rc=%u \n",
                                  (char *)"test_strcasestr_s",
                                  (unsigned int)421,(unsigned int)rc); /* printf_va_313 */
  std_sub = strcasestr((char const *)(str1_17),(char const *)(str2_16));
  if ((int)sub != (int)std_sub) printf("%s %u  Error rc=%u \n",
                                       (char *)"test_strcasestr_s",
                                       (unsigned int)428,(unsigned int)rc); /* printf_va_314 */
  __retres = 0;
  return __retres;
}

static char str1_2[128];
static char str2_2[128];
int test_strcat_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  int32_t len1;
  int32_t len2;
  int32_t len3;
  size_t tmp;
  size_t tmp_0;
  size_t tmp_1;
  rc = strcat_s((char *)0,(rsize_t)128,(char const *)(str2_2));
  if (rc != 400) ;
  rc = strcat_s(str1_2,(rsize_t)128,(char const *)0);
  if (rc != 400) ;
  rc = strcat_s(str1_2,(rsize_t)0,(char const *)(str2_2));
  if (rc != 401) ;
  rc = strcat_s(str1_2,(rsize_t)((4UL << 10) + (unsigned long)1),
                (char const *)(str2_2));
  if (rc != 403) ;
  strcpy(str1_2,"aaaaaaaaaa");
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)1,(char const *)(str2_2));
  if (rc != 407) ;
  if ((int)str1_2[0] != '\000') ;
  strcpy(str1_2,"aaaaaaaaaa");
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)2,(char const *)(str2_2));
  if (rc != 407) ;
  if ((int)str1_2[0] != '\000') ;
  strcpy(str1_2,"aaaaaaaaaa");
  strcpy(str2_2,"keep it simple");
  tmp = strlen((char const *)(str1_2));
  len1 = (int32_t)tmp;
  tmp_0 = strlen((char const *)(str2_2));
  len2 = (int32_t)tmp_0;
  rc = strcat_s(str1_2,(rsize_t)50,(char const *)(str2_2));
  if (rc != 0) ;
  tmp_1 = strlen((char const *)(str1_2));
  len3 = (int32_t)tmp_1;
  if (len3 != len1 + len2) ;
  str1_2[0] = (char)'\000';
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)1,(char const *)(str2_2));
  if (rc != 406) ;
  if ((int)str1_2[0] != '\000') ;
  str1_2[0] = (char)'\000';
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)2,(char const *)(str2_2));
  if (rc != 406) ;
  if ((int)str1_2[0] != '\000') ;
  str1_2[0] = (char)'\000';
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)20,(char const *)(str2_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_2),(char const *)(str2_2));
  if (ind != 0) ;
  str1_2[0] = (char)'\000';
  str2_2[0] = (char)'\000';
  rc = strcat_s(str1_2,(rsize_t)128,(char const *)(str2_2));
  if (rc != 0) ;
  if ((int)str1_2[0] != '\000') ;
  str1_2[0] = (char)'\000';
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)128,(char const *)(str2_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_2),(char const *)(str2_2));
  if (ind != 0) ;
  strcpy(str1_2,"qqweqq");
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)128,(char const *)(str2_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_2),"qqweqqkeep it simple");
  if (ind != 0) ;
  strcpy(str1_2,"1234");
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)12,(char const *)(str2_2));
  if (rc != 406) ;
  strcpy(str1_2,"1234");
  strcpy(str2_2,"keep it simple");
  rc = strcat_s(str1_2,(rsize_t)52,(char const *)(str2_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_2),"1234keep it simple");
  if (ind != 0) ;
  strcpy(str1_2,"12345678901234567890");
  rc = strcat_s(str1_2,(rsize_t)8,(char const *)(& str1_2[7]));
  if (rc != 404) ;
  if ((int)str1_2[0] != '\000') ;
  strcpy(str1_2,"123456789");
  rc = strcat_s(str1_2,(rsize_t)9,(char const *)(& str1_2[8]));
  if (rc != 404) ;
  if ((int)str1_2[0] != '\000') ;
  strcpy(str2_2,"123");
  strcpy(str1_2,"keep it simple");
  rc = strcat_s(str2_2,(rsize_t)31,(char const *)(str1_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str2_2),"123keep it simple");
  if (ind != 0) ;
  strcpy(str2_2,"1234");
  strcpy(str1_2,"56789");
  rc = strcat_s(str2_2,(rsize_t)10,(char const *)(str1_2));
  if (rc != 0) ;
  ind = strcmp((char const *)(str2_2),"123456789");
  if (ind != 0) ;
  __retres = 0;
  return __retres;
}

static char str1_3[128];
static char str2_3[128];
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_315(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_316(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_317(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_318(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_319(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_320(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_321(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_322(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_323(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_324(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_325(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_326(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_327(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_328(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_329(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_330(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_331(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_332(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_333(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_334(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_335(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_336(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_337(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_338(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_339(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_340(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_341(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_342(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_343(char const * restrict format, char *param0,
                  unsigned int param1, int param2, int param3, int param4);

int test_strcmp_s(void)
{
  int __retres;
  errno_t rc;
  int ind;
  int std_ind;
  rc = strcmp_s((char const *)0,(rsize_t)128,(char const *)(str2_3),& ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                        (unsigned int)28,rc); /* printf_va_315 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)33,ind,rc); /* printf_va_316 */
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)0,& ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                        (unsigned int)41,rc); /* printf_va_317 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)46,ind,rc); /* printf_va_318 */
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                (int *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                        (unsigned int)54,rc); /* printf_va_319 */
  rc = strcmp_s((char const *)(str1_3),(rsize_t)0,(char const *)(str2_3),
                & ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                        (unsigned int)62,rc); /* printf_va_320 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)67,ind,rc); /* printf_va_321 */
  rc = strcmp_s((char const *)(str1_3),
                (rsize_t)((4UL << 10) + (unsigned long)1),
                (char const *)(str2_3),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                        (unsigned int)75,rc); /* printf_va_322 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)80,ind,rc); /* printf_va_323 */
  str1_3[0] = (char)'\000';
  str2_3[0] = (char)'\000';
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)91,rc); /* printf_va_324 */
  if (ind != 0) printf("%s %u  Error  ind=%d rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)96,ind,rc); /* printf_va_325 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str2_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)102,ind,
                             std_ind,rc); /* printf_va_326 */
  strcpy(str1_3,"keep it simple");
  strcpy(str2_3,"keep it simple");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)5,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)113,rc); /* printf_va_327 */
  if (ind != 0) printf("%s %u  ind=%d  rc=%d \n",(char *)"test_strcmp_s",
                       (unsigned int)118,ind,rc); /* printf_va_328 */
  strcpy(str1_3,"Keep it simple");
  strcpy(str2_3,"keep it simple");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)130,rc); /* printf_va_329 */
  if (ind != -32) printf("%s %u  Error ind=%d  rc=%d \n",
                         (char *)"test_strcmp_s",(unsigned int)135,ind,rc); /* printf_va_330 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str2_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)141,ind,
                             std_ind,rc); /* printf_va_331 */
  strcpy(str1_3,"keep it simple");
  strcpy(str2_3,"keeP it simple");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)153,rc); /* printf_va_332 */
  if (ind != 32) printf("%s %u  Error ind=%d  rc=%d \n",
                        (char *)"test_strcmp_s",(unsigned int)158,ind,rc); /* printf_va_333 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str2_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)164,ind,
                             std_ind,rc); /* printf_va_334 */
  strcpy(str1_3,"keep it simple");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str1_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)174,rc); /* printf_va_335 */
  if (ind != 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)179,ind,rc); /* printf_va_336 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str1_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)186,ind,
                             std_ind,rc); /* printf_va_337 */
  strcpy(str1_3,"keep it simplified");
  strcpy(str2_3,"keep it simple");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)197,rc); /* printf_va_338 */
  if (ind <= 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)202,ind,rc); /* printf_va_339 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str2_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)209,ind,
                             std_ind,rc); /* printf_va_340 */
  strcpy(str1_3,"keep it simple");
  strcpy(str2_3,"keep it simplified");
  rc = strcmp_s((char const *)(str1_3),(rsize_t)128,(char const *)(str2_3),
                & ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcmp_s",
                      (unsigned int)220,rc); /* printf_va_341 */
  if (ind >= 0) printf("%s %u  Error ind=%d  rc=%d \n",
                       (char *)"test_strcmp_s",(unsigned int)225,ind,rc); /* printf_va_342 */
  std_ind = strcmp((char const *)(str1_3),(char const *)(str2_3));
  if (ind != std_ind) printf("%s %u  ind=%d  std_ind=%d  rc=%d \n",
                             (char *)"test_strcmp_s",(unsigned int)232,ind,
                             std_ind,rc); /* printf_va_343 */
  __retres = 0;
  return __retres;
}

int test_strcmpfld_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  int ind;
  char str1_17[128];
  char str2_16[128];
  rc = strcmpfld_s((char const *)0,(rsize_t)128,(char const *)(str2_16),
                   & ind);
  if (rc != 400) ;
  len = (rsize_t)5;
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)0,& ind);
  if (rc != 400) ;
  len = (rsize_t)5;
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),
                   (int *)0);
  if (rc != 400) ;
  rc = strcmpfld_s((char const *)(str1_17),(rsize_t)0,
                   (char const *)(str2_16),& ind);
  if (rc != 401) ;
  rc = strcmpfld_s((char const *)(str1_17),
                   (rsize_t)((4UL << 10) + (unsigned long)1),
                   (char const *)(str2_16),& ind);
  if (rc != 403) ;
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)1;
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)2;
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)3;
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = strlen((char const *)(str1_17));
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str1_17[10] = (char)'\000';
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_16[10] = (char)'\000';
  len = strlen((char const *)(str1_17));
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = strlen((char const *)(str1_17));
  str1_17[0] = (char)'\000';
  str1_17[15] = (char)'\000';
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_16[0] = (char)'\000';
  str2_16[15] = (char)'\000';
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = strlen((char const *)(str1_17));
  str1_17[3] = (char)'\000';
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_16[3] = (char)'\000';
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = strlen((char const *)(str1_17));
  str1_17[1] = (char)'\000';
  str1_17[20] = (char)'\000';
  strcpy(str2_16,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_16[1] = (char)'\000';
  str2_16[20] = (char)'\000';
  rc = strcmpfld_s((char const *)(str1_17),len,(char const *)(str2_16),& ind);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  __retres = 0;
  return __retres;
}

static char str1_4[128];
static char str2_4[128];
int test_strcpy_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  rc = strcpy_s((char *)0,(rsize_t)128,(char const *)(str2_4));
  if (rc != 400) ;
  strcpy(str1_4,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  rc = strcpy_s(str1_4,(rsize_t)5,(char const *)0);
  if (rc != 400) ;
  if ((int)str1_4[0] != '\000') ;
  rc = strcpy_s(str1_4,(rsize_t)0,(char const *)(str2_4));
  if (rc != 401) ;
  rc = strcpy_s(str1_4,(rsize_t)((4UL << 10) + (unsigned long)1),
                (char const *)(str2_4));
  if (rc != 403) ;
  strcpy(str1_4,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_4[0] = (char)'\000';
  rc = strcpy_s(str1_4,(rsize_t)(128 / 2),(char const *)(str2_4));
  if (rc != 0) ;
  if ((int)str1_4[0] != '\000') ;
  strcpy(str1_4,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  rc = strcpy_s(str1_4,(rsize_t)128,(char const *)(str1_4));
  if (rc != 0) ;
  strcpy(str1_4,"keep it simple");
  rc = strcpy_s(str1_4,(rsize_t)128,(char const *)(& str1_4[5]));
  if (rc != 404) ;
  if ((int)str1_4[0] != '\000') ;
  strcpy(str1_4,"keep it simple");
  str2_4[0] = (char)'\000';
  rc = strcpy_s(str1_4,(rsize_t)128,(char const *)(str2_4));
  if (rc != 0) ;
  if ((int)str1_4[0] != '\000') ;
  str1_4[0] = (char)'\000';
  strcpy(str2_4,"keep it simple");
  rc = strcpy_s(str1_4,(rsize_t)128,(char const *)(str2_4));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_4),(char const *)(str2_4));
  if (ind != 0) ;
  strcpy(str1_4,"qqweqeqeqeq");
  strcpy(str2_4,"keep it simple");
  rc = strcpy_s(str1_4,(rsize_t)128,(char const *)(str2_4));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_4),(char const *)(str2_4));
  if (ind != 0) ;
  strcpy(str1_4,"qqweqeqeqeq");
  strcpy(str2_4,"keep it simple");
  rc = strcpy_s(str1_4,(rsize_t)1,(char const *)(str2_4));
  if (rc != 406) ;
  if ((int)str1_4[0] != '\000') ;
  strcpy(str1_4,"qqweqeqeqeq");
  strcpy(str2_4,"keep it simple");
  rc = strcpy_s(str1_4,(rsize_t)2,(char const *)(str2_4));
  if (rc != 406) ;
  if ((int)str1_4[0] != '\000') ;
  strcpy(str1_4,"qqweqeqeqeq");
  strcpy(str2_4,"it");
  rc = strcpy_s(str1_4,(rsize_t)3,(char const *)(str2_4));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_4),(char const *)(str2_4));
  if (ind != 0) ;
  strcpy(str1_4,"qq12345weqeqeqeq");
  strcpy(str2_4,"it");
  rc = strcpy_s(str1_4,(rsize_t)10,(char const *)(str2_4));
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_4),(char const *)(str2_4));
  if (ind != 0) ;
  __retres = 0;
  return __retres;
}

int test_strcpyfld_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  char str1_17[128];
  char str2_16[128];
  size_t tmp;
  rsize_t slen = (rsize_t)0;
  rc = strcpyfld_s((char *)0,(rsize_t)128,(char const *)(str2_16),slen);
  if (rc != 400) ;
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)5;
  slen = (rsize_t)5;
  rc = strcpyfld_s(str1_17,len,(char const *)0,slen);
  if (rc != 400) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  len = (rsize_t)5;
  slen = (rsize_t)5;
  rc = strcpyfld_s(str1_17,(rsize_t)0,(char const *)(str2_16),slen);
  if (rc != 401) ;
  len = (rsize_t)5;
  slen = (rsize_t)5;
  rc = strcpyfld_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                   (char const *)(str2_16),slen);
  if (rc != 403) ;
  len = (rsize_t)5;
  slen = (rsize_t)0;
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 401) ;
  len = (rsize_t)5;
  slen = len + (rsize_t)1;
  rc = strcpyfld_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                   (char const *)(str2_16),slen);
  if (rc != 403) ;
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)1;
  strcpy(str2_16,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  slen = (rsize_t)1;
  str2_16[0] = (char)'\000';
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)2;
  strcpy(str2_16,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  slen = (rsize_t)2;
  str2_16[0] = (char)'\000';
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)3;
  strcpy(str2_16,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  slen = (rsize_t)3;
  str2_16[0] = (char)'\000';
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  slen = strlen((char const *)(str2_16));
  str2_16[0] = (char)'\000';
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  tmp = strlen((char const *)(str1_17));
  len = tmp + (size_t)2;
  str1_17[20] = (char)'\000';
  strcpy(str2_16,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  slen = strlen((char const *)(str1_17));
  str2_16[0] = (char)'\000';
  str2_16[20] = (char)'\000';
  rc = strcpyfld_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < slen) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  __retres = 0;
  return __retres;
}

int test_strcpyfldin_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  rsize_t slen;
  char str1_17[128];
  char str2_16[128];
  rc = strcpyfldin_s((char *)0,(rsize_t)128,(char const *)(str2_16),
                     (rsize_t)128);
  if (rc != 400) ;
  len = (rsize_t)5;
  rc = strcpyfldin_s(str1_17,len,(char const *)0,(rsize_t)128);
  if (rc != 400) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  rc = strcpyfldin_s(str1_17,(rsize_t)0,(char const *)(str2_16),(rsize_t)128);
  if (rc != 401) ;
  rc = strcpyfldin_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                     (char const *)(str2_16),(rsize_t)128);
  if (rc != 403) ;
  strcpy(str1_17,"aaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = strlen((char const *)(str1_17));
  slen = strlen((char const *)(str2_16));
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc == 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != 0) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)1;
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)2;
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)3;
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)128;
  rc = strcpyfldin_s(str1_17,len,(char const *)(str1_17),len);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple for best results ");
  len = strlen((char const *)(str1_17));
  rc = strcpyfldin_s(str1_17,len,(char const *)(& str1_17[5]),len);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple for best results ");
  len = (rsize_t)20;
  rc = strcpyfldin_s(& str1_17[10],len,(char const *)(str1_17),len);
  if (rc != 404) ;
  i = (uint32_t)10;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"KEEP IT SIMPLE PLEASE");
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),len);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"always keep it simple");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"keep it simple");
  slen = strlen((char const *)(str2_16));
  rc = strcpyfldin_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < slen) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  __retres = 0;
  return __retres;
}

int test_strcpyfldout_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  char str1_17[128];
  char str2_16[128];
  rsize_t slen = (rsize_t)0;
  rc = strcpyfldout_s((char *)0,(rsize_t)128,(char const *)(str2_16),slen);
  if (rc != 400) ;
  len = (rsize_t)5;
  rc = strcpyfldout_s(str1_17,len,(char const *)0,len);
  if (rc != 400) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  rc = strcpyfldout_s(str1_17,(rsize_t)0,(char const *)(str2_16),
                      (rsize_t)128);
  if (rc != 401) ;
  rc = strcpyfldout_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                      (char const *)(str2_16),(rsize_t)128);
  if (rc != 403) ;
  len = (rsize_t)5;
  slen = (rsize_t)0;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 401) ;
  len = (rsize_t)5;
  slen = (rsize_t)6;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 403) ;
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)1;
  slen = (rsize_t)1;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)2;
  slen = (rsize_t)2;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len - (rsize_t)1) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_16,"01234567890123456789");
  len = (rsize_t)3;
  slen = (rsize_t)3;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len - (rsize_t)1) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  len = (rsize_t)128;
  rc = strcpyfldout_s(str1_17,len,(char const *)(str1_17),len);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple for best results");
  len = strlen((char const *)(str1_17));
  rc = strcpyfldout_s(str1_17,len,(char const *)(& str1_17[5]),len);
  if (rc != 404) ;
  i = (uint32_t)0;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple for best results ");
  len = (rsize_t)20;
  rc = strcpyfldout_s(& str1_17[10],len,(char const *)(str1_17),len);
  if (rc != 404) ;
  i = (uint32_t)10;
  while (i < len) {
    if ((int)str1_17[i] != '\000') ;
    i ++;
  }
  strcpy(str1_17,"keep it simple");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"aaaaaaaaaaaaaa");
  slen = strlen((char const *)(str2_16));
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < len - (rsize_t)1) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  strcpy(str1_17,"always keep it simple");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"keep it simple");
  slen = strlen((char const *)(str2_16));
  rc = strcpyfldout_s(str1_17,len,(char const *)(str2_16),slen);
  if (rc != 0) ;
  i = (uint32_t)0;
  while (i < slen) {
    if ((int)str1_17[i] != (int)str2_16[i]) ;
    i ++;
  }
  __retres = 0;
  return __retres;
}

static char str1_5[128];
static char str2_5[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_344(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_345(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_346(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_347(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_348(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_349(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_350(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_351(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_352(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_353(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_354(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_355(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_356(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_357(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_358(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_359(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_360(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_361(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_362(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_363(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_364(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_365(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_366(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_367(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_368(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_369(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_370(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_371(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_372(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_373(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_374(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_375(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_376(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_377(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_378(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_379(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_380(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_381(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_382(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_383(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_384(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_385(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_386(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_387(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_388(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_389(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_390(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_391(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

int test_strcspn_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t count;
  int std_count;
  size_t tmp;
  size_t tmp_0;
  size_t tmp_1;
  size_t tmp_2;
  unsigned int testno = (unsigned int)0;
  testno ++;
  printf("Test #%d: NULL Scan String Check\n",(int)testno); /* printf_va_344 */
  rc = strcspn_s((char const *)0,(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)33,rc); /* printf_va_345 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)38,
                                  count,rc); /* printf_va_346 */
  testno ++;
  printf("Test #%d: NULL Exclusion String Check: \n",(int)testno); /* printf_va_347 */
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)0,
                 (rsize_t)128,& count);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)48,rc); /* printf_va_348 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)53,
                                  count,rc); /* printf_va_349 */
  testno ++;
  printf("Test #%d: NULL Count parameter Check: \n",(int)testno); /* printf_va_350 */
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)63,rc); /* printf_va_351 */
  testno ++;
  printf("Test #%d:Zero Length Scan String Check\n",(int)testno); /* printf_va_352 */
  rc = strcspn_s((char const *)(str1_5),(rsize_t)0,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)73,rc); /* printf_va_353 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)78,
                                  count,rc); /* printf_va_354 */
  testno ++;
  printf("Test #%d:Zero Length Exclusion String Check\n",(int)testno); /* printf_va_355 */
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)0,& count);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)88,rc); /* printf_va_356 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)93,
                                  count,rc); /* printf_va_357 */
  testno ++;
  printf("Test #%d:Exceed Max Length Scan String Check\n",(int)testno); /* printf_va_358 */
  rc = strcspn_s((char const *)(str1_5),
                 (rsize_t)((4UL << 10) + (unsigned long)1),
                 (char const *)(str2_5),(rsize_t)128,& count);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)103,rc); /* printf_va_359 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)108,
                                  count,rc); /* printf_va_360 */
  testno ++;
  printf("Test #%d:Exceed Max Length Exclusion String Check\n",(int)testno); /* printf_va_361 */
  rc = strcspn_s((char const *)(str1_5),(rsize_t)(4UL << 10),
                 (char const *)(str2_5),
                 (rsize_t)((4UL << 10) + (unsigned long)1),& count);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                        (unsigned int)118,rc); /* printf_va_362 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)123,
                                  count,rc); /* printf_va_363 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_364 */
  str1_5[0] = (char)'\000';
  str2_5[0] = (char)'\000';
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)136,rc); /* printf_va_365 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)141,
                                  count,rc); /* printf_va_366 */
  tmp = strcspn((char const *)(str1_5),(char const *)(str2_5));
  std_count = (int)tmp;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strcspn_s",
                                          (unsigned int)147,count,std_count,
                                          rc); /* printf_va_367 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_368 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"KEEP");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)1,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)161,rc); /* printf_va_369 */
  if (count != (rsize_t)1) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)166,
                                  count,rc); /* printf_va_370 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_371 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"KEEP");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)2,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)180,rc); /* printf_va_372 */
  if (count != (rsize_t)2) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)185,
                                  count,rc); /* printf_va_373 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_374 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"KEEP");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)3,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)199,rc); /* printf_va_375 */
  if (count != (rsize_t)3) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)204,
                                  count,rc); /* printf_va_376 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_377 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"KEEP");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)6,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)219,rc); /* printf_va_378 */
  if (count != (rsize_t)6) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)224,
                                  count,rc); /* printf_va_379 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_380 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"ABCDEF");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)6,(char const *)(str2_5),
                 (rsize_t)2,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)238,rc); /* printf_va_381 */
  if (count != (rsize_t)6) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strcspn_s",(unsigned int)243,
                                  count,std_count,rc); /* printf_va_382 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_383 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"keep");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)257,rc); /* printf_va_384 */
  tmp_0 = strcspn((char const *)(str1_5),(char const *)(str2_5));
  std_count = (int)tmp_0;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strcspn_s",
                                          (unsigned int)263,count,std_count,
                                          rc); /* printf_va_385 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_386 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"notincluded");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)277,rc); /* printf_va_387 */
  tmp_1 = strcspn((char const *)(str1_5),(char const *)(str2_5));
  std_count = (int)tmp_1;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strcspn_s",
                                          (unsigned int)283,count,std_count,
                                          rc); /* printf_va_388 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_389 */
  strcpy(str1_5,"keep it simple");
  strcpy(str2_5,"1234567890");
  rc = strcspn_s((char const *)(str1_5),(rsize_t)128,(char const *)(str2_5),
                 (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strcspn_s",
                      (unsigned int)297,rc); /* printf_va_390 */
  tmp_2 = strcspn((char const *)(str1_5),(char const *)(str2_5));
  std_count = (int)tmp_2;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strcspn_s",
                                          (unsigned int)303,count,std_count,
                                          rc); /* printf_va_391 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_392(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_393(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_394(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_395(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_396(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_397(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_398(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_399(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_400(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_401(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_402(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_403(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_404(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_405(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_406(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_407(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_408(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

int test_strfirstchar_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t len;
  char *first;
  char str1_17[128];
  rc = strfirstchar_s((char *)0,(rsize_t)128,(char)'a',& first);
  if (rc != 400) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)27,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_392 */
  if (first) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                    (char *)"test_strfirstchar_s",(unsigned int)32,
                    (void *)(str1_17),(void *)first,rc); /* printf_va_393 */
  rc = strfirstchar_s(str1_17,(rsize_t)128,(char)'a',(char **)0);
  if (rc != 400) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)40,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_394 */
  rc = strfirstchar_s(str1_17,(rsize_t)0,(char)'a',& first);
  if (rc != 401) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)48,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_395 */
  if (first) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                    (char *)"test_strfirstchar_s",(unsigned int)53,
                    (void *)(str1_17),(void *)first,rc); /* printf_va_396 */
  rc = strfirstchar_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                      (char)'a',& first);
  if (rc != 403) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)61,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_397 */
  if (first) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                    (char *)"test_strfirstchar_s",(unsigned int)66,
                    (void *)(str1_17),(void *)first,rc); /* printf_va_398 */
  str1_17[0] = (char)'\000';
  rc = strfirstchar_s(str1_17,(rsize_t)128,(char)'a',& first);
  if (rc != 409) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)76,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_399 */
  if (first) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                    (char *)"test_strfirstchar_s",(unsigned int)81,
                    (void *)(str1_17),(void *)first,rc); /* printf_va_400 */
  strcpy(str1_17,"Keep it simple");
  rc = strfirstchar_s(str1_17,(rsize_t)128,(char)'z',& first);
  if (rc != 409) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                        (char *)"test_strfirstchar_s",(unsigned int)91,
                        (void *)(str1_17),(void *)first,rc); /* printf_va_401 */
  if (first) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                    (char *)"test_strfirstchar_s",(unsigned int)96,
                    (void *)(str1_17),(void *)first,rc); /* printf_va_402 */
  strcpy(str1_17,"kEEp it simple");
  rc = strfirstchar_s(str1_17,(rsize_t)128,(char)'E',& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstchar_s",
                      (unsigned int)106,rc); /* printf_va_403 */
  if (first != & str1_17[1]) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                                    (char *)"test_strfirstchar_s",
                                    (unsigned int)111,(void *)(str1_17),
                                    (void *)first,rc); /* printf_va_404 */
  strcpy(str1_17,"keep it simpleZ");
  len = strlen((char const *)(str1_17));
  rc = strfirstchar_s(str1_17,len,(char)'Z',& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstchar_s",
                      (unsigned int)122,rc); /* printf_va_405 */
  if (first != & str1_17[14]) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                                     (char *)"test_strfirstchar_s",
                                     (unsigned int)127,(void *)(str1_17),
                                     (void *)first,rc); /* printf_va_406 */
  strcpy(str1_17,"keep it simpleZZ");
  rc = strfirstchar_s(str1_17,(rsize_t)128,(char)'Z',& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstchar_s",
                      (unsigned int)137,rc); /* printf_va_407 */
  if (first != & str1_17[14]) printf("%s %u  Error  str1=%p  first=%p  rc=%d \n",
                                     (char *)"test_strfirstchar_s",
                                     (unsigned int)142,(void *)(str1_17),
                                     (void *)first,rc); /* printf_va_408 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_409(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_410(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_411(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_412(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_413(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_414(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_415(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_416(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_417(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_418(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_419(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_420(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_421(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_422(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_423(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_424(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_425(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_426(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_427(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_428(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_429(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_430(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_431(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_432(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_433(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_434(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_435(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

int test_strfirstdiff_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t ind;
  char str1_17[128];
  char str2_16[128];
  rc = strfirstdiff_s((char const *)0,(rsize_t)128,(char const *)(str2_16),
                      & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)28,rc); /* printf_va_409 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)33,ind,rc); /* printf_va_410 */
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,(char const *)0,
                      & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)41,rc); /* printf_va_411 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)46,ind,rc); /* printf_va_412 */
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)54,rc); /* printf_va_413 */
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)0,
                      (char const *)(str2_16),& ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)62,rc); /* printf_va_414 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)67,ind,rc); /* printf_va_415 */
  rc = strfirstdiff_s((char const *)(str1_17),
                      (rsize_t)((4UL << 10) + (unsigned long)1),
                      (char const *)(str2_16),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)75,rc); /* printf_va_416 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)80,ind,rc); /* printf_va_417 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)91,rc); /* printf_va_418 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)96,ind,rc); /* printf_va_419 */
  strcpy(str1_17,"Keep it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstdiff_s",
                      (unsigned int)107,rc); /* printf_va_420 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)112,ind,rc); /* printf_va_421 */
  strcpy(str1_17,"kEeP it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstdiff_s",
                      (unsigned int)123,rc); /* printf_va_422 */
  if (ind != (rsize_t)1) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)128,ind,rc); /* printf_va_423 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keEp IT simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstdiff_s",
                      (unsigned int)139,rc); /* printf_va_424 */
  if (ind != (rsize_t)2) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)144,ind,rc); /* printf_va_425 */
  strcpy(str1_17,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str1_17),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)154,rc); /* printf_va_426 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)159,ind,rc); /* printf_va_427 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)1,
                      (char const *)(str2_16),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)170,rc); /* printf_va_428 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)175,ind,rc); /* printf_va_429 */
  strcpy(str1_17,"keep it simplE");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)13,
                      (char const *)(str2_16),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstdiff_s",(unsigned int)186,rc); /* printf_va_430 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstdiff_s",
                                (unsigned int)191,ind,rc); /* printf_va_431 */
  strcpy(str1_17,"keep it simplE");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)14,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstdiff_s",
                      (unsigned int)202,rc); /* printf_va_432 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strfirstdiff_s",
                                 (unsigned int)207,ind,rc); /* printf_va_433 */
  strcpy(str1_17,"keep it simplE");
  strcpy(str2_16,"keep it simple");
  rc = strfirstdiff_s((char const *)(str1_17),(rsize_t)55,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstdiff_s",
                      (unsigned int)218,rc); /* printf_va_434 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strfirstdiff_s",
                                 (unsigned int)223,ind,rc); /* printf_va_435 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_436(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_437(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_438(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_439(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_440(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_441(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_442(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_443(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_444(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_445(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_446(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_447(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_448(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_449(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_450(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_451(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_452(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_453(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_454(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_455(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_456(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_457(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_458(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_459(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_460(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_461(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_462(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_463(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_464(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

int test_strfirstsame_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t ind;
  char str1_17[128];
  char str2_16[128];
  rc = strfirstsame_s((char const *)0,(rsize_t)128,(char const *)(str2_16),
                      & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)28,rc); /* printf_va_436 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)33,ind,rc); /* printf_va_437 */
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,(char const *)0,
                      & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)41,rc); /* printf_va_438 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)46,ind,rc); /* printf_va_439 */
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)54,rc); /* printf_va_440 */
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)0,
                      (char const *)(str2_16),& ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)62,rc); /* printf_va_441 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)67,ind,rc); /* printf_va_442 */
  rc = strfirstsame_s((char const *)(str1_17),
                      (rsize_t)((4UL << 10) + (unsigned long)1),
                      (char const *)(str2_16),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)75,rc); /* printf_va_443 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)80,ind,rc); /* printf_va_444 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)91,rc); /* printf_va_445 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)96,ind,rc); /* printf_va_446 */
  strcpy(str1_17,"kEEP it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstsame_s",
                      (unsigned int)107,rc); /* printf_va_447 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)112,ind,rc); /* printf_va_448 */
  strcpy(str1_17,"Keep it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstsame_s",
                      (unsigned int)123,rc); /* printf_va_449 */
  if (ind != (rsize_t)1) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)128,ind,rc); /* printf_va_450 */
  strcpy(str1_17,"KEEP it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstsame_s",
                      (unsigned int)139,rc); /* printf_va_451 */
  if (ind != (rsize_t)4) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)144,ind,rc); /* printf_va_452 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLe");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)13,
                      (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)155,rc); /* printf_va_453 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)160,ind,rc); /* printf_va_454 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLe");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)14,
                      (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strfirstsame_s",
                      (unsigned int)171,rc); /* printf_va_455 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strfirstsame_s",
                                 (unsigned int)176,ind,rc); /* printf_va_456 */
  strcpy(str1_17,"keep it simple");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str1_17),& ind);
  if (rc != 0) printf("%s %u  Error ind=%zu  rc=%d \n",
                      (char *)"test_strfirstsame_s",(unsigned int)187,ind,rc); /* printf_va_457 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)192,ind,rc); /* printf_va_458 */
  strcpy(str1_17,"KEEP it simple");
  strcpy(str2_16,"keep it simple");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)1,
                      (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)203,ind,
                        rc); /* printf_va_459 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)208,ind,rc); /* printf_va_460 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLE");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)5,
                      (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)219,ind,
                        rc); /* printf_va_461 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)224,ind,rc); /* printf_va_462 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLE");
  rc = strfirstsame_s((char const *)(str1_17),(rsize_t)128,
                      (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strfirstsame_s",(unsigned int)235,ind,
                        rc); /* printf_va_463 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strfirstsame_s",
                                (unsigned int)240,ind,rc); /* printf_va_464 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_465(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_466(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_467(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_468(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_469(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_470(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_471(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_472(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_473(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_474(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_475(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strisalphanumeric_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strisalphanumeric_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)28,(unsigned int)((int)rc)); /* printf_va_465 */
  len = (uint32_t)0;
  rc = strisalphanumeric_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)37,(unsigned int)((int)rc)); /* printf_va_466 */
  len = (uint32_t)99999;
  rc = strisalphanumeric_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)47,(unsigned int)((int)rc)); /* printf_va_467 */
  rc = strisalphanumeric_s("",(rsize_t)128);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)56,(unsigned int)((int)rc)); /* printf_va_468 */
  strcpy(str,"123456789");
  len = (uint32_t)4;
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)67,(unsigned int)((int)rc)); /* printf_va_469 */
  strcpy(str,"N");
  rc = strisalphanumeric_s((char const *)(str),(rsize_t)1);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)77,(unsigned int)((int)rc)); /* printf_va_470 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)88,(unsigned int)((int)rc)); /* printf_va_471 */
  strcpy(str,"NowISTHETimE4us");
  len = strlen((char const *)(str));
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)99,(unsigned int)((int)rc)); /* printf_va_472 */
  strcpy(str,"qq21ego");
  len = strlen((char const *)(str));
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)110,(unsigned int)((int)rc)); /* printf_va_473 */
  strcpy(str,"1234");
  str[2] = (char)132;
  len = strlen((char const *)(str));
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)123,(unsigned int)((int)rc)); /* printf_va_474 */
  strcpy(str,"!@#$%^&*(){}[]:;\"\'?/.>,<");
  len = strlen((char const *)(str));
  rc = strisalphanumeric_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisalphanumeric_s",
                           (unsigned int)134,(unsigned int)((int)rc)); /* printf_va_475 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_476(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_477(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_478(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_479(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_480(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_481(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_482(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_483(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_484(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_485(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strisascii_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strisascii_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)27,
                           (unsigned int)((int)rc)); /* printf_va_476 */
  len = (uint32_t)0;
  rc = strisascii_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)36,
                           (unsigned int)((int)rc)); /* printf_va_477 */
  len = (uint32_t)99999;
  rc = strisascii_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)45,
                           (unsigned int)((int)rc)); /* printf_va_478 */
  rc = strisascii_s("",(rsize_t)2);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)54,
                           (unsigned int)((int)rc)); /* printf_va_479 */
  strcpy(str,"ABCDEFGHIJK");
  rc = strisascii_s((char const *)(str),(rsize_t)2);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)64,
                           (unsigned int)((int)rc)); /* printf_va_480 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strisascii_s((char const *)(str),(rsize_t)1);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)75,
                           (unsigned int)((int)rc)); /* printf_va_481 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strisascii_s((char const *)(str),(rsize_t)2);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)86,
                           (unsigned int)((int)rc)); /* printf_va_482 */
  strcpy(str,"NowISTHETimE");
  len = strlen((char const *)(str));
  rc = strisascii_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)97,
                           (unsigned int)((int)rc)); /* printf_va_483 */
  strcpy(str,"qq21ego");
  rc = strisascii_s((char const *)(str),(rsize_t)33);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)107,
                           (unsigned int)((int)rc)); /* printf_va_484 */
  strcpy(str,"1234");
  str[2] = (char)132;
  len = strlen((char const *)(str));
  rc = strisascii_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisascii_s",(unsigned int)120,
                           (unsigned int)((int)rc)); /* printf_va_485 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_486(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_487(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_488(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_489(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_490(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_491(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_492(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_493(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_494(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strisdigit_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strisdigit_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)26,
                           (unsigned int)((int)rc)); /* printf_va_486 */
  len = (uint32_t)0;
  rc = strisdigit_s("1234",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)35,
                           (unsigned int)((int)rc)); /* printf_va_487 */
  len = (uint32_t)99999;
  rc = strisdigit_s("1234",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)44,
                           (unsigned int)((int)rc)); /* printf_va_488 */
  len = (uint32_t)9;
  rc = strisdigit_s("",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)53,
                           (unsigned int)((int)rc)); /* printf_va_489 */
  strcpy(str,"123456789");
  len = (uint32_t)4;
  rc = strisdigit_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)64,
                           (unsigned int)((int)rc)); /* printf_va_490 */
  strcpy(str,"1");
  len = strlen((char const *)(str));
  rc = strisdigit_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)75,
                           (unsigned int)((int)rc)); /* printf_va_491 */
  strcpy(str,"12");
  len = strlen((char const *)(str));
  rc = strisdigit_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)86,
                           (unsigned int)((int)rc)); /* printf_va_492 */
  strcpy(str,"1abcd");
  len = strlen((char const *)(str));
  rc = strisdigit_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)97,
                           (unsigned int)((int)rc)); /* printf_va_493 */
  strcpy(str,"abcd");
  len = strlen((char const *)(str));
  rc = strisdigit_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisdigit_s",(unsigned int)108,
                           (unsigned int)((int)rc)); /* printf_va_494 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_495(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_496(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_497(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_498(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_499(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_500(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_501(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_502(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_503(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_504(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_505(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strishex_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strishex_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)26,
                           (unsigned int)((int)rc)); /* printf_va_495 */
  str[0] = (char)'\000';
  rc = strishex_s((char const *)(str),(rsize_t)5);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)35,
                           (unsigned int)((int)rc)); /* printf_va_496 */
  len = (uint32_t)0;
  rc = strishex_s("1234",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)44,
                           (unsigned int)((int)rc)); /* printf_va_497 */
  len = (uint32_t)99999;
  rc = strishex_s("1234",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)53,
                           (unsigned int)((int)rc)); /* printf_va_498 */
  len = (uint32_t)9;
  rc = strishex_s("",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)62,
                           (unsigned int)((int)rc)); /* printf_va_499 */
  strcpy(str,"123456789");
  len = (uint32_t)6;
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)73,
                           (unsigned int)((int)rc)); /* printf_va_500 */
  strcpy(str,"1");
  len = strlen((char const *)(str));
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)84,
                           (unsigned int)((int)rc)); /* printf_va_501 */
  strcpy(str,"12");
  len = strlen((char const *)(str));
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)95,
                           (unsigned int)((int)rc)); /* printf_va_502 */
  strcpy(str,"1Af");
  len = strlen((char const *)(str));
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)106,
                           (unsigned int)((int)rc)); /* printf_va_503 */
  strcpy(str,"FF");
  len = strlen((char const *)(str));
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)117,
                           (unsigned int)((int)rc)); /* printf_va_504 */
  strcpy(str,"1abzd");
  len = strlen((char const *)(str));
  rc = strishex_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strishex_s",(unsigned int)129,
                           (unsigned int)((int)rc)); /* printf_va_505 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_506(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_507(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_508(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_509(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_510(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_511(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_512(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_513(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strislowercase_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strislowercase_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)26,
                           (unsigned int)((int)rc)); /* printf_va_506 */
  len = (uint32_t)99999;
  rc = strislowercase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)35,
                           (unsigned int)((int)rc)); /* printf_va_507 */
  len = (uint32_t)0;
  rc = strislowercase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)44,
                           (unsigned int)((int)rc)); /* printf_va_508 */
  str[0] = (char)'\000';
  rc = strislowercase_s((char const *)(str),(rsize_t)5);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)53,
                           (unsigned int)((int)rc)); /* printf_va_509 */
  strcpy(str,"qqweqeqeqeq");
  len = (uint32_t)3;
  rc = strislowercase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)64,
                           (unsigned int)((int)rc)); /* printf_va_510 */
  strcpy(str,"qqweqeqeqeq");
  len = strlen((char const *)(str));
  rc = strislowercase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)75,
                           (unsigned int)((int)rc)); /* printf_va_511 */
  strcpy(str,"qqWe go");
  len = strlen((char const *)(str));
  rc = strislowercase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)86,
                           (unsigned int)((int)rc)); /* printf_va_512 */
  strcpy(str,"1234");
  len = strlen((char const *)(str));
  rc = strislowercase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strislowercase_s",(unsigned int)97,
                           (unsigned int)((int)rc)); /* printf_va_513 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_514(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_515(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_516(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_517(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_518(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_519(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_520(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_521(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_522(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strismixed_s(void)
{
  int __retres;
  _Bool rc;
  rsize_t len;
  char str[128];
  len = (rsize_t)5;
  rc = strismixedcase_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)26,
                           (unsigned int)((int)rc)); /* printf_va_514 */
  len = (rsize_t)0;
  rc = strismixedcase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)35,
                           (unsigned int)((int)rc)); /* printf_va_515 */
  len = (rsize_t)((4UL << 10) + (unsigned long)1);
  rc = strismixedcase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)44,
                           (unsigned int)((int)rc)); /* printf_va_516 */
  len = (rsize_t)9;
  rc = strismixedcase_s("",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)53,
                           (unsigned int)((int)rc)); /* printf_va_517 */
  strcpy(str,"AaBbCcDdEeFf");
  len = (rsize_t)5;
  rc = strismixedcase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)64,
                           (unsigned int)((int)rc)); /* printf_va_518 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strismixedcase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)75,
                           (unsigned int)((int)rc)); /* printf_va_519 */
  strcpy(str,"NowISTHETimE");
  len = strlen((char const *)(str));
  rc = strismixedcase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)86,
                           (unsigned int)((int)rc)); /* printf_va_520 */
  strcpy(str,"qq21ego");
  len = strlen((char const *)(str));
  rc = strismixedcase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)97,
                           (unsigned int)((int)rc)); /* printf_va_521 */
  strcpy(str,"1234");
  len = strlen((char const *)(str));
  rc = strismixedcase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strismixed_s",(unsigned int)108,
                           (unsigned int)((int)rc)); /* printf_va_522 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_523(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_524(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_525(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_526(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_527(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_528(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_529(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_530(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_531(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_532(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_533(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strispassword_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[64];
  rc = strispassword_s((char const *)0,(rsize_t)64);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)25,
                           (unsigned int)((int)rc)); /* printf_va_523 */
  rc = strispassword_s("",(rsize_t)64);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)33,
                           (unsigned int)((int)rc)); /* printf_va_524 */
  rc = strispassword_s("Test4You&",(rsize_t)0);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)41,
                           (unsigned int)((int)rc)); /* printf_va_525 */
  rc = strispassword_s("Test4You&",(rsize_t)999);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)49,
                           (unsigned int)((int)rc)); /* printf_va_526 */
  rc = strispassword_s("",(rsize_t)9);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)57,
                           (unsigned int)((int)rc)); /* printf_va_527 */
  strcpy(str,"Test4You*123");
  len = (uint32_t)8;
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)68,
                           (unsigned int)((int)rc)); /* printf_va_528 */
  strcpy(str,"Test4You*");
  len = strlen((char const *)(str));
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)79,
                           (unsigned int)((int)rc)); /* printf_va_529 */
  strcpy(str,"Test4You*Test4You*Test4You*");
  len = strlen((char const *)(str));
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)90,
                           (unsigned int)((int)rc)); /* printf_va_530 */
  strcpy(str,"Eest!22/");
  len = strlen((char const *)(str));
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)101,
                           (unsigned int)((int)rc)); /* printf_va_531 */
  strcpy(str,"pa$$W0rD");
  len = strlen((char const *)(str));
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)112,
                           (unsigned int)((int)rc)); /* printf_va_532 */
  strcpy(str,"Test");
  len = strlen((char const *)(str));
  rc = strispassword_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strispassword_s",(unsigned int)123,
                           (unsigned int)((int)rc)); /* printf_va_533 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_534(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_535(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_536(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_537(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_538(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_539(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_540(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_541(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_542(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strisuppercase_s(void)
{
  int __retres;
  _Bool rc;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strisuppercase_s((char const *)0,len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)26,
                           (unsigned int)((int)rc)); /* printf_va_534 */
  len = (uint32_t)99999;
  rc = strisuppercase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)35,
                           (unsigned int)((int)rc)); /* printf_va_535 */
  len = (uint32_t)0;
  rc = strisuppercase_s("test",len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)44,
                           (unsigned int)((int)rc)); /* printf_va_536 */
  str[0] = (char)'\000';
  rc = strisuppercase_s((char const *)(str),(rsize_t)5);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)53,
                           (unsigned int)((int)rc)); /* printf_va_537 */
  strcpy(str,"ABCDEFGHIGHIJ");
  len = (uint32_t)7;
  rc = strisuppercase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)64,
                           (unsigned int)((int)rc)); /* printf_va_538 */
  strcpy(str,"ABCDEFGHIGHIJ");
  len = strlen((char const *)(str));
  rc = strisuppercase_s((char const *)(str),len);
  if ((int)rc != 1) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)75,
                           (unsigned int)((int)rc)); /* printf_va_539 */
  strcpy(str,"qqWe go");
  len = strlen((char const *)(str));
  rc = strisuppercase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)86,
                           (unsigned int)((int)rc)); /* printf_va_540 */
  strcpy(str,"1234");
  len = strlen((char const *)(str));
  rc = strisuppercase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)97,
                           (unsigned int)((int)rc)); /* printf_va_541 */
  strcpy(str,"!@#$%^&*()");
  len = strlen((char const *)(str));
  rc = strisuppercase_s((char const *)(str),len);
  if ((int)rc != 0) printf("%s %u   Error rc=%u \n",
                           (char *)"test_strisuppercase_s",(unsigned int)108,
                           (unsigned int)((int)rc)); /* printf_va_542 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_543(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_544(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_545(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_546(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_547(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_548(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_549(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_550(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_551(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_552(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_553(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_554(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_555(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_556(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_557(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_558(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_559(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_560(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_561(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

int test_strlastchar_s(void)
{
  int __retres;
  errno_t rc;
  char *last;
  char str1_17[128];
  rc = strlastchar_s((char *)0,(rsize_t)128,(char)'a',& last);
  if (rc != 400) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)27,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_543 */
  if (last) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                   (char *)"test_strlastchar_s",(unsigned int)32,
                   (void *)(str1_17),(void *)last,rc); /* printf_va_544 */
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'a',(char **)0);
  if (rc != 400) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)40,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_545 */
  rc = strlastchar_s(str1_17,(rsize_t)0,(char)'a',& last);
  if (rc != 401) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)48,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_546 */
  if (last) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                   (char *)"test_strlastchar_s",(unsigned int)53,
                   (void *)(str1_17),(void *)last,rc); /* printf_va_547 */
  rc = strlastchar_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1),
                     (char)'a',& last);
  if (rc != 403) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)61,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_548 */
  if (last) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                   (char *)"test_strlastchar_s",(unsigned int)66,
                   (void *)(str1_17),(void *)last,rc); /* printf_va_549 */
  str1_17[0] = (char)'\000';
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'a',& last);
  if (rc != 409) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)76,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_550 */
  if (last) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                   (char *)"test_strlastchar_s",(unsigned int)81,
                   (void *)(str1_17),(void *)last,rc); /* printf_va_551 */
  strcpy(str1_17,"Keep it simple");
  rc = strlastchar_s(str1_17,(rsize_t)5,(char)'z',& last);
  if (rc != 409) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                        (char *)"test_strlastchar_s",(unsigned int)91,
                        (void *)(str1_17),(void *)last,rc); /* printf_va_552 */
  if (last) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                   (char *)"test_strlastchar_s",(unsigned int)96,
                   (void *)(str1_17),(void *)last,rc); /* printf_va_553 */
  strcpy(str1_17,"Keep it simplezz");
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'z',& last);
  if (rc != 0) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                      (char *)"test_strlastchar_s",(unsigned int)106,
                      (void *)(str1_17),(void *)last,rc); /* printf_va_554 */
  if (last != & str1_17[15]) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                                    (char *)"test_strlastchar_s",
                                    (unsigned int)111,(void *)(str1_17),
                                    (void *)last,rc); /* printf_va_555 */
  strcpy(str1_17,"Keep it simple");
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'K',& last);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastchar_s",
                      (unsigned int)121,rc); /* printf_va_556 */
  if (last != str1_17) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                              (char *)"test_strlastchar_s",(unsigned int)126,
                              (void *)(str1_17),(void *)last,rc); /* printf_va_557 */
  strcpy(str1_17,"kEEp it simple");
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'E',& last);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastchar_s",
                      (unsigned int)136,rc); /* printf_va_558 */
  if (last != & str1_17[2]) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                                   (char *)"test_strlastchar_s",
                                   (unsigned int)141,(void *)(str1_17),
                                   (void *)last,rc); /* printf_va_559 */
  strcpy(str1_17,"kEep it Simple");
  rc = strlastchar_s(str1_17,(rsize_t)128,(char)'S',& last);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastchar_s",
                      (unsigned int)151,rc); /* printf_va_560 */
  if (last != & str1_17[8]) printf("%s %u  Error  str1=%p  last=%p  rc=%d \n",
                                   (char *)"test_strlastchar_s",
                                   (unsigned int)156,(void *)(str1_17),
                                   (void *)last,rc); /* printf_va_561 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_562(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_563(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_564(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_565(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_566(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_567(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_568(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_569(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_570(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_571(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_572(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_573(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_574(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_575(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_576(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_577(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_578(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_579(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_580(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_581(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_582(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_583(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_584(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

int test_strlastdiff_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t ind;
  char str1_17[128];
  char str2_16[128];
  rc = strlastdiff_s((char const *)0,(rsize_t)128,(char const *)(str2_16),
                     & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)29,rc); /* printf_va_562 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)34,ind,rc); /* printf_va_563 */
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,(char const *)0,
                     & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)42,rc); /* printf_va_564 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)47,ind,rc); /* printf_va_565 */
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)55,rc); /* printf_va_566 */
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)0,
                     (char const *)(str2_16),& ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)63,rc); /* printf_va_567 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)68,ind,rc); /* printf_va_568 */
  rc = strlastdiff_s((char const *)(str1_17),
                     (rsize_t)((4UL << 10) + (unsigned long)1),
                     (char const *)(str2_16),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)76,rc); /* printf_va_569 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)81,ind,rc); /* printf_va_570 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)92,rc); /* printf_va_571 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)97,ind,rc); /* printf_va_572 */
  strcpy(str1_17,"Keep iT simple");
  strcpy(str2_16,"keep it simple");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                      (unsigned int)108,rc); /* printf_va_573 */
  if (ind != (rsize_t)6) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)113,ind,rc); /* printf_va_574 */
  strcpy(str1_17,"kEep it simple");
  strcpy(str2_16,"keep it simple");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                      (unsigned int)124,rc); /* printf_va_575 */
  if (ind != (rsize_t)1) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)129,ind,rc); /* printf_va_576 */
  strcpy(str1_17,"keep it siMple");
  strcpy(str2_16,"keEp it Simple");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                      (unsigned int)140,rc); /* printf_va_577 */
  if (ind != (rsize_t)10) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strlastdiff_s",
                                 (unsigned int)145,ind,rc); /* printf_va_578 */
  strcpy(str1_17,"keep it simple");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str1_17),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)155,rc); /* printf_va_579 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)160,ind,rc); /* printf_va_580 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep it simple");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)1,
                     (char const *)(str2_16),& ind);
  if (rc != 408) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                        (unsigned int)171,rc); /* printf_va_581 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastdiff_s",
                                (unsigned int)176,ind,rc); /* printf_va_582 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep it simplE");
  rc = strlastdiff_s((char const *)(str1_17),(rsize_t)25,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastdiff_s",
                      (unsigned int)187,rc); /* printf_va_583 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strlastdiff_s",
                                 (unsigned int)192,ind,rc); /* printf_va_584 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_585(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_586(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_587(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_588(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_589(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_590(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_591(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_592(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_593(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_594(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_595(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_596(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_597(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_598(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_599(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_600(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_601(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_602(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_603(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_604(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_605(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_606(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_607(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_608(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_609(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_610(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_611(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_612(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_613(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

int test_strlastsame_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t ind;
  char str1_17[128];
  char str2_16[128];
  rc = strlastsame_s((char const *)0,(rsize_t)128,(char const *)(str2_16),
                     & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)28,rc); /* printf_va_585 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)33,ind,rc); /* printf_va_586 */
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,(char const *)0,
                     & ind);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)41,rc); /* printf_va_587 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)46,ind,rc); /* printf_va_588 */
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)54,rc); /* printf_va_589 */
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)0,
                     (char const *)(str2_16),& ind);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)62,rc); /* printf_va_590 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)67,ind,rc); /* printf_va_591 */
  rc = strlastsame_s((char const *)(str1_17),
                     (rsize_t)((4UL << 10) + (unsigned long)1),
                     (char const *)(str2_16),& ind);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)75,rc); /* printf_va_592 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)80,ind,rc); /* printf_va_593 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                        (unsigned int)91,rc); /* printf_va_594 */
  if (ind != (rsize_t)0) printf("%s %u  Error  ind=%zu rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)96,ind,rc); /* printf_va_595 */
  strcpy(str1_17,"Keep it simple");
  strcpy(str2_16,"keep_IT_SIMPLISTIC");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                      (unsigned int)107,rc); /* printf_va_596 */
  if (ind != (rsize_t)3) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)112,ind,rc); /* printf_va_597 */
  strcpy(str1_17,"kEEP_IT_SIMPLE");
  strcpy(str2_16,"keep it simplistic");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                      (unsigned int)123,rc); /* printf_va_598 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)128,ind,rc); /* printf_va_599 */
  strcpy(str1_17,"kkEEP_IT_SIMPLE");
  strcpy(str2_16,"kkeep it simplistic");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                      (unsigned int)139,rc); /* printf_va_600 */
  if (ind != (rsize_t)1) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)144,ind,rc); /* printf_va_601 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keeP_IT_SIMPLe");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strlastsame_s",
                      (unsigned int)155,rc); /* printf_va_602 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strlastsame_s",
                                 (unsigned int)160,ind,rc); /* printf_va_603 */
  strcpy(str1_17,"keep it simple");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str1_17),& ind);
  if (rc != 0) printf("%s %u  Error ind=%zu  rc=%d \n",
                      (char *)"test_strlastsame_s",(unsigned int)171,ind,rc); /* printf_va_604 */
  if (ind != (rsize_t)13) printf("%s %u  Error ind=%zu  rc=%d \n",
                                 (char *)"test_strlastsame_s",
                                 (unsigned int)176,ind,rc); /* printf_va_605 */
  strcpy(str1_17,"KEEP it simple");
  strcpy(str2_16,"keep it simple");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)1,
                     (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strlastsame_s",(unsigned int)187,ind,
                        rc); /* printf_va_606 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)192,ind,rc); /* printf_va_607 */
  strcpy(str1_17,"KEEP it simple");
  strcpy(str2_16,"Keep it simple");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)1,
                     (char const *)(str2_16),& ind);
  if (rc != 0) printf("%s %u  Error ind=%zu  rc=%d \n",
                      (char *)"test_strlastsame_s",(unsigned int)203,ind,rc); /* printf_va_608 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)208,ind,rc); /* printf_va_609 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLE");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)5,
                     (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strlastsame_s",(unsigned int)219,ind,
                        rc); /* printf_va_610 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)224,ind,rc); /* printf_va_611 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"KEEP_IT_SIMPLE");
  rc = strlastsame_s((char const *)(str1_17),(rsize_t)128,
                     (char const *)(str2_16),& ind);
  if (rc != 409) printf("%s %u  Error ind=%zu  rc=%d \n",
                        (char *)"test_strlastsame_s",(unsigned int)235,ind,
                        rc); /* printf_va_612 */
  if (ind != (rsize_t)0) printf("%s %u  Error ind=%zu  rc=%d \n",
                                (char *)"test_strlastsame_s",
                                (unsigned int)240,ind,rc); /* printf_va_613 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_614(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_615(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_616(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_617(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_618(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_619(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_620(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_621(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_622(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_623(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_624(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_625(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_626(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_627(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_628(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_629(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_630(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_631(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_632(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_633(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_634(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_635(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_636(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_637(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strljustify_s(void)
{
  int __retres;
  errno_t rc;
  int ind;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strljustify_s((char *)0,len);
  if (rc != 400) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)27,
                        (unsigned int)rc); /* printf_va_614 */
  len = (uint32_t)0;
  rc = strljustify_s((char *)"test",len);
  if (rc != 401) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)36,
                        (unsigned int)rc); /* printf_va_615 */
  len = (uint32_t)99999;
  rc = strljustify_s((char *)"test",len);
  if (rc != 403) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)45,
                        (unsigned int)rc); /* printf_va_616 */
  rc = strljustify_s((char *)" ",(rsize_t)12);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)54,(unsigned int)rc); /* printf_va_617 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABCDEFGHIJK");
  len = (uint32_t)2;
  rc = strljustify_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)68,
                        (unsigned int)rc); /* printf_va_618 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strljustify_s",
                                    (unsigned int)73,str); /* printf_va_619 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"      ABCDEFGHIJK");
  len = (uint32_t)5;
  rc = strljustify_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)86,
                        (unsigned int)rc); /* printf_va_620 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strljustify_s",
                                    (unsigned int)91,str); /* printf_va_621 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"A");
  len = (uint32_t)1;
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)104,(unsigned int)rc); /* printf_va_622 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strljustify_s",
                                    (unsigned int)109,str); /* printf_va_623 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABC");
  len = (uint32_t)2;
  rc = strljustify_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strljustify_s",(unsigned int)122,
                        (unsigned int)rc); /* printf_va_624 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strljustify_s",
                                    (unsigned int)127,str); /* printf_va_625 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABC");
  len = (uint32_t)5;
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)140,(unsigned int)rc); /* printf_va_626 */
  ind = strcmp((char const *)(str),"ABC");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strljustify_s",
                       (unsigned int)146,str); /* printf_va_627 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   B ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)158,(unsigned int)rc); /* printf_va_628 */
  ind = strcmp((char const *)(str),"B ");
  if (ind != 0) printf("%s %u   Error -%s-  ind=%d \n",
                       (char *)"test_strljustify_s",(unsigned int)164,str,
                       ind); /* printf_va_629 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   B ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)176,(unsigned int)rc); /* printf_va_630 */
  ind = strcmp((char const *)(str),"B ");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strljustify_s",
                       (unsigned int)182,str); /* printf_va_631 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   C ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)194,(unsigned int)rc); /* printf_va_632 */
  ind = strcmp((char const *)(str),"C ");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strljustify_s",
                       (unsigned int)200,str); /* printf_va_633 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   NowISTHETimE       ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)212,(unsigned int)rc); /* printf_va_634 */
  ind = strcmp((char const *)(str),"NowISTHETimE       ");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strljustify_s",
                       (unsigned int)218,str); /* printf_va_635 */
  strzero_s(str,(rsize_t)128);
  strcpy(str," qq21ego ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)230,(unsigned int)rc); /* printf_va_636 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   1234   ");
  len = strlen((char const *)(str));
  rc = strljustify_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strljustify_s",
                      (unsigned int)242,(unsigned int)rc); /* printf_va_637 */
  __retres = 0;
  return __retres;
}

static char str1_6[128];
static char str2_6[128];
int test_strncat_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  rc = strncat_s((char *)0,(rsize_t)128,(char const *)(str2_6),(rsize_t)128);
  if (rc != 400) ;
  rc = strncat_s(str1_6,(rsize_t)128,(char const *)0,(rsize_t)128);
  if (rc != 400) ;
  rc = strncat_s(str1_6,(rsize_t)0,(char const *)(str2_6),(rsize_t)128);
  if (rc != 401) ;
  rc = strncat_s(str1_6,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (char const *)(str2_6),(rsize_t)128);
  if (rc != 403) ;
  rc = strncat_s(str1_6,(rsize_t)(4UL << 10),(char const *)(str2_6),
                 (rsize_t)((4UL << 10) + (unsigned long)1));
  if (rc != 403) ;
  strcpy(str1_6,"aaaaaaaaaa");
  strcpy(str2_6,"keep it simple");
  rc = strncat_s(str1_6,(rsize_t)1,(char const *)(str2_6),(rsize_t)128);
  if (rc != 407) ;
  if ((int)str1_6[0] != '\000') ;
  strcpy(str1_6,"aaaaaaaaaa");
  strcpy(str2_6,"keep it simple");
  rc = strncat_s(str1_6,(rsize_t)2,(char const *)(str2_6),(rsize_t)128);
  if (rc != 407) ;
  if ((int)str1_6[0] != '\000') ;
  strcpy(str1_6,"a");
  strcpy(str2_6,"b");
  rc = strncat_s(str1_6,(rsize_t)2,(char const *)(str2_6),(rsize_t)1);
  if (rc != 406) ;
  if ((int)str1_6[0] != '\000') ;
  strcpy(str1_6,"a");
  strcpy(str2_6,"b");
  rc = strncat_s(str1_6,(rsize_t)3,(char const *)(str2_6),(rsize_t)1);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_6),"ab");
  if (ind != 0) ;
  strcpy(str1_6,"aaaaaaaaaa");
  strcpy(str2_6,"keep it simple");
  rc = strncat_s(str1_6,(rsize_t)50,(char const *)(str2_6),(rsize_t)128);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_6),"aaaaaaaaaakeep it simple");
  if (ind != 0) ;
  strcpy(str1_6,"good");
  strcpy(str2_6,"bye");
  rc = strncat_s(str1_6,(rsize_t)100,(char const *)(str2_6),(rsize_t)100);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_6),"goodbye");
  if (ind != 0) ;
  strcpy(str1_6,"hello");
  rc = strncat_s(str1_6,(rsize_t)6,"",(rsize_t)1);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_6),"hello");
  if (ind != 0) ;
  strcpy(str1_6,"hello");
  rc = strncat_s(str1_6,(rsize_t)6,"X",(rsize_t)2);
  if (rc != 406) ;
  if ((int)str1_6[0] != '\000') ;
  strcpy(str1_6,"abc");
  rc = strncat_s(str1_6,(rsize_t)7,"defghijklmn",(rsize_t)3);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_6),"abcdef");
  if (ind != 0) ;
  __retres = 0;
  return __retres;
}

static char str1_7[128];
static char str2_7[128];
static char dest[128];
int test_strncpy_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t nlen;
  int32_t ind;
  nlen = (rsize_t)5;
  rc = strncpy_s((char *)0,(rsize_t)128,(char const *)(str2_7),nlen);
  if (rc != 400) ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  nlen = (rsize_t)5;
  rc = strncpy_s(str1_7,(rsize_t)5,(char const *)0,nlen);
  if (rc != 400) ;
  if ((int)str1_7[0] != '\000') ;
  nlen = (rsize_t)5;
  rc = strncpy_s(str1_7,(rsize_t)0,(char const *)(str2_7),nlen);
  if (rc != 401) ;
  rc = strncpy_s(str1_7,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (char const *)(str2_7),nlen);
  if (rc != 403) ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_7[0] = (char)'\000';
  rc = strncpy_s(str1_7,(rsize_t)5,(char const *)(str2_7),(rsize_t)0);
  if (rc != 401) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  strcpy(str2_7,"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
  rc = strncpy_s(str1_7,(rsize_t)5,(char const *)(str2_7),
                 (rsize_t)((4UL << 10) + (unsigned long)1));
  if (rc != 403) ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  str2_7[0] = (char)'\000';
  nlen = (rsize_t)5;
  rc = strncpy_s(str1_7,(rsize_t)(128 / 2),(char const *)(str2_7),nlen);
  if (rc != 0) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  nlen = (rsize_t)5;
  rc = strncpy_s(str1_7,(rsize_t)128,(char const *)(str1_7),nlen);
  if (rc != 404) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(str1_7,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  nlen = (rsize_t)18;
  rc = strncpy_s(str1_7,(rsize_t)128,(char const *)(& str1_7[5]),nlen);
  if (rc != 404) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(str1_7,"keep it simple");
  str2_7[0] = (char)'\000';
  nlen = (rsize_t)10;
  rc = strncpy_s(str1_7,(rsize_t)128,(char const *)(str2_7),nlen);
  if (rc != 0) ;
  if ((int)str1_7[0] != '\000') ;
  str1_7[0] = (char)'\000';
  strcpy(str2_7,"keep it simple");
  nlen = (rsize_t)20;
  rc = strncpy_s(str1_7,(rsize_t)128,(char const *)(str2_7),nlen);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_7),(char const *)(str2_7));
  if (ind != 0) ;
  strcpy(str1_7,"qqweqeqeqeq");
  strcpy(str2_7,"keep it simple");
  nlen = (rsize_t)32;
  rc = strncpy_s(str1_7,(rsize_t)128,(char const *)(str2_7),nlen);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_7),(char const *)(str2_7));
  if (ind != 0) ;
  strcpy(str1_7,"qqweqeqeqeq");
  strcpy(str2_7,"keep it simple");
  rc = strncpy_s(str1_7,(rsize_t)1,(char const *)(str2_7),nlen);
  if (rc != 406) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(str1_7,"qqweqeqeqeq");
  strcpy(str2_7,"keep it simple");
  rc = strncpy_s(str1_7,(rsize_t)2,(char const *)(str2_7),nlen);
  if (rc != 406) ;
  if ((int)str1_7[0] != '\000') ;
  strcpy(dest,"                            ");
  strcpy(str1_7,"hello");
  rc = strncpy_s(dest,(rsize_t)6,(char const *)(str1_7),(rsize_t)100);
  if (rc != 0) ;
  ind = strcmp((char const *)(dest),(char const *)(str1_7));
  if (ind != 0) ;
  strcpy(dest,"                            ");
  strcpy(str2_7,"goodbye");
  rc = strncpy_s(dest,(rsize_t)5,(char const *)(str2_7),(rsize_t)7);
  if (rc != 406) ;
  strcpy(dest,"                            ");
  strcpy(str2_7,"goodbye");
  rc = strncpy_s(dest,(rsize_t)5,(char const *)(str2_7),(rsize_t)4);
  if (rc != 0) ;
  ind = strcmp((char const *)(dest),"good");
  if (ind != 0) ;
  strcpy(dest,"                            ");
  strcpy(str2_7,"good");
  rc = strncpy_s(dest,(rsize_t)5,(char const *)(str2_7),(rsize_t)8);
  if (rc != 0) ;
  ind = strcmp((char const *)(dest),"good");
  if (ind != 0) ;
  strcpy(str1_7,"qq12345weqeqeqeq");
  strcpy(str2_7,"it");
  nlen = (rsize_t)10;
  rc = strncpy_s(str1_7,(rsize_t)10,(char const *)(str2_7),nlen);
  if (rc != 0) ;
  ind = strcmp((char const *)(str1_7),(char const *)(str2_7));
  if (ind != 0) ;
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_638(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_639(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_640(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_641(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_642(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_643(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_644(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_645(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_646(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_647(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

int test_strnlen_s(void)
{
  int __retres;
  rsize_t len;
  rsize_t std_len;
  rsize_t max_len;
  max_len = (rsize_t)3;
  len = strnlen_s((char const *)0,max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnlen_s",(unsigned int)25,
                                len); /* printf_va_638 */
  max_len = (rsize_t)0;
  len = strnlen_s("test",max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnlen_s",(unsigned int)34,
                                len); /* printf_va_639 */
  max_len = (rsize_t)((4UL << 10) + (unsigned long)1);
  len = strnlen_s("test",max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnlen_s",(unsigned int)43,
                                len); /* printf_va_640 */
  std_len = strlen("");
  max_len = (rsize_t)(4UL << 10);
  len = strnlen_s("",max_len);
  if (std_len != len) printf("%s %u   std_len=%zu  len=%zu  \n",
                             (char *)"test_strnlen_s",(unsigned int)55,
                             std_len,len); /* printf_va_641 */
  std_len = strlen("t");
  max_len = (rsize_t)(4UL << 10);
  len = strnlen_s("t",max_len);
  if (std_len != len) printf("%s %u   std_len=%zu  len=%zu  \n",
                             (char *)"test_strnlen_s",(unsigned int)67,
                             std_len,len); /* printf_va_642 */
  std_len = strlen("to");
  max_len = (rsize_t)(4UL << 10);
  len = strnlen_s("to",max_len);
  if (std_len != len) printf("%s %u   std_len=%zu  len=%zu  \n",
                             (char *)"test_strnlen_s",(unsigned int)79,
                             std_len,len); /* printf_va_643 */
  std_len = strlen("testing");
  max_len = (rsize_t)(4UL << 10);
  len = strnlen_s("testing",max_len);
  if (std_len != len) printf("%s %u   std_len=%zu  len=%zu  \n",
                             (char *)"test_strnlen_s",(unsigned int)91,
                             std_len,len); /* printf_va_644 */
  max_len = (rsize_t)1;
  len = strnlen_s("testing",max_len);
  if (len != max_len) printf("%s %u   len=%zu  \n",(char *)"test_strnlen_s",
                             (unsigned int)101,len); /* printf_va_645 */
  max_len = (rsize_t)2;
  len = strnlen_s("testing",max_len);
  if (len != max_len) printf("%s %u   len=%zu  \n",(char *)"test_strnlen_s",
                             (unsigned int)111,len); /* printf_va_646 */
  max_len = (rsize_t)3;
  len = strnlen_s("testing",max_len);
  if (len != max_len) printf("%s %u   len=%zu  \n",(char *)"test_strnlen_s",
                             (unsigned int)121,len); /* printf_va_647 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_648(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_649(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_650(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_651(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_652(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_653(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_654(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_655(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_656(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, size_t param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_657(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_658(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_659(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_660(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_661(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2);

int test_strnterminate_s(void)
{
  int __retres;
  rsize_t len;
  rsize_t std_len;
  rsize_t max_len;
  char dest_0[128];
  size_t tmp;
  strcpy(dest_0,"");
  max_len = (rsize_t)3;
  len = strnterminate_s((char *)0,max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)29,len); /* printf_va_648 */
  strcpy(dest_0,"test");
  max_len = (rsize_t)0;
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)39,len); /* printf_va_649 */
  strcpy(dest_0,"test");
  max_len = (rsize_t)((4UL << 10) + (unsigned long)1);
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)0) printf("%s %u   Len=%zu \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)49,len); /* printf_va_650 */
  strcpy(dest_0,"ff");
  std_len = strlen((char const *)(dest_0));
  max_len = (rsize_t)(4UL << 10);
  len = strnterminate_s(dest_0,max_len);
  if (std_len != len) printf("%s %u   std_len=%zu  len=%zu  \n",
                             (char *)"test_strnterminate_s",(unsigned int)62,
                             std_len,len); /* printf_va_651 */
  strcpy(dest_0,"ff");
  len = strnterminate_s(dest_0,(rsize_t)1);
  if (len != (rsize_t)0) printf("%s %u   std_len=%zu  len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)72,std_len,len); /* printf_va_652 */
  strcpy(dest_0,"f");
  max_len = (rsize_t)(4UL << 10);
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)1) printf("%s %u   std_len=%zu  len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)83,std_len,len); /* printf_va_653 */
  strcpy(dest_0,"f");
  max_len = (rsize_t)(4UL << 10);
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)1) printf("%s %u   std_len=%zu  len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)94,std_len,len); /* printf_va_654 */
  strcpy(dest_0,"ff");
  max_len = (rsize_t)(4UL << 10);
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)2) printf("%s %u   std_len=%zu  len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)105,std_len,len); /* printf_va_655 */
  strcpy(dest_0,"test");
  max_len = (rsize_t)(4UL << 10);
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)4) printf("%s %u   std_len=%zu  len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)116,std_len,len); /* printf_va_656 */
  strcpy(dest_0,"testing");
  max_len = (rsize_t)1;
  len = strnterminate_s(dest_0,max_len);
  if (len != (rsize_t)0) printf("%s %u   len=%zu  \n",
                                (char *)"test_strnterminate_s",
                                (unsigned int)127,len); /* printf_va_657 */
  strcpy(dest_0,"testing");
  max_len = (rsize_t)2;
  len = strnterminate_s(dest_0,max_len);
  if (len != max_len - (rsize_t)1) printf("%s %u   len=%zu  \n",
                                          (char *)"test_strnterminate_s",
                                          (unsigned int)138,len); /* printf_va_658 */
  strcpy(dest_0,"testing");
  max_len = (rsize_t)3;
  len = strnterminate_s(dest_0,max_len);
  if (len != max_len - (rsize_t)1) printf("%s %u   len=%zu  \n",
                                          (char *)"test_strnterminate_s",
                                          (unsigned int)149,len); /* printf_va_659 */
  strcpy(dest_0,"testing");
  max_len = (rsize_t)33;
  len = strnterminate_s(dest_0,max_len);
  tmp = strlen((char const *)(dest_0));
  ;
  if (len != tmp) printf("%s %u   len=%zu  \n",
                         (char *)"test_strnterminate_s",(unsigned int)160,
                         len); /* printf_va_660 */
  strcpy(dest_0,"012345678901234567890");
  len = (rsize_t)21;
  while (len) {
    size_t tmp_0;
    len = strnterminate_s(dest_0,len);
    tmp_0 = strlen((char const *)(dest_0));
    ;
    if (len != tmp_0) printf("%s %u   len=%zu  \n",
                             (char *)"test_strnterminate_s",
                             (unsigned int)173,len); /* printf_va_661 */
  }
  __retres = 0;
  return __retres;
}

static char str1_8[128];
static char str2_8[128];
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_662(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_663(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_664(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_665(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_666(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_667(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_668(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_669(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_670(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_671(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_672(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_673(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_674(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_675(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_676(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_677(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_678(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_679(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_680(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_681(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_682(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_683(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_684(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_685(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_686(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_687(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_688(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_689(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_690(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_691(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_692(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_693(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_694(char const * restrict format, char *param0,
                  unsigned int param1, void *param2, void *param3, int param4);

int test_strpbrk_s(void)
{
  int __retres;
  errno_t rc;
  char *first;
  char *std_first;
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,(char **)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)28,rc); /* printf_va_662 */
  rc = strpbrk_s((char *)0,(rsize_t)128,str2_8,(rsize_t)128,& first);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)36,rc); /* printf_va_663 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)41,(void *)first,
                    rc); /* printf_va_664 */
  rc = strpbrk_s(str1_8,(rsize_t)128,(char *)0,(rsize_t)128,& first);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)49,rc); /* printf_va_665 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)54,(void *)first,
                    rc); /* printf_va_666 */
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,(char **)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)62,rc); /* printf_va_667 */
  rc = strpbrk_s(str1_8,(rsize_t)0,str2_8,(rsize_t)128,& first);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)70,rc); /* printf_va_668 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)75,(void *)first,
                    rc); /* printf_va_669 */
  rc = strpbrk_s(str1_8,(rsize_t)((4UL << 10) + (unsigned long)1),str2_8,
                 (rsize_t)128,& first);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)83,rc); /* printf_va_670 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)88,(void *)first,
                    rc); /* printf_va_671 */
  rc = strpbrk_s(str1_8,(rsize_t)(4UL << 10),str2_8,
                 (rsize_t)((4UL << 10) + (unsigned long)1),& first);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)96,rc); /* printf_va_672 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)101,(void *)first,
                    rc); /* printf_va_673 */
  str1_8[0] = (char)'\000';
  str2_8[0] = (char)'\000';
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,& first);
  if (rc != 409) printf("%s %u  Error  first=%p  rc=%d \n",
                        (char *)"test_strpbrk_s",(unsigned int)113,
                        (void *)first,rc); /* printf_va_674 */
  if (first) printf("%s %u  Error  first=%p  rc=%d \n",
                    (char *)"test_strpbrk_s",(unsigned int)118,(void *)first,
                    rc); /* printf_va_675 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)124,
                                 (void *)first,(void *)std_first,rc); /* printf_va_676 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"1234");
  rc = strpbrk_s(str1_8,(rsize_t)2,str2_8,(rsize_t)128,& first);
  if (rc != 409) printf("%s %u  Error  first=%p  rc=%d \n",
                        (char *)"test_strpbrk_s",(unsigned int)135,
                        (void *)first,rc); /* printf_va_677 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)141,
                                 (void *)first,(void *)std_first,rc); /* printf_va_678 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"ke");
  rc = strpbrk_s(str1_8,(rsize_t)2,str2_8,(rsize_t)128,& first);
  if (rc != 0) printf("%s %u  Error  first=%p  rc=%d \n",
                      (char *)"test_strpbrk_s",(unsigned int)152,
                      (void *)first,rc); /* printf_va_679 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)158,
                                 (void *)first,(void *)std_first,rc); /* printf_va_680 */
  strcpy(str1_8,"keep it simplez");
  strcpy(str2_8,"z");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,& first);
  if (rc != 0) printf("%s %u  Error  first=%p  rc=%d \n",
                      (char *)"test_strpbrk_s",(unsigned int)169,
                      (void *)first,rc); /* printf_va_681 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)175,
                                 (void *)first,(void *)std_first,rc); /* printf_va_682 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"123456");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)2,& first);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)186,rc); /* printf_va_683 */
  if (first != (char *)0) printf("%s %u  Error  first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)191,
                                 (void *)first,rc); /* printf_va_684 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)1,& first);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                        (unsigned int)202,rc); /* printf_va_685 */
  if (first != (char *)0) printf("%s %u  Error  first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)207,
                                 (void *)first,rc); /* printf_va_686 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"k");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)1,& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                      (unsigned int)218,rc); /* printf_va_687 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)224,
                                 (void *)first,(void *)std_first,rc); /* printf_va_688 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"ke");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)2,& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                      (unsigned int)235,rc); /* printf_va_689 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)241,
                                 (void *)first,(void *)std_first,rc); /* printf_va_690 */
  strcpy(str1_8,"keep it simple");
  strcpy(str2_8,"hip");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                      (unsigned int)252,rc); /* printf_va_691 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)258,
                                 (void *)first,(void *)std_first,rc); /* printf_va_692 */
  strcpy(str1_8,"keep it simply");
  strcpy(str2_8,"123y");
  rc = strpbrk_s(str1_8,(rsize_t)128,str2_8,(rsize_t)128,& first);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strpbrk_s",
                      (unsigned int)269,rc); /* printf_va_693 */
  std_first = strpbrk((char const *)(str1_8),(char const *)(str2_8));
  if (first != std_first) printf("%s %u  first=%p  std_first=%p  rc=%d \n",
                                 (char *)"test_strpbrk_s",(unsigned int)275,
                                 (void *)first,(void *)std_first,rc); /* printf_va_694 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_695(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_696(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_697(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_698(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_699(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_700(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_701(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_702(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_703(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_704(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_705(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_706(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_707(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

int test_strprefix_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t len;
  char str1_17[128];
  char str2_16[128];
  rc = strprefix_s((char const *)0,(rsize_t)128,(char const *)(str2_16));
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)28,rc); /* printf_va_695 */
  rc = strprefix_s((char const *)(str1_17),(rsize_t)128,(char const *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)36,rc); /* printf_va_696 */
  rc = strprefix_s((char const *)(str1_17),(rsize_t)0,
                   (char const *)(str2_16));
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)44,rc); /* printf_va_697 */
  rc = strprefix_s((char const *)(str1_17),
                   (rsize_t)((4UL << 10) + (unsigned long)1),
                   (char const *)(str2_16));
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)52,rc); /* printf_va_698 */
  str1_17[0] = (char)'\000';
  str2_16[0] = (char)'\000';
  rc = strprefix_s((char const *)(str1_17),(rsize_t)128,
                   (char const *)(str2_16));
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)63,rc); /* printf_va_699 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)55,
                   (char const *)(str2_16));
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                      (unsigned int)74,rc); /* printf_va_700 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"kerp");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)55,
                   (char const *)(str2_16));
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)85,rc); /* printf_va_701 */
  strcpy(str1_17,"ke");
  strcpy(str2_16,"kerp");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)2,
                   (char const *)(str2_16));
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                      (unsigned int)96,rc); /* printf_va_702 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)4,
                   (char const *)(str2_16));
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                      (unsigned int)107,rc); /* printf_va_703 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keeeep");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)4,
                   (char const *)(str2_16));
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)118,rc); /* printf_va_704 */
  strcpy(str1_17,"keep it simple");
  rc = strprefix_s((char const *)(str1_17),(rsize_t)4,"");
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)128,rc); /* printf_va_705 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep it sipmle and very long");
  len = strlen((char const *)(str1_17));
  rc = strprefix_s((char const *)(str1_17),len,(char const *)(str2_16));
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                        (unsigned int)141,rc); /* printf_va_706 */
  strcpy(str1_17,"keep it simple");
  strcpy(str2_16,"keep it simple");
  len = strlen((char const *)(str1_17));
  rc = strprefix_s((char const *)(str1_17),len,(char const *)(str2_16));
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strprefix_s",
                      (unsigned int)154,rc); /* printf_va_707 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_708(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_709(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_710(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_711(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_712(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_713(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_714(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_715(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_716(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_717(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_718(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_719(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_720(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_721(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_722(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_723(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_724(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_725(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_726(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_727(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_728(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_729(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_730(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

int test_strremovews_s(void)
{
  int __retres;
  errno_t rc;
  int ind;
  uint32_t len;
  char str[128];
  len = (uint32_t)5;
  rc = strremovews_s((char *)0,len);
  if (rc != 400) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strremovews_s",(unsigned int)28,
                        (unsigned int)rc); /* printf_va_708 */
  len = (uint32_t)0;
  rc = strremovews_s((char *)"test",len);
  if (rc != 401) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strremovews_s",(unsigned int)37,
                        (unsigned int)rc); /* printf_va_709 */
  len = (uint32_t)99999;
  rc = strremovews_s((char *)"test",len);
  if (rc != 403) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strremovews_s",(unsigned int)46,
                        (unsigned int)rc); /* printf_va_710 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABCDEFGHIJK");
  len = (uint32_t)1;
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)57,(unsigned int)rc); /* printf_va_711 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strremovews_s",
                                    (unsigned int)62,str); /* printf_va_712 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABCDEFGHIJK");
  len = (uint32_t)2;
  rc = strremovews_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u --%s--\n",
                        (char *)"test_strremovews_s",(unsigned int)74,
                        (unsigned int)rc,str); /* printf_va_713 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"      ABCDEFGHIJK");
  len = (uint32_t)3;
  rc = strremovews_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u --%s--\n",
                        (char *)"test_strremovews_s",(unsigned int)86,
                        (unsigned int)rc,str); /* printf_va_714 */
  if ((int)str[0] != '\000') printf("%s %u   Error rc=%u --%s--\n",
                                    (char *)"test_strremovews_s",
                                    (unsigned int)91,(unsigned int)rc,str); /* printf_va_715 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"      ABCDEFGHIJK");
  len = (uint32_t)9;
  rc = strremovews_s(str,len);
  if (rc != 407) printf("%s %u   Error rc=%u --%s--\n",
                        (char *)"test_strremovews_s",(unsigned int)103,
                        (unsigned int)rc,str); /* printf_va_716 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"A");
  len = (uint32_t)1;
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)116,(unsigned int)rc); /* printf_va_717 */
  if ((int)str[0] != '\000') printf("%s %u   Error -%s- \n",
                                    (char *)"test_strremovews_s",
                                    (unsigned int)121,str); /* printf_va_718 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"ABC");
  len = (uint32_t)8;
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)133,(unsigned int)rc); /* printf_va_719 */
  if ((int)str[0] != 'A') printf("%s %u   Error -%s- \n",
                                 (char *)"test_strremovews_s",
                                 (unsigned int)138,str); /* printf_va_720 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   B");
  len = strlen((char const *)(str));
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)150,(unsigned int)rc); /* printf_va_721 */
  if ((int)str[0] != 'B') printf("%s %u   Error -%s- \n",
                                 (char *)"test_strremovews_s",
                                 (unsigned int)155,str); /* printf_va_722 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"  C       ");
  len = strlen((char const *)(str));
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)167,(unsigned int)rc); /* printf_va_723 */
  ind = strcmp((char const *)(str),"C");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strremovews_s",
                       (unsigned int)173,str); /* printf_va_724 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"   NowISTHETimE 1 2   ");
  len = strlen((char const *)(str));
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)185,(unsigned int)rc); /* printf_va_725 */
  ind = strcmp((char const *)(str),"NowISTHETimE 1 2");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strremovews_s",
                       (unsigned int)191,str); /* printf_va_726 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"  q q21ego");
  len = strlen((char const *)(str));
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)203,(unsigned int)rc); /* printf_va_727 */
  ind = strcmp((char const *)(str),"q q21ego");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strremovews_s",
                       (unsigned int)209,str); /* printf_va_728 */
  strzero_s(str,(rsize_t)128);
  strcpy(str,"  1 2 3 4   ");
  len = strlen((char const *)(str));
  rc = strremovews_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strremovews_s",
                      (unsigned int)221,(unsigned int)rc); /* printf_va_729 */
  ind = strcmp((char const *)(str),"1 2 3 4");
  if (ind != 0) printf("%s %u   Error -%s- \n",(char *)"test_strremovews_s",
                       (unsigned int)227,str); /* printf_va_730 */
  __retres = 0;
  return __retres;
}

static char str1_9[128];
static char str2_9[128];
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_731(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_732(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_733(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_734(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_735(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_736(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_737(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_738(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_739(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_740(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_741(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_742(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_743(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_744(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_745(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_746(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_747(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_748(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_749(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_750(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_751(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_752(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_753(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_754(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_755(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_756(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_757(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_758(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_759(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_760(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_761(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_762(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_763(char const * restrict format, char *param0,
                  unsigned int param1, size_t param2, int param3, int param4);

int test_strspn_s(void)
{
  int __retres;
  size_t tmp;
  size_t tmp_0;
  size_t tmp_1;
  size_t tmp_2;
  size_t tmp_3;
  size_t tmp_4;
  errno_t rc = 0;
  rsize_t count = (rsize_t)0;
  int32_t std_count = 0;
  rc = strspn_s((char const *)0,(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)29,rc); /* printf_va_731 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)34,
                                  count,std_count,rc); /* printf_va_732 */
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)0,
                (rsize_t)128,& count);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)42,rc); /* printf_va_733 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)47,
                                  count,std_count,rc); /* printf_va_734 */
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,(rsize_t *)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)55,rc); /* printf_va_735 */
  rc = strspn_s((char const *)(str1_9),(rsize_t)0,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)63,rc); /* printf_va_736 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)68,
                                  count,std_count,rc); /* printf_va_737 */
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)0,& count);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)76,rc); /* printf_va_738 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)81,
                                  count,std_count,rc); /* printf_va_739 */
  rc = strspn_s((char const *)(str1_9),
                (rsize_t)((4UL << 10) + (unsigned long)1),
                (char const *)(str2_9),(rsize_t)128,& count);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)89,rc); /* printf_va_740 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)94,
                                  count,std_count,rc); /* printf_va_741 */
  rc = strspn_s((char const *)(str1_9),(rsize_t)(4UL << 10),
                (char const *)(str2_9),
                (rsize_t)((4UL << 10) + (unsigned long)1),& count);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                        (unsigned int)102,rc); /* printf_va_742 */
  if (count != (rsize_t)0) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)107,
                                  count,std_count,rc); /* printf_va_743 */
  str1_9[0] = (char)'\000';
  str2_9[0] = (char)'\000';
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)118,rc); /* printf_va_744 */
  if (count != (rsize_t)0) printf("%s %u  Error  count=%zu rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)123,
                                  count,rc); /* printf_va_745 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"keep");
  rc = strspn_s((char const *)(str1_9),(rsize_t)1,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)134,rc); /* printf_va_746 */
  if (count != (rsize_t)1) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)139,
                                  count,std_count,rc); /* printf_va_747 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"keep");
  rc = strspn_s((char const *)(str1_9),(rsize_t)2,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)150,rc); /* printf_va_748 */
  if (count != (rsize_t)2) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)155,
                                  count,std_count,rc); /* printf_va_749 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"keep");
  rc = strspn_s((char const *)(str1_9),(rsize_t)3,(char const *)(str2_9),
                (rsize_t)12,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)166,rc); /* printf_va_750 */
  if (count != (rsize_t)3) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                  (char *)"test_strspn_s",(unsigned int)171,
                                  count,std_count,rc); /* printf_va_751 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"k");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)1,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)182,rc); /* printf_va_752 */
  tmp = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)188,count,std_count,
                                          rc); /* printf_va_753 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"ke");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)2,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)199,rc); /* printf_va_754 */
  tmp_0 = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp_0;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)205,count,std_count,
                                          rc); /* printf_va_755 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"keep");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)217,rc); /* printf_va_756 */
  tmp_1 = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp_1;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)223,count,std_count,
                                          rc); /* printf_va_757 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"keep");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)234,rc); /* printf_va_758 */
  tmp_2 = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp_2;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)240,count,std_count,
                                          rc); /* printf_va_759 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"notincluded");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)251,rc); /* printf_va_760 */
  tmp_3 = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp_3;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)257,count,std_count,
                                          rc); /* printf_va_761 */
  strcpy(str1_9,"keep it simple");
  strcpy(str2_9,"1234567890");
  rc = strspn_s((char const *)(str1_9),(rsize_t)128,(char const *)(str2_9),
                (rsize_t)128,& count);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strspn_s",
                      (unsigned int)268,rc); /* printf_va_762 */
  tmp_4 = strspn((char const *)(str1_9),(char const *)(str2_9));
  std_count = (int32_t)tmp_4;
  if (count != (rsize_t)std_count) printf("%s %u  count=%zu  std_count=%d  rc=%d \n",
                                          (char *)"test_strspn_s",
                                          (unsigned int)274,count,std_count,
                                          rc); /* printf_va_763 */
  __retres = 0;
  return __retres;
}

static char str1_10[128];
static char str2_10[128];
/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_764(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_765(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_766(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_767(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_768(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_769(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_770(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_771(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_772(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_773(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_774(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_775(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_776(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_777(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_778(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_779(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_780(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_781(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_782(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_783(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_784(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_785(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_786(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_787(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_788(char const * restrict format, char *param0,
                  unsigned int param1, int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_789(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), param2, param1, *(param0 + (0 ..));
 */
int printf_va_790(char const * restrict format, char *param0,
                  unsigned int param1, int param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_791(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_792(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_793(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_794(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_795(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_796(char const * restrict format, char *param0,
                  unsigned int param1, int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_797(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_798(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_799(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strstr_s(void)
{
  int __retres;
  errno_t rc;
  char *sub;
  char *std_sub;
  rsize_t len1;
  rsize_t len2;
  rc = strstr_s((char *)0,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)31,rc); /* printf_va_764 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)36,rc); /* printf_va_765 */
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)0,(rsize_t)128,& sub);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)44,rc); /* printf_va_766 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)49,rc); /* printf_va_767 */
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                (char **)0);
  if (rc != 400) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)57,rc); /* printf_va_768 */
  rc = strstr_s(str1_10,(rsize_t)0,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)65,rc); /* printf_va_769 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)70,rc); /* printf_va_770 */
  rc = strstr_s(str1_10,(rsize_t)((4UL << 10) + (unsigned long)1),
                (char const *)(str2_10),(rsize_t)128,& sub);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)78,rc); /* printf_va_771 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)83,rc); /* printf_va_772 */
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)0,
                & sub);
  if (rc != 401) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)91,rc); /* printf_va_773 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)96,rc); /* printf_va_774 */
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),
                (rsize_t)((4UL << 10) + (unsigned long)1),& sub);
  if (rc != 403) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)104,rc); /* printf_va_775 */
  if (sub) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                  (unsigned int)109,rc); /* printf_va_776 */
  str1_10[0] = (char)'\000';
  str2_10[0] = (char)'\000';
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)120,rc); /* printf_va_777 */
  if (sub != str1_10) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                             (unsigned int)125,rc); /* printf_va_778 */
  strcpy(str1_10,"keep it all together");
  str2_10[0] = (char)'\000';
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)136,rc); /* printf_va_779 */
  if (sub != str1_10) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                             (unsigned int)141,rc); /* printf_va_780 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"kee");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)153,rc); /* printf_va_781 */
  if (sub != str1_10) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                             (unsigned int)158,rc); /* printf_va_782 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"eep it");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)170,rc); /* printf_va_783 */
  if (sub != & str1_10[1]) printf("%s %u  Error rc=%d \n",
                                  (char *)"test_strstr_s",(unsigned int)175,
                                  rc); /* printf_va_784 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"ethe");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)187,rc); /* printf_va_785 */
  if (sub != & str1_10[15]) printf("%s %u  Error rc=%d \n",
                                   (char *)"test_strstr_s",(unsigned int)192,
                                   rc); /* printf_va_786 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"he");
  len1 = strlen((char const *)(str1_10));
  len2 = strlen((char const *)(str2_10));
  rc = strstr_s(str1_10,len1,(char const *)(str2_10),len2,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)206,rc); /* printf_va_787 */
  if (sub != & str1_10[17]) printf("%s %u  Error rc=%d  sub=%s \n",
                                   (char *)"test_strstr_s",(unsigned int)211,
                                   rc,sub); /* printf_va_788 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"er");
  len1 = strlen((char const *)(str1_10));
  len2 = strlen((char const *)(str2_10));
  rc = strstr_s(str1_10,len1,(char const *)(str2_10),len2,& sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)225,rc); /* printf_va_789 */
  if (sub != & str1_10[18]) printf("%s %u  Error rc=%d  sub=%s \n",
                                   (char *)"test_strstr_s",(unsigned int)230,
                                   rc,sub); /* printf_va_790 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"it all");
  rc = strstr_s(str1_10,(rsize_t)3,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)241,rc); /* printf_va_791 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"it all");
  rc = strstr_s(str1_10,(rsize_t)333,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)252,rc); /* printf_va_792 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"it all");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)5,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)263,rc); /* printf_va_793 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"1234");
  len1 = strlen((char const *)(str1_10));
  rc = strstr_s(str1_10,len1,(char const *)(str2_10),(rsize_t)128,& sub);
  if (rc != 409) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                        (unsigned int)276,rc); /* printf_va_794 */
  if (sub != (char *)0) printf("%s %u  Error rc=%d \n",
                               (char *)"test_strstr_s",(unsigned int)281,rc); /* printf_va_795 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"it all");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)2,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%d \n",(char *)"test_strstr_s",
                      (unsigned int)292,rc); /* printf_va_796 */
  strcpy(str1_10,"keep it all together");
  strcpy(str2_10,"eep");
  rc = strstr_s(str1_10,(rsize_t)128,(char const *)(str2_10),(rsize_t)128,
                & sub);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_strstr_s",
                      (unsigned int)303,(unsigned int)rc); /* printf_va_797 */
  if (sub != & str1_10[1]) printf("%s %u  Error rc=%u \n",
                                  (char *)"test_strstr_s",(unsigned int)308,
                                  (unsigned int)rc); /* printf_va_798 */
  std_sub = strstr((char const *)(str1_10),(char const *)(str2_10));
  if (sub != std_sub) printf("%s %u  Error rc=%u \n",(char *)"test_strstr_s",
                             (unsigned int)315,(unsigned int)rc); /* printf_va_799 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_800(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_801(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_802(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_803(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_804(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_805(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_806(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int printf_va_807(char const * restrict format, char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_808(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_809(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_810(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_811(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: *(param3 + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_812(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3, int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: *(param3 + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_813(char const * restrict format, char *param0,
                  unsigned int param1, char *param2, char *param3, int param4);

int test_strtok_s(void)
{
  int __retres;
  errno_t rc;
  char *p2str;
  char *p2tok;
  rsize_t len;
  char str1_17[128];
  char str2_16[128];
  size_t tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  p2tok = strtok_s(str1_17,(rsize_t *)0,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u   Error rc=%u \n",
                                 (char *)"test_strtok_s",(unsigned int)31,
                                 (unsigned int)rc); /* printf_va_800 */
  len = (rsize_t)0;
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u   Error rc=%u \n",
                                 (char *)"test_strtok_s",(unsigned int)41,
                                 (unsigned int)rc); /* printf_va_801 */
  len = (rsize_t)((4UL << 10) + (unsigned long)1);
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u   Error rc=%u \n",
                                 (char *)"test_strtok_s",(unsigned int)51,
                                 (unsigned int)rc); /* printf_va_802 */
  len = (rsize_t)0;
  p2tok = strtok_s(str1_17,& len,(char const *)0,& p2str);
  if (p2tok != (char *)0) printf("%s %u   Error rc=%u \n",
                                 (char *)"test_strtok_s",(unsigned int)61,
                                 (unsigned int)rc); /* printf_va_803 */
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),(char **)0);
  if (p2tok != (char *)0) printf("%s %u   Error rc=%u \n",
                                 (char *)"test_strtok_s",(unsigned int)70,
                                 (unsigned int)rc); /* printf_va_804 */
  strcpy(str1_17,"aaaaaaaa");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"fedcba");
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u token -%s-  remaining -%s-  \n",
                                 (char *)"test_strtok_s",(unsigned int)85,
                                 p2tok,p2str); /* printf_va_805 */
  strcpy(str1_17,"jklmnopqrst");
  tmp = strlen((char const *)(str1_17));
  len = tmp - (size_t)2;
  strcpy(str2_16,"fedcba");
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u token -%s-  remaining -%s-  \n",
                                 (char *)"test_strtok_s",(unsigned int)99,
                                 p2tok,p2str); /* printf_va_806 */
  if (p2tok != (char *)0) printf("token -%s-  -%s- \n",p2tok,p2str); /* printf_va_807 */
  strcpy(str1_17,"aaamnopqrst");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"fedcba");
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok == (char *)0) printf("%s %u token -%s-  remaining -%s-  \n",
                                 (char *)"test_strtok_s",(unsigned int)117,
                                 p2tok,p2str); /* printf_va_808 */
  strcpy(str1_17,"aaamnopqrstfedcba");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"fedcba");
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  if (p2tok == (char *)0) printf("%s %u token -%s-  remaining -%s-  \n",
                                 (char *)"test_strtok_s",(unsigned int)132,
                                 p2tok,p2str); /* printf_va_809 */
  tmp_0 = strcmp((char const *)p2tok,"mnopqrst");
  if (tmp_0) printf("%s %u token -%s-  remaining -%s-  \n",
                    (char *)"test_strtok_s",(unsigned int)137,p2tok,p2str); /* printf_va_810 */
  p2tok = strtok_s(p2str,& len,(char const *)(str2_16),& p2str);
  if (p2tok != (char *)0) printf("%s %u token -%s-  remaining -%s-  \n",
                                 (char *)"test_strtok_s",(unsigned int)148,
                                 p2tok,p2str); /* printf_va_811 */
  strcpy(str1_17,"?a?\?\?b,,,#c");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,"?");
  p2tok = strtok_s(str1_17,& len,(char const *)(str2_16),& p2str);
  tmp_1 = strcmp((char const *)p2tok,"a");
  if (tmp_1) printf("%s %u token -%s-  -%s- len=%d \n",
                    (char *)"test_strtok_s",(unsigned int)167,p2tok,p2str,
                    (int)len); /* printf_va_812 */
  strcpy(str1_17,"?a?\?\?b,,,#c");
  len = strlen((char const *)(str1_17));
  strcpy(str2_16,",");
  p2tok = strtok_s((char *)0,& len,(char const *)(str2_16),& p2str);
  tmp_2 = strcmp((char const *)p2tok,"?\?b");
  if (tmp_2) printf("%s %u token -%s-  -%s- len=%d \n",
                    (char *)"test_strtok_s",(unsigned int)184,p2tok,p2str,
                    (int)len); /* printf_va_813 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_814(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_815(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_816(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_817(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_818(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_819(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_820(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_821(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_822(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_823(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_824(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_825(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_826(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_827(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strtolowercase_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t len;
  char str[128];
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  len = (rsize_t)5;
  rc = strtolowercase_s((char *)0,len);
  if (rc != 400) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtolowercase_s",(unsigned int)26,
                        (unsigned int)rc); /* printf_va_814 */
  len = (rsize_t)0;
  rc = strtolowercase_s((char *)"test",len);
  if (rc != 401) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtolowercase_s",(unsigned int)35,
                        (unsigned int)rc); /* printf_va_815 */
  len = (rsize_t)99999;
  rc = strtolowercase_s((char *)"test",len);
  if (rc != 403) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtolowercase_s",(unsigned int)44,
                        (unsigned int)rc); /* printf_va_816 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strtolowercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)55,
                      (unsigned int)rc); /* printf_va_817 */
  tmp = strcmp((char const *)(str),"n");
  if (tmp) printf("%s %u   Error -%s- \n",(char *)"test_strtolowercase_s",
                  (unsigned int)60,str); /* printf_va_818 */
  strcpy(str,"n");
  len = strlen((char const *)(str));
  rc = strtolowercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)71,
                      (unsigned int)rc); /* printf_va_819 */
  tmp_0 = strcmp((char const *)(str),"n");
  if (tmp_0) printf("%s %u   Error -%s- \n",(char *)"test_strtolowercase_s",
                    (unsigned int)76,str); /* printf_va_820 */
  strcpy(str,"NOWISTHETIM3");
  rc = strtolowercase_s(str,(rsize_t)25);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)86,
                      (unsigned int)rc); /* printf_va_821 */
  tmp_1 = strcmp((char const *)(str),"nowisthetim3");
  if (tmp_1) printf("%s %u   Error -%s- \n",(char *)"test_strtolowercase_s",
                    (unsigned int)91,str); /* printf_va_822 */
  strcpy(str,"NOWISTHETIME");
  len = strlen((char const *)(str));
  rc = strtolowercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)102,
                      (unsigned int)rc); /* printf_va_823 */
  tmp_2 = strcmp((char const *)(str),"nowisthetime");
  if (tmp_2) printf("%s %u   Error -%s- \n",(char *)"test_strtolowercase_s",
                    (unsigned int)107,str); /* printf_va_824 */
  strcpy(str,"qqeRo");
  len = strlen((char const *)(str));
  rc = strtolowercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)118,
                      (unsigned int)rc); /* printf_va_825 */
  tmp_3 = strcmp((char const *)(str),"qqero");
  if (tmp_3) printf("%s %u   Error -%s- \n",(char *)"test_strtolowercase_s",
                    (unsigned int)123,str); /* printf_va_826 */
  strcpy(str,"1234");
  len = strlen((char const *)(str));
  rc = strtolowercase_s(str,(rsize_t)4);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtolowercase_s",(unsigned int)134,
                      (unsigned int)rc); /* printf_va_827 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_828(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_829(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_830(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_831(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_832(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_833(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_834(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_835(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_836(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_837(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_838(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_839(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_840(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

int test_strtouppercase_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t len;
  char str[128];
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  len = (rsize_t)5;
  rc = strtouppercase_s((char *)0,len);
  if (rc != 400) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtouppercase_s",(unsigned int)27,
                        (unsigned int)rc); /* printf_va_828 */
  len = (rsize_t)0;
  rc = strtouppercase_s((char *)"test",len);
  if (rc != 401) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtouppercase_s",(unsigned int)37,
                        (unsigned int)rc); /* printf_va_829 */
  len = (rsize_t)5;
  rc = strtouppercase_s((char *)"",len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)48,
                      (unsigned int)rc); /* printf_va_830 */
  len = (rsize_t)99999;
  rc = strtouppercase_s((char *)"test",len);
  if (rc != 403) printf("%s %u   Error rc=%u \n",
                        (char *)"test_strtouppercase_s",(unsigned int)60,
                        (unsigned int)rc); /* printf_va_831 */
  strcpy(str,"n");
  len = strlen((char const *)(str));
  rc = strtouppercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)72,
                      (unsigned int)rc); /* printf_va_832 */
  tmp = strcmp((char const *)(str),"N");
  if (tmp) printf("%s %u   Error -%s- \n",(char *)"test_strtouppercase_s",
                  (unsigned int)78,str); /* printf_va_833 */
  strcpy(str,"N");
  len = strlen((char const *)(str));
  rc = strtouppercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)90,
                      (unsigned int)rc); /* printf_va_834 */
  tmp_0 = strcmp((char const *)(str),"N");
  if (tmp_0) printf("%s %u   Error -%s- \n",(char *)"test_strtouppercase_s",
                    (unsigned int)96,str); /* printf_va_835 */
  strcpy(str,"nowisthetime");
  len = strlen((char const *)(str));
  rc = strtouppercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)108,
                      (unsigned int)rc); /* printf_va_836 */
  tmp_1 = strcmp((char const *)(str),"NOWISTHETIME");
  if (tmp_1) printf("%s %u   Error -%s- \n",(char *)"test_strtouppercase_s",
                    (unsigned int)114,str); /* printf_va_837 */
  strcpy(str,"qqeRo");
  len = strlen((char const *)(str));
  rc = strtouppercase_s(str,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)126,
                      (unsigned int)rc); /* printf_va_838 */
  tmp_2 = strcmp((char const *)(str),"QQERO");
  if (tmp_2) printf("%s %u   Error -%s- \n",(char *)"test_strtouppercase_s",
                    (unsigned int)132,str); /* printf_va_839 */
  strcpy(str,"1234");
  len = strlen((char const *)(str));
  rc = strtouppercase_s(str,(rsize_t)22);
  if (rc != 0) printf("%s %u   Error rc=%u \n",
                      (char *)"test_strtouppercase_s",(unsigned int)144,
                      (unsigned int)rc); /* printf_va_840 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_841(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_842(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_843(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_844(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_845(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_846(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_847(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_848(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_849(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_850(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_851(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_852(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_853(char const * restrict format, char *param0,
                  unsigned int param1, char *param2);

int test_strzero_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t max_len;
  char str1_17[128];
  uint32_t i;
  int tmp;
  rc = strzero_s((char *)0,(rsize_t)5);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                        (unsigned int)27,(unsigned int)rc); /* printf_va_841 */
  rc = strzero_s(str1_17,(rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                        (unsigned int)35,(unsigned int)rc); /* printf_va_842 */
  rc = strzero_s(str1_17,(rsize_t)((4UL << 10) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                        (unsigned int)43,(unsigned int)rc); /* printf_va_843 */
  max_len = (rsize_t)1;
  rc = strzero_s(str1_17,max_len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                      (unsigned int)52,(unsigned int)rc); /* printf_va_844 */
  i = (uint32_t)0;
  while (i < max_len) {
    if ((int)str1_17[i] != '\000') printf("%s %u   Error rc=%u \n",
                                          (char *)"test_strzero_s",
                                          (unsigned int)58,(unsigned int)rc); /* printf_va_845 */
    i ++;
  }
  max_len = (rsize_t)2;
  rc = strzero_s(str1_17,max_len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                      (unsigned int)68,(unsigned int)rc); /* printf_va_846 */
  i = (uint32_t)0;
  while (i < max_len) {
    if ((int)str1_17[i] != '\000') printf("%s %u   Error rc=%u \n",
                                          (char *)"test_strzero_s",
                                          (unsigned int)74,(unsigned int)rc); /* printf_va_847 */
    i ++;
  }
  max_len = (rsize_t)3;
  rc = strzero_s(str1_17,max_len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                      (unsigned int)84,(unsigned int)rc); /* printf_va_848 */
  i = (uint32_t)0;
  while (i < max_len) {
    if ((int)str1_17[i] != '\000') printf("%s %u   Error rc=%u \n",
                                          (char *)"test_strzero_s",
                                          (unsigned int)90,(unsigned int)rc); /* printf_va_849 */
    i ++;
  }
  max_len = (rsize_t)128;
  rc = strzero_s(str1_17,max_len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                      (unsigned int)100,(unsigned int)rc); /* printf_va_850 */
  i = (uint32_t)0;
  while (i < max_len) {
    if ((int)str1_17[i] != '\000') printf("%s %u   Error rc=%u \n",
                                          (char *)"test_strzero_s",
                                          (unsigned int)106,(unsigned int)rc); /* printf_va_851 */
    i ++;
  }
  strcpy(str1_17,"Now is the time for all data to be zeroed");
  max_len = strlen("Now is the ");
  rc = strzero_s(str1_17,max_len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_strzero_s",
                      (unsigned int)118,(unsigned int)rc); /* printf_va_852 */
  tmp = strcmp((char const *)(& str1_17[max_len]),
               "time for all data to be zeroed");
  if (tmp) printf("%s %u ERROR  --%s-- \n",(char *)"test_strzero_s",
                  (unsigned int)123,& str1_17[max_len]); /* printf_va_853 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_11[128];
static wchar_t str2_11[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_854(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_855(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_856(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_857(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_858(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_859(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_860(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_861(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_862(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_863(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_864(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_865(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_866(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_867(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_868(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_869(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_870(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_871(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_872(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_873(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_874(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_875(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_876(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_877(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_878(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_879(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_880(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_881(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_882(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_883(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_884(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_885(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_886(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_887(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_888(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_889(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_890(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_891(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_892(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, wchar_t *param3,
                  unsigned long param4, unsigned int param5);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_893(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_894(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_895(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_896(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_897(char const * restrict format, char *param0,
                  unsigned int param1, unsigned long param2,
                  unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_898(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, wchar_t *param3,
                  unsigned long param4, unsigned int param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_899(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_900(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_901(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_902(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_903(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_904(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_905(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_906(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_907(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_908(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_909(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_910(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_911(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_912(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_913(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_914(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_915(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_916(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_917(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_918(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2, unsigned int param3);

int test_wcpcpy_s(void)
{
  int __retres;
  wchar_t *ret;
  errno_t rc;
  int32_t ind;
  rsize_t sz;
  rsize_t tmp_1;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcpcpy_s:\n"); /* printf_va_854 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_855 */
  ret = wcpcpy_s((wchar_t *)0,(rsize_t)128,(wchar_t const *)(str2_11),& rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)105,(unsigned int)rc); /* printf_va_856 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)110,
                                  (unsigned int)rc); /* printf_va_857 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_858 */
  ret = wcpcpy_s(str1_11,(rsize_t)0,(wchar_t const *)(str2_11),& rc);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)120,(unsigned int)rc); /* printf_va_859 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)124,
                                  (unsigned int)rc); /* printf_va_860 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_861 */
  ret = wcpcpy_s(str1_11,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (wchar_t const *)(str2_11),& rc);
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)135,(unsigned int)rc); /* printf_va_862 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)139,
                                  (unsigned int)rc); /* printf_va_863 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_864 */
  wcscpy_s(str1_11,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  ret = wcpcpy_s(str1_11,(rsize_t)5,(wchar_t const *)0,& rc);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)151,(unsigned int)rc); /* printf_va_865 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)156,
                                  (unsigned int)rc); /* printf_va_866 */
  if (str1_11[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)169,
                               (unsigned int)rc); /* printf_va_867 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_868 */
  wcscpy_s(str1_11,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  ret = wcpcpy_s(str1_11,(rsize_t)5,(wchar_t const *)(str1_11),& rc);
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)183,(unsigned int)rc); /* printf_va_869 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)188,
                                  (unsigned int)rc); /* printf_va_870 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_871 */
  wcscpy_s(str1_11,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  ret = wcpcpy_s(str1_11,(rsize_t)128,(wchar_t const *)(str1_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)201,(unsigned int)rc); /* printf_va_872 */
  if (ret == (wchar_t *)0) goto _LOR;
  else 
    if (*(ret + 0) != 0L) goto _LOR;
    else {
      rsize_t tmp;
      tmp = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
      ;
      if (ret != & str1_11[tmp]) _LOR:
                                 printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                        (char *)"test_wcpcpy_s",
                                        (unsigned int)206,(unsigned int)rc); /* printf_va_873 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_874 */
  wcscpy_s(str1_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  sz = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
  ret = wcpcpy_s(str1_11,(rsize_t)128,(wchar_t const *)(& str1_11[5]),& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)222,(unsigned int)rc); /* printf_va_875 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)226,
                                  (unsigned int)rc); /* printf_va_876 */
  if (str1_11[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)239,
                               (unsigned int)rc); /* printf_va_877 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_878 */
  wcscpy_s(str1_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  sz = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
  ret = wcpcpy_s(& str1_11[5],(rsize_t)128,(wchar_t const *)(str1_11),& rc);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)256,(unsigned int)rc); /* printf_va_879 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)260,
                                  (unsigned int)rc); /* printf_va_880 */
  if (str1_11[5] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)273,
                               (unsigned int)rc); /* printf_va_881 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_882 */
  wcscpy_s(str1_11,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  str2_11[0] = 0L;
  ret = wcpcpy_s(str1_11,(rsize_t)(128 / 2),(wchar_t const *)(str2_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)295,(unsigned int)rc); /* printf_va_883 */
  if (ret == (wchar_t *)0) goto _LOR_0;
  else 
    if (*(ret + 0) != 0L) goto _LOR_0;
    else 
      if (ret != str1_11) _LOR_0:
                          printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                 (char *)"test_wcpcpy_s",(unsigned int)299,
                                 (unsigned int)rc); /* printf_va_884 */
  if (str1_11[0] != 0L) printf("%s %u   Error - string should be NULL rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)312,
                               (unsigned int)rc); /* printf_va_885 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_886 */
  wcscpy_s(str1_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  memset_s((void *)(str2_11),(rsize_t)'\000',(uint8_t)30);
  ret = wcpcpy_s(str2_11,(rsize_t)128,(wchar_t const *)(str1_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)328,(unsigned int)rc); /* printf_va_887 */
  if (ret == (wchar_t *)0) goto _LOR_1;
  else 
    if (*(ret + 0) != 0L) goto _LOR_1;
    else {
      rsize_t tmp_0;
      tmp_0 = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
      ;
      if (ret != & str2_11[tmp_0]) _LOR_1:
                                   printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                          (char *)"test_wcpcpy_s",
                                          (unsigned int)332,(unsigned int)rc); /* printf_va_888 */
    }
  rc = memcmp_s((void const *)(str2_11),(rsize_t)128,(void const *)L"k" "e"
                "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" ,
                (unsigned int)15 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcpcpy_s",
                       (unsigned int)338,str1_11); /* printf_va_889 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_890 */
  memset_s((void *)(str1_11),(rsize_t)'\000',(uint8_t)50);
  wcscpy_s(str2_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  sz = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
  ret = wcpcpy_s(str1_11,(rsize_t)128,(wchar_t const *)(str2_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)354,(unsigned int)rc); /* printf_va_891 */
  tmp_1 = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
  rc = memcmp_s((void const *)(str1_11),(rsize_t)128,(void const *)(str2_11),
                tmp_1 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls- <> -%ls-  (smax=%lu) Error rc=%u \n",
                       (char *)"test_wcpcpy_s",(unsigned int)360,str1_11,
                       str2_11,(unsigned long)sz,(unsigned int)rc); /* printf_va_892 */
  if (ret == (wchar_t *)0) goto _LOR_2;
  else 
    if (*(ret + 0) != 0L) goto _LOR_2;
    else {
      rsize_t tmp_2;
      tmp_2 = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
      ;
      if (ret != & str1_11[tmp_2]) _LOR_2:
                                   printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                          (char *)"test_wcpcpy_s",
                                          (unsigned int)365,(unsigned int)rc); /* printf_va_893 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_894 */
  wcscpy_s(str1_11,(rsize_t)128,L"x" "x" "x" "x" "x" "x" "x" "x" "x" "x" );
  wcscpy_s(str2_11,(rsize_t)128,L"a" "b" "c" "d" "e" );
  ret = wcpcpy_s(str1_11,(rsize_t)128,(wchar_t const *)(str2_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)378,(unsigned int)rc); /* printf_va_895 */
  if (ret == (wchar_t *)0) goto _LOR_3;
  else 
    if (*(ret + 0) != 0L) goto _LOR_3;
    else {
      rsize_t tmp_3;
      tmp_3 = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
      ;
      if (ret != & str1_11[tmp_3]) _LOR_3:
                                   printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                          (char *)"test_wcpcpy_s",
                                          (unsigned int)383,(unsigned int)rc); /* printf_va_896 */
    }
  sz = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
  if (sz != (rsize_t)5) printf("%s %u (sz=%lu <> 5) Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)389,
                               (unsigned long)sz,(unsigned int)rc); /* printf_va_897 */
  rc = memcmp_s((void const *)(str1_11),(rsize_t)128,(void const *)(str2_11),
                (unsigned int)6 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls- <> -%ls-  (size=%lu) Error rc=%u \n",
                       (char *)"test_wcpcpy_s",(unsigned int)394,str1_11,
                       str2_11,(unsigned long)sz,(unsigned int)rc); /* printf_va_898 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_899 */
  wcscpy_s(str1_11,(rsize_t)128,L"q" "q" "w" "e" "q" "e" "q" "e" "q" "e" "q"
           );
  wcscpy_s(str2_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  sz = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
  ret = wcpcpy_s(str1_11,(rsize_t)14,(wchar_t const *)(str2_11),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)409,(unsigned int)rc); /* printf_va_900 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)413,
                                  (unsigned int)rc); /* printf_va_901 */
  if (str1_11[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)418,
                               str1_11,(unsigned int)rc); /* printf_va_902 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_903 */
  wcscpy_s(str1_11,(rsize_t)128,L"q" "q" "w" "e" "q" "e" "q" "e" "q" "e" "q"
           );
  wcscpy_s(str2_11,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  sz = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
  ret = wcpcpy_s(str2_11,(rsize_t)6,(wchar_t const *)(str1_11),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)432,(unsigned int)rc); /* printf_va_904 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)436,
                                  (unsigned int)rc); /* printf_va_905 */
  if (str2_11[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)441,
                               str1_11,(unsigned int)rc); /* printf_va_906 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_907 */
  wcscpy_s(str2_11,(rsize_t)128,L"q" "q" "w" "e" "q" "e" "q" "e" "q" "e" "q"
           );
  wcscpy_s(str1_11,(rsize_t)128,L"i" "t" );
  ret = wcpcpy_s(str2_11,(rsize_t)3,(wchar_t const *)(str1_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)454,(unsigned int)rc); /* printf_va_908 */
  rc = memcmp_s((void const *)(str1_11),(rsize_t)128,(void const *)(str2_11),
                (unsigned int)3 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls-  Error rc=%u \n",(char *)"test_wcpcpy_s",
                       (unsigned int)460,str1_11,(unsigned int)rc); /* printf_va_909 */
  if (ret == (wchar_t *)0) goto _LOR_4;
  else 
    if (*(ret + 0) != 0L) goto _LOR_4;
    else {
      rsize_t tmp_4;
      tmp_4 = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
      ;
      if (ret != & str2_11[tmp_4]) _LOR_4:
                                   printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                          (char *)"test_wcpcpy_s",
                                          (unsigned int)464,(unsigned int)rc); /* printf_va_910 */
    }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_911 */
  wcscpy_s(str1_11,(rsize_t)128,L"q" "q" "1" "2" "3" "4" "5" "w" "e" "q" "e"
           "q" "e" "q" "e" "q" );
  wcscpy_s(str2_11,(rsize_t)128,L"i" "t" );
  ret = wcpcpy_s(str1_11,(rsize_t)10,(wchar_t const *)(str2_11),& rc);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                      (unsigned int)477,(unsigned int)rc); /* printf_va_912 */
  if (ret == (wchar_t *)0) goto _LOR_5;
  else 
    if (*(ret + 0) != 0L) goto _LOR_5;
    else {
      rsize_t tmp_5;
      tmp_5 = wcsnlen_s((wchar_t const *)(str1_11),(rsize_t)128);
      ;
      if (ret != & str1_11[tmp_5]) _LOR_5:
                                   printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                          (char *)"test_wcpcpy_s",
                                          (unsigned int)481,(unsigned int)rc); /* printf_va_913 */
    }
  rc = memcmp_s((void const *)(str1_11),(rsize_t)128,(void const *)(str2_11),
                (unsigned int)3 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls-  Error rc=%u \n",(char *)"test_wcpcpy_s",
                       (unsigned int)487,str1_11,(unsigned int)rc); /* printf_va_914 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_915 */
  wcscpy_s(str2_11,(rsize_t)128,L"q" "q" "w" "e" "q" "e" "q" "e" "q" "e" "q"
           );
  wcscpy_s(str1_11,(rsize_t)128,L"i" "t" );
  sz = wcsnlen_s((wchar_t const *)(str2_11),(rsize_t)128);
  ret = wcpcpy_s(str2_11,(rsize_t)2,(wchar_t const *)(str1_11),& rc);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcpcpy_s",
                        (unsigned int)502,(unsigned int)rc); /* printf_va_916 */
  if (ret != (wchar_t *)0) printf("Returned pointer incorrect: %s %u   Error rc=%u \n",
                                  (char *)"test_wcpcpy_s",(unsigned int)507,
                                  (unsigned int)rc); /* printf_va_917 */
  if (str2_11[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcpcpy_s",(unsigned int)512,
                               str1_11,(unsigned int)rc); /* printf_va_918 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_12[128];
static wchar_t str2_12[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_919(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_920(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_921(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_922(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_923(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_924(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_925(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_926(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_927(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_928(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_929(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_930(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_931(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_932(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_933(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_934(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_935(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_936(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_937(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_938(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_939(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_940(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_941(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_942(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2,
                  unsigned int param3, unsigned int param4);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_943(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_944(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_945(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_946(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_947(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_948(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_949(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_950(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_951(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_952(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_953(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_954(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_955(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_956(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_957(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_958(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_959(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_960(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_961(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_962(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_963(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_964(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_965(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_966(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_967(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_968(char const * restrict format, char *param0,
                  unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_969(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_970(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_971(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_972(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_973(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_974(char const * restrict format, char *param0,
                  unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_975(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_976(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_977(char const * restrict format, char *param0,
                  unsigned int param1);

int test_wcscat_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  int32_t len1;
  int32_t len2;
  int32_t len3;
  rsize_t tmp;
  rsize_t tmp_0;
  rsize_t tmp_1;
  rsize_t tmp_2;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcscat_s:\n"); /* printf_va_919 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_920 */
  rc = wcscat_s((wchar_t *)0,(rsize_t)128,(wchar_t const *)(str2_12));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)62,(unsigned int)rc); /* printf_va_921 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_922 */
  rc = wcscat_s(str1_12,(rsize_t)128,(wchar_t const *)0);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)72,(unsigned int)rc); /* printf_va_923 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_924 */
  rc = wcscat_s(str1_12,(rsize_t)0,(wchar_t const *)(str2_12));
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)82,(unsigned int)rc); /* printf_va_925 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_926 */
  rc = wcscat_s(str1_12,(rsize_t)((4UL << 10) + (unsigned long)1),
                (wchar_t const *)(str2_12));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)92,(unsigned int)rc); /* printf_va_927 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_928 */
  wcscpy_s(str1_12,(rsize_t)128,L"1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "1"
           "2" "3" "4" "5" "6" "7" "8" "9" "0" );
  rc = wcscat_s(str1_12,(rsize_t)8,(wchar_t const *)(& str1_12[7]));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)105,(unsigned int)rc); /* printf_va_929 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)110); /* printf_va_930 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_931 */
  wcscpy_s(str1_12,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)1,(wchar_t const *)(str2_12));
  if (rc != 407) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)123,(unsigned int)rc); /* printf_va_932 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)128); /* printf_va_933 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_934 */
  wcscpy_s(str1_12,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)10,(wchar_t const *)(str2_12));
  if (rc != 407) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)141,(unsigned int)rc); /* printf_va_935 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)146); /* printf_va_936 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_937 */
  wcscpy_s(str1_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  wcscpy_s(& str1_12[20],(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  rc = wcscat_s(str1_12,(rsize_t)30,(wchar_t const *)(& str1_12[20]));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)159,(unsigned int)rc); /* printf_va_938 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)164); /* printf_va_939 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_940 */
  wcscpy_s(str1_12,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  tmp = wcsnlen_s((wchar_t const *)(str1_12),(rsize_t)128);
  len1 = (int32_t)tmp;
  tmp_0 = wcsnlen_s((wchar_t const *)(str2_12),(rsize_t)128);
  len2 = (int32_t)tmp_0;
  rc = wcscat_s(str1_12,(rsize_t)50,(wchar_t const *)(str2_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)180,(unsigned int)rc); /* printf_va_941 */
  tmp_1 = wcsnlen_s((wchar_t const *)(str1_12),(rsize_t)128);
  len3 = (int32_t)tmp_1;
  if (len3 != len1 + len2) printf("%s %u lengths wrong: %u  %u  %u \n",
                                  (char *)"test_wcscat_s",(unsigned int)186,
                                  (unsigned int)len1,(unsigned int)len2,
                                  (unsigned int)len3); /* printf_va_942 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_943 */
  str1_12[0] = (wchar_t)'\000';
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)1,(wchar_t const *)(str2_12));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)200,(unsigned int)rc); /* printf_va_944 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)205); /* printf_va_945 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_946 */
  str1_12[0] = (wchar_t)'\000';
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)11,(wchar_t const *)(str2_12));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)218,(unsigned int)rc); /* printf_va_947 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)223); /* printf_va_948 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_949 */
  str1_12[0] = (wchar_t)'\000';
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)20,(wchar_t const *)(str2_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)236,(unsigned int)rc); /* printf_va_950 */
  tmp_2 = wcsnlen_s((wchar_t const *)(str2_12),(rsize_t)128);
  rc = memcmp_s((void const *)(str1_12),(rsize_t)128,(void const *)(str2_12),
                tmp_2 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)242,str1_12); /* printf_va_951 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_952 */
  str1_12[0] = (wchar_t)'\000';
  str2_12[0] = (wchar_t)'\000';
  rc = wcscat_s(str1_12,(rsize_t)128,(wchar_t const *)(str2_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)256,(unsigned int)rc); /* printf_va_953 */
  if (str1_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)261); /* printf_va_954 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_955 */
  str1_12[0] = (wchar_t)'\000';
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str2_12,(rsize_t)128,(wchar_t const *)(str1_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)274,(unsigned int)rc); /* printf_va_956 */
  rc = memcmp_s((void const *)(str2_12),(rsize_t)128,(void const *)L"k" "e"
                "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" ,
                (unsigned int)15 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)280,str1_12); /* printf_va_957 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_958 */
  wcscpy_s(str1_12,(rsize_t)128,L"q" "q" "w" "e" "q" "q" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str1_12,(rsize_t)128,(wchar_t const *)(str2_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)293,(unsigned int)rc); /* printf_va_959 */
  rc = memcmp_s((void const *)(str1_12),(rsize_t)128,(void const *)L"q" "q"
                "w" "e" "q" "q" "k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
                "p" "l" "e" ,(unsigned int)20 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)299,str1_12); /* printf_va_960 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_961 */
  wcscpy_s(str1_12,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str2_12,(rsize_t)16,(wchar_t const *)(str1_12));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)312,(unsigned int)rc); /* printf_va_962 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_963 */
  wcscpy_s(str1_12,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str2_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str2_12,(rsize_t)19,(wchar_t const *)(str1_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)325,(unsigned int)rc); /* printf_va_964 */
  rc = memcmp_s((void const *)(str2_12),(rsize_t)128,(void const *)L"k" "e"
                "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" "1" "2" "3"
                "4" ,(unsigned int)19 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)331,str1_12); /* printf_va_965 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_966 */
  wcscpy_s(str1_12,(rsize_t)128,L"1" "2" "3" "4" "5" "6" "7" "8" "9" "1" "2"
           "3" "4" "5" "6" "7" "8" "9" );
  wcscpy_s(& str1_12[13],(rsize_t)128,L"A" "B" "C" "D" "E" "F" "G" "H" "I"
           "J" "K" "L" "M" "N" "O" "P" "1" "2" "3" "4" "5" "6" "7" "8" "9" );
  rc = wcscat_s(& str1_12[13],(rsize_t)128,(wchar_t const *)(str1_12));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)345,(unsigned int)rc); /* printf_va_967 */
  if (str1_12[13] != 0L) printf("%s %u  Expected null  \n",
                                (char *)"test_wcscat_s",(unsigned int)350); /* printf_va_968 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_969 */
  wcscpy_s(str2_12,(rsize_t)128,L"1" "2" "3" );
  wcscpy_s(str1_12,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcscat_s(str2_12,(rsize_t)31,(wchar_t const *)(str1_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)363,(unsigned int)rc); /* printf_va_970 */
  rc = memcmp_s((void const *)(str2_12),(rsize_t)128,(void const *)L"1" "2"
                "3" "k" "e" "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" ,
                (unsigned int)17 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)369,str1_12); /* printf_va_971 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_972 */
  wcscpy_s(str2_12,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str1_12,(rsize_t)128,L"5" "6" "7" "8" "9" );
  rc = wcscat_s(str2_12,(rsize_t)10,(wchar_t const *)(str1_12));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                      (unsigned int)382,(unsigned int)rc); /* printf_va_973 */
  rc = memcmp_s((void const *)(str2_12),(rsize_t)128,(void const *)L"1" "2"
                "3" "4" "5" "6" "7" "8" "9" ,
                (unsigned int)9 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcscat_s",
                       (unsigned int)389,str1_12); /* printf_va_974 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_975 */
  wcscpy_s(str2_12,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str1_12,(rsize_t)128,L"5" "6" "7" "8" "9" );
  rc = wcscat_s(str2_12,(rsize_t)9,(wchar_t const *)(str1_12));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscat_s",
                        (unsigned int)402,(unsigned int)rc); /* printf_va_976 */
  if (str2_12[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcscat_s",(unsigned int)407); /* printf_va_977 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_13[128 * 4];
static wchar_t str2_13[128 * 4];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_978(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_979(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_980(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_981(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_982(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_983(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_984(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_985(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_986(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_987(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_988(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_989(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_990(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_991(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_992(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_993(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_994(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_995(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_996(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_997(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_998(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_999(char const * restrict format, char *param0,
                  unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1000(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1001(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1002(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1003(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1004(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1005(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1006(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3,
                   unsigned long param4, unsigned int param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1007(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1008(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1009(char const * restrict format, char *param0,
                   unsigned int param1, unsigned long param2,
                   unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1010(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3,
                   unsigned long param4, unsigned int param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1011(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1012(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1013(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1014(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1015(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1016(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1017(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1018(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1019(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1020(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1021(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1022(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1023(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1024(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1025(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

int test_wcscpy_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  rsize_t sz;
  rsize_t sz_orig;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcscpy_s:\n"); /* printf_va_978 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_979 */
  rc = wcscpy_s((wchar_t *)0,(rsize_t)(128 * 4),(wchar_t const *)(str2_13));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)104,(unsigned int)rc); /* printf_va_980 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_981 */
  rc = wcscpy_s(str1_13,(rsize_t)0,(wchar_t const *)(str2_13));
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)114,(unsigned int)rc); /* printf_va_982 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_983 */
  rc = wcscpy_s(str1_13,(rsize_t)((4UL << 10) + (unsigned long)1),
                (wchar_t const *)(str2_13));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)124,(unsigned int)rc); /* printf_va_984 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_985 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" ,(rsize_t)5);
  rc = wcscpy_s(str1_13,(rsize_t)5,(wchar_t const *)0);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)136,(unsigned int)rc); /* printf_va_986 */
  if (str1_13[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)149,
                               (unsigned int)rc); /* printf_va_987 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_988 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  rc = wcscpy_s(str1_13,(rsize_t)5,(wchar_t const *)(str1_13));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)163,(unsigned int)rc); /* printf_va_989 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_990 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  rc = wcscpy_s(str1_13,(rsize_t)(128 * 4),(wchar_t const *)(str1_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)175,(unsigned int)rc); /* printf_va_991 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_992 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  rc = wcscpy_s(str1_13,(rsize_t)(128 * 4),(wchar_t const *)(& str1_13[5]));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)190,(unsigned int)rc); /* printf_va_993 */
  if (str1_13[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)203,
                               (unsigned int)rc); /* printf_va_994 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_995 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str1_13),(rsize_t)(128 * 4));
  rc = wcscpy_s(& str1_13[8],(rsize_t)(128 * 4),(wchar_t const *)(str1_13));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)220,(unsigned int)rc); /* printf_va_996 */
  if (str1_13[8] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)233,
                               (unsigned int)rc); /* printf_va_997 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_998 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)41);
  str2_13[0] = 0L;
  rc = wcscpy_s(str1_13,(rsize_t)((128 * 4) / 2),(wchar_t const *)(str2_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)250,(unsigned int)rc); /* printf_va_999 */
  if (str1_13[0] != 0L) printf("%s %u   Error - string should be NULL rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)263,
                               (unsigned int)rc); /* printf_va_1000 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1001 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str1_13),(rsize_t)(128 * 4));
  memset_s((void *)(str2_13),(rsize_t)'\000',(uint8_t)30);
  rc = wcscpy_s(str2_13,(rsize_t)(128 * 4),(wchar_t const *)(str1_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)279,(unsigned int)rc); /* printf_va_1002 */
  rc = memcmp_s((void const *)(str2_13),(rsize_t)(128 * 4),
                (void const *)(str1_13),(sz + (rsize_t)1) * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- <> -%ls-\n",
                       (char *)"test_wcscpy_s",(unsigned int)285,str2_13,
                       str1_13); /* printf_va_1003 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1004 */
  memset_s((void *)(str1_13),(rsize_t)'\000',(uint8_t)50);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str2_13),(rsize_t)(128 * 4));
  rc = wcscpy_s(str1_13,(rsize_t)(128 * 4),(wchar_t const *)(str2_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)300,(unsigned int)rc); /* printf_va_1005 */
  rc = memcmp_s((void const *)(str1_13),(rsize_t)(128 * 4),
                (void const *)(str2_13),sz * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls- <> -%ls-  (smax=%lu) Error rc=%u \n",
                       (char *)"test_wcscpy_s",(unsigned int)306,str1_13,
                       str2_13,(unsigned long)sz,(unsigned int)rc); /* printf_va_1006 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1007 */
  wmemset_s(str1_13,120L,(rsize_t)20);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)15);
  sz_orig = wcsnlen_s((wchar_t const *)(str2_13),(rsize_t)(128 * 4));
  rc = wcscpy_s(str1_13,(rsize_t)(128 * 4),(wchar_t const *)(str2_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)320,(unsigned int)rc); /* printf_va_1008 */
  sz = wcsnlen_s((wchar_t const *)(str1_13),(rsize_t)(128 * 4));
  if (sz != sz_orig) 
    if (sz == (rsize_t)14) printf("%s %u (sz=%lu <> 5) Error rc=%u \n",
                                  (char *)"test_wcscpy_s",(unsigned int)326,
                                  (unsigned long)sz,(unsigned int)rc); /* printf_va_1009 */
  rc = memcmp_s((void const *)(str1_13),(rsize_t)(128 * 4),
                (void const *)(str2_13),sz * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls- <> -%ls-  (size=%lu) Error rc=%u \n",
                       (char *)"test_wcscpy_s",(unsigned int)331,str1_13,
                       str2_13,(unsigned long)sz,(unsigned int)rc); /* printf_va_1010 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1011 */
  wmemset_s(str1_13,120L,(rsize_t)20);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)15);
  rc = wcscpy_s(str1_13,(rsize_t)14,(wchar_t const *)(str2_13));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)346,(unsigned int)rc); /* printf_va_1012 */
  if (str1_13[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)351,
                               str1_13,(unsigned int)rc); /* printf_va_1013 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1014 */
  wmemset_s(str1_13,120L,(rsize_t)20);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)15);
  rc = wcscpy_s(str2_13,(rsize_t)6,(wchar_t const *)(str1_13));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)364,(unsigned int)rc); /* printf_va_1015 */
  if (str2_13[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)369,
                               str1_13,(unsigned int)rc); /* printf_va_1016 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1017 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"i" "t" ,(rsize_t)3);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"q" "q" "w" "e" "q" "e" "q" "e" "q"
            "e" "q" ,(rsize_t)12);
  rc = wcscpy_s(str2_13,(rsize_t)3,(wchar_t const *)(str1_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)383,(unsigned int)rc); /* printf_va_1018 */
  rc = memcmp_s((void const *)(str1_13),(rsize_t)(128 * 4),
                (void const *)(str2_13),(unsigned int)3 * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u -%ls-  Error rc=%u \n",(char *)"test_wcscpy_s",
                       (unsigned int)389,str1_13,(unsigned int)rc); /* printf_va_1019 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1020 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"q" "q" "1" "2" "3" "4" "5" "w" "e"
            "q" "e" "q" "e" "q" "e" "q" ,(rsize_t)17);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"i" "t" ,(rsize_t)3);
  sz_orig = wcsnlen_s((wchar_t const *)(str2_13),(rsize_t)(128 * 4));
  rc = wcscpy_s(str1_13,(rsize_t)10,(wchar_t const *)(str2_13));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                      (unsigned int)404,(unsigned int)rc); /* printf_va_1021 */
  rc = memcmp_s((void const *)(str1_13),(rsize_t)(128 * 4),
                (void const *)(str2_13),(unsigned int)3 * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u -%ls-  Error rc=%u \n",(char *)"test_wcscpy_s",
                       (unsigned int)410,str1_13,(unsigned int)rc); /* printf_va_1022 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1023 */
  wmemcpy_s(str1_13,(rsize_t)(128 * 4),L"i" "t" ,(rsize_t)3);
  wmemcpy_s(str2_13,(rsize_t)(128 * 4),L"q" "q" "w" "e" "q" "e" "q" "e" "q"
            "e" "q" ,(rsize_t)12);
  sz = wcsnlen_s((wchar_t const *)(str2_13),(rsize_t)(128 * 4));
  rc = wcscpy_s(str2_13,(rsize_t)2,(wchar_t const *)(str1_13));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcscpy_s",
                        (unsigned int)426,(unsigned int)rc); /* printf_va_1024 */
  if (str2_13[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcscpy_s",(unsigned int)431,
                               str1_13,(unsigned int)rc); /* printf_va_1025 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_14[128];
static wchar_t str2_14[128];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1026(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1027(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1028(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1029(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1030(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1031(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1032(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1033(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1034(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1035(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1036(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1037(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1038(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1039(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1040(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1041(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1042(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1043(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1044(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1045(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1046(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1047(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1048(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2,
                   unsigned int param3, unsigned int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1049(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1050(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1051(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param4),
            (indirect: param3), (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param4, param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1052(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2,
                   unsigned int param3, unsigned int param4);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1053(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1054(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1055(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1056(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1057(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1058(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1059(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1060(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1061(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1062(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1063(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1064(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1065(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1066(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1067(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1068(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1069(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1070(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1071(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1072(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1073(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1074(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1075(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1076(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1077(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1078(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1079(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1080(char const * restrict format, char *param0,
                   unsigned int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1081(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1082(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1083(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1084(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1085(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1086(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1087(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1088(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, *(param0 + (0 ..));
 */
int printf_va_1089(char const * restrict format, char *param0,
                   unsigned int param1);

int test_wcsncat_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  int32_t len1;
  int32_t len2;
  int32_t len3;
  rsize_t tmp;
  rsize_t tmp_0;
  rsize_t tmp_1;
  rsize_t tmp_2;
  rsize_t tmp_3;
  rsize_t tmp_4;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcsncat_s:\n"); /* printf_va_1026 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1027 */
  rc = wcsncat_s((wchar_t *)0,(rsize_t)128,(wchar_t const *)(str2_14),
                 (rsize_t)128);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)105,(unsigned int)rc); /* printf_va_1028 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1029 */
  rc = wcsncat_s(str1_14,(rsize_t)128,(wchar_t const *)0,(rsize_t)128);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)115,(unsigned int)rc); /* printf_va_1030 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1031 */
  rc = wcsncat_s(str1_14,(rsize_t)128,(wchar_t const *)(str2_14),
                 (rsize_t)((4UL << 10) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)125,(unsigned int)rc); /* printf_va_1032 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1033 */
  rc = wcsncat_s(str1_14,(rsize_t)0,(wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)134,(unsigned int)rc); /* printf_va_1034 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1035 */
  rc = wcsncat_s(str1_14,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)144,(unsigned int)rc); /* printf_va_1036 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1037 */
  wcscpy_s(str1_14,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" " "
           "k" "e" "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" );
  rc = wcsncat_s(str1_14,(rsize_t)128,(wchar_t const *)(& str1_14[11]),
                 (rsize_t)128);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)158,(unsigned int)rc); /* printf_va_1038 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)163); /* printf_va_1039 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1040 */
  wcscpy_s(str1_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str1_14,(rsize_t)2,(wchar_t const *)(& str1_14[20]),
                 (rsize_t)128);
  if (rc != 407) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)175,(unsigned int)rc); /* printf_va_1041 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)180); /* printf_va_1042 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1043 */
  wcscpy_s(str1_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  wcscpy_s(& str1_14[20],(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a"
           "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  rc = wcsncat_s(str1_14,(rsize_t)30,(wchar_t const *)(& str1_14[20]),
                 (rsize_t)128);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)193,(unsigned int)rc); /* printf_va_1044 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)198); /* printf_va_1045 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1046 */
  wcscpy_s(str1_14,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  tmp = wcsnlen_s((wchar_t const *)(str1_14),(rsize_t)128);
  len1 = (int32_t)tmp;
  len2 = 10;
  rc = wcsncat_s(str1_14,(rsize_t)50,(wchar_t const *)(str2_14),
                 (rsize_t)len2);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)214,(unsigned int)rc); /* printf_va_1047 */
  tmp_0 = wcsnlen_s((wchar_t const *)(str1_14),(rsize_t)128);
  len3 = (int32_t)tmp_0;
  if (len3 != len1 + len2) printf("%s %u lengths wrong: %u  %u  %u \n",
                                  (char *)"test_wcsncat_s",(unsigned int)220,
                                  (unsigned int)len1,(unsigned int)len2,
                                  (unsigned int)len3); /* printf_va_1048 */
  rc = memcmp_s((void const *)(str1_14),(rsize_t)128,(void const *)L"a" "a"
                "a" "a" "a" "a" "a" "a" "a" "a" "k" "e" "e" "p" " " "i" "t"
                " " "s" "i" ,(unsigned int)(len3 + 1) * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)226,str1_14); /* printf_va_1049 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1050 */
  wcscpy_s(str1_14,(rsize_t)128,L"a" "a" "a" "a" "a" "a" "a" "a" "a" "a" );
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  tmp_1 = wcsnlen_s((wchar_t const *)(str1_14),(rsize_t)128);
  len1 = (int32_t)tmp_1;
  tmp_2 = wcsnlen_s((wchar_t const *)(str2_14),(rsize_t)128);
  len2 = (int32_t)tmp_2;
  rc = wcsncat_s(str1_14,(rsize_t)50,(wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)242,(unsigned int)rc); /* printf_va_1051 */
  tmp_3 = wcsnlen_s((wchar_t const *)(str1_14),(rsize_t)128);
  len3 = (int32_t)tmp_3;
  if (len3 != len1 + len2) printf("%s %u lengths wrong: %u  %u  %u \n",
                                  (char *)"test_wcsncat_s",(unsigned int)248,
                                  (unsigned int)len1,(unsigned int)len2,
                                  (unsigned int)len3); /* printf_va_1052 */
  rc = memcmp_s((void const *)(str1_14),(rsize_t)128,(void const *)L"a" "a"
                "a" "a" "a" "a" "a" "a" "a" "a" "k" "e" "e" "p" " " "i" "t"
                " " "s" "i" "m" "p" "l" "e" ,
                (unsigned int)(len3 + 1) * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)254,str1_14); /* printf_va_1053 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1054 */
  str1_14[0] = (wchar_t)'\000';
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str1_14,(rsize_t)1,(wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)268,(unsigned int)rc); /* printf_va_1055 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)273); /* printf_va_1056 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1057 */
  str1_14[0] = (wchar_t)'\000';
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str1_14,(rsize_t)14,(wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)286,(unsigned int)rc); /* printf_va_1058 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)291); /* printf_va_1059 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1060 */
  str1_14[0] = (wchar_t)'\000';
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str1_14,(rsize_t)20,(wchar_t const *)(str2_14),(rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)304,(unsigned int)rc); /* printf_va_1061 */
  tmp_4 = wcsnlen_s((wchar_t const *)(str2_14),(rsize_t)128);
  rc = memcmp_s((void const *)(str1_14),(rsize_t)128,(void const *)(str2_14),
                tmp_4 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)310,str1_14); /* printf_va_1062 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1063 */
  str1_14[0] = (wchar_t)'\000';
  str2_14[0] = (wchar_t)'\000';
  rc = wcsncat_s(str1_14,(rsize_t)128,(wchar_t const *)(str2_14),
                 (rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)324,(unsigned int)rc); /* printf_va_1064 */
  if (str1_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)329); /* printf_va_1065 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1066 */
  str1_14[0] = (wchar_t)'\000';
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)128,(wchar_t const *)(str1_14),
                 (rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)342,(unsigned int)rc); /* printf_va_1067 */
  rc = memcmp_s((void const *)(str2_14),(rsize_t)128,(void const *)L"k" "e"
                "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" ,
                (unsigned int)15 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)348,str1_14); /* printf_va_1068 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1069 */
  wcscpy_s(str2_14,(rsize_t)128,L"q" "q" "w" "e" "q" "q" );
  wcscpy_s(str1_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)128,(wchar_t const *)(str1_14),
                 (rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)361,(unsigned int)rc); /* printf_va_1070 */
  rc = memcmp_s((void const *)(str2_14),(rsize_t)128,(void const *)L"q" "q"
                "w" "e" "q" "q" "k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
                "p" "l" "e" ,(unsigned int)20 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)367,str1_14); /* printf_va_1071 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1072 */
  wcscpy_s(str1_14,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)12,(wchar_t const *)(str1_14),(rsize_t)128);
  if (rc != 407) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)380,(unsigned int)rc); /* printf_va_1073 */
  if (str2_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)385); /* printf_va_1074 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1075 */
  wcscpy_s(str1_14,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)16,(wchar_t const *)(str1_14),(rsize_t)128);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)398,(unsigned int)rc); /* printf_va_1076 */
  if (str2_14[0] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)403); /* printf_va_1077 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1078 */
  wcscpy_s(str1_14,(rsize_t)128,L"1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "1"
           "2" "3" "4" "5" "6" "7" "8" "9" "0" );
  rc = wcsncat_s(& str1_14[7],(rsize_t)128,(wchar_t const *)(str1_14),
                 (rsize_t)128);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)415,(unsigned int)rc); /* printf_va_1079 */
  if (str1_14[7] != (wchar_t)'\000') printf("%s %u  Expected null  \n",
                                            (char *)"test_wcsncat_s",
                                            (unsigned int)420); /* printf_va_1080 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1081 */
  wcscpy_s(str1_14,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str2_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)19,(wchar_t const *)(str1_14),(rsize_t)128);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)433,(unsigned int)rc); /* printf_va_1082 */
  rc = memcmp_s((void const *)(str2_14),(rsize_t)128,(void const *)L"k" "e"
                "e" "p" " " "i" "t" " " "s" "i" "m" "p" "l" "e" "1" "2" "3"
                "4" ,(unsigned int)19 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)439,str1_14); /* printf_va_1083 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1084 */
  wcscpy_s(str2_14,(rsize_t)128,L"1" "2" "3" "4" "5" "6" "7" "8" "9" );
  wcscpy_s(str1_14,(rsize_t)128,L"k" "e" "e" "p" " " "i" "t" " " "s" "i" "m"
           "p" "l" "e" );
  rc = wcsncat_s(str2_14,(rsize_t)128,(wchar_t const *)(str1_14),(rsize_t)7);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                      (unsigned int)452,(unsigned int)rc); /* printf_va_1085 */
  rc = memcmp_s((void const *)(str2_14),(rsize_t)128,(void const *)L"1" "2"
                "3" "4" "5" "6" "7" "8" "9" "k" "e" "e" "p" " " "i" "t" ,
                (unsigned int)17 * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u   Error -%ls- \n",(char *)"test_wcsncat_s",
                       (unsigned int)458,str1_14); /* printf_va_1086 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1087 */
  wcscpy_s(str2_14,(rsize_t)128,L"1" "2" "3" "4" );
  wcscpy_s(str1_14,(rsize_t)128,L"5" "6" "7" "8" "9" );
  rc = wcsncat_s(str2_14,(rsize_t)9,(wchar_t const *)(str1_14),(rsize_t)128);
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncat_s",
                        (unsigned int)471,(unsigned int)rc); /* printf_va_1088 */
  if (str2_14[0] != 0L) printf("%s %u  Expected null  \n",
                               (char *)"test_wcsncat_s",(unsigned int)476); /* printf_va_1089 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_15[128 * 4];
static wchar_t str2_15[128 * 4];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1090(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1091(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1092(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1093(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1094(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1095(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1096(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1097(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1098(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1099(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1100(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1101(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1102(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1103(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1104(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1105(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1106(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1107(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1108(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1109(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1110(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1111(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1112(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1113(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1114(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1115(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1116(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1117(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1118(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1119(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1120(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1121(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1122(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1123(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1124(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1125(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1126(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1127(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1128(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1129(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1130(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1131(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1132(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1133(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1134(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1135(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1136(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1137(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1138(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1139(char const * restrict format, char *param0,
                   unsigned int param1, unsigned long param2,
                   unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_wstring(param3);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param5),
            (indirect: param4), (indirect: *(param3 + (0 ..))),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param5, param4, *(param3 + (0 ..)), *(param2 + (0 ..)), param1,
            *(param0 + (0 ..));
 */
int printf_va_1140(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, wchar_t *param3,
                   unsigned long param4, unsigned int param5);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1141(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1142(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1143(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1144(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1145(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(param0);
    requires valid_read_wstring(param2);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: *(param2 + (0 ..))), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, *(param2 + (0 ..)), param1, *(param0 + (0 ..));
 */
int printf_va_1146(char const * restrict format, char *param0,
                   unsigned int param1, wchar_t *param2, unsigned int param3);

int test_wcsncpy_s(void)
{
  int __retres;
  errno_t rc;
  int32_t ind;
  rsize_t sz;
  rsize_t sz_orig;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcsncpy_s:\n"); /* printf_va_1090 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1091 */
  rc = wcsncpy_s((wchar_t *)0,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)(128 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)104,(unsigned int)rc); /* printf_va_1092 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1093 */
  rc = wcsncpy_s(str1_15,(rsize_t)0,(wchar_t const *)(str2_15),
                 (rsize_t)(128 * 4));
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)114,(unsigned int)rc); /* printf_va_1094 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1095 */
  rc = wcsncpy_s(str1_15,(rsize_t)((4UL << 10) + (unsigned long)1),
                 (wchar_t const *)(str2_15),(rsize_t)(128 * 4));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)124,(unsigned int)rc); /* printf_va_1096 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1097 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" ,(rsize_t)5);
  rc = wcsncpy_s(str1_15,(rsize_t)5,(wchar_t const *)0,(rsize_t)(128 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)136,(unsigned int)rc); /* printf_va_1098 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)149,
                               (unsigned int)rc); /* printf_va_1099 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1100 */
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)160,(unsigned int)rc); /* printf_va_1101 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)172,
                               (unsigned int)rc); /* printf_va_1102 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1103 */
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)((4UL << 10) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)183,(unsigned int)rc); /* printf_va_1104 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)195,
                               (unsigned int)rc); /* printf_va_1105 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1106 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  rc = wcsncpy_s(str1_15,(rsize_t)5,(wchar_t const *)(str1_15),
                 (rsize_t)(128 * 4));
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)208,(unsigned int)rc); /* printf_va_1107 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)220,
                               (unsigned int)rc); /* printf_va_1108 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1109 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(& str1_15[5]),
                 (rsize_t)30);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)233,(unsigned int)rc); /* printf_va_1110 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)245,
                               (unsigned int)rc); /* printf_va_1111 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1112 */
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  wmemset_s(str1_15,0L,(rsize_t)20);
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)10);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)260,(unsigned int)rc); /* printf_va_1113 */
  if (str1_15[9] == 0L) 
    if (str2_15[10] != 0L) printf("%s %u   Error rc=%u \n",
                                  (char *)"test_wcsncpy_s",(unsigned int)265,
                                  (unsigned int)rc); /* printf_va_1114 */
  rc = memcmp_s((void const *)(str1_15),(rsize_t)(128 * 4),
                (void const *)(str2_15),(unsigned int)10 * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- <> -%ls-\n",
                       (char *)"test_wcsncpy_s",(unsigned int)271,str1_15,
                       str2_15); /* printf_va_1115 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1116 */
  wmemset_s(str1_15,0L,(rsize_t)20);
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str2_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)(128 * 4));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)286,(unsigned int)rc); /* printf_va_1117 */
  if (str1_15[sz] != 0L) printf("%s %u   Error rc=%u \n",
                                (char *)"test_wcsncpy_s",(unsigned int)291,
                                (unsigned int)rc); /* printf_va_1118 */
  rc = memcmp_s((void const *)(str1_15),(rsize_t)(128 * 4),
                (void const *)(str2_15),(sz + (rsize_t)1) * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- <> -%ls-\n",
                       (char *)"test_wcsncpy_s",(unsigned int)297,str1_15,
                       str2_15); /* printf_va_1119 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1120 */
  wmemset_s(str1_15,0L,(rsize_t)20);
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str2_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str1_15,sz - (rsize_t)5,(wchar_t const *)(str2_15),
                 (rsize_t)(128 * 4));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)312,(unsigned int)rc); /* printf_va_1121 */
  if (str1_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)324,
                               (unsigned int)rc); /* printf_va_1122 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1123 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  rc = wcsncpy_s(& str1_15[5],(rsize_t)(128 * 4),(wchar_t const *)(str1_15),
                 (rsize_t)30);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)337,(unsigned int)rc); /* printf_va_1124 */
  if (str1_15[5] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)349,
                               (unsigned int)rc); /* printf_va_1125 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1126 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  wmemset_s(str2_15,0L,(rsize_t)20);
  rc = wcsncpy_s(str2_15,(rsize_t)(128 * 4),(wchar_t const *)(str1_15),
                 (rsize_t)17);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)364,(unsigned int)rc); /* printf_va_1127 */
  if (str2_15[16] == 0L) 
    if (str2_15[17] != 0L) printf("%s %u   Error rc=%u \n",
                                  (char *)"test_wcsncpy_s",(unsigned int)369,
                                  (unsigned int)rc); /* printf_va_1128 */
  rc = memcmp_s((void const *)(str1_15),(rsize_t)(128 * 4),
                (void const *)(str2_15),(unsigned int)17 * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- <> -%ls-\n",
                       (char *)"test_wcsncpy_s",(unsigned int)375,str1_15,
                       str2_15); /* printf_va_1129 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1130 */
  wmemset_s(str2_15,0L,(rsize_t)20);
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str1_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str2_15,(rsize_t)(128 * 4),(wchar_t const *)(str1_15),
                 (rsize_t)(128 * 4));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)390,(unsigned int)rc); /* printf_va_1131 */
  if (str1_15[sz] != 0L) printf("%s %u   Error rc=%u \n",
                                (char *)"test_wcsncpy_s",(unsigned int)395,
                                (unsigned int)rc); /* printf_va_1132 */
  rc = memcmp_s((void const *)(str2_15),(rsize_t)(128 * 4),
                (void const *)(str1_15),(sz + (rsize_t)1) * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u   Error -%ls- <> -%ls-\n",
                       (char *)"test_wcsncpy_s",(unsigned int)401,str2_15,
                       str1_15); /* printf_va_1133 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1134 */
  wmemset_s(str2_15,0L,(rsize_t)20);
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" "-" "-" "k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)47);
  sz = wcsnlen_s((wchar_t const *)(str1_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str2_15,sz - (rsize_t)5,(wchar_t const *)(str1_15),
                 (rsize_t)(128 * 4));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)416,(unsigned int)rc); /* printf_va_1135 */
  if (str2_15[0] != 0L) printf("%s %u   Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)428,
                               (unsigned int)rc); /* printf_va_1136 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1137 */
  wmemset_s(str1_15,120L,(rsize_t)20);
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"k" "e" "e" "p" " " "i" "t" " " "s"
            "i" "m" "p" "l" "e" ,(rsize_t)15);
  sz_orig = wcsnlen_s((wchar_t const *)(str2_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str1_15,(rsize_t)(128 * 4),(wchar_t const *)(str2_15),
                 (rsize_t)(128 * 4));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)444,(unsigned int)rc); /* printf_va_1138 */
  sz = wcsnlen_s((wchar_t const *)(str1_15),(rsize_t)(128 * 4));
  if (sz != sz_orig) 
    if (sz == (rsize_t)14) printf("%s %u (sz=%lu <> 5) Error rc=%u \n",
                                  (char *)"test_wcsncpy_s",(unsigned int)450,
                                  (unsigned long)sz,(unsigned int)rc); /* printf_va_1139 */
  rc = memcmp_s((void const *)(str1_15),(rsize_t)(128 * 4),
                (void const *)(str2_15),sz * sizeof(wchar_t),& ind);
  if (ind != 0) printf("%s %u -%ls- <> -%ls-  (size=%lu) Error rc=%u \n",
                       (char *)"test_wcsncpy_s",(unsigned int)455,str1_15,
                       str2_15,(unsigned long)sz,(unsigned int)rc); /* printf_va_1140 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1141 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"i" "t" ,(rsize_t)3);
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"q" "q" "w" "e" "q" "e" "q" "e" "q"
            "e" "q" ,(rsize_t)12);
  rc = wcsncpy_s(str2_15,(rsize_t)3,(wchar_t const *)(str1_15),
                 (rsize_t)(128 * 4));
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                      (unsigned int)471,(unsigned int)rc); /* printf_va_1142 */
  rc = memcmp_s((void const *)(str1_15),(rsize_t)(128 * 4),
                (void const *)(str2_15),(unsigned int)3 * sizeof(wchar_t),
                & ind);
  if (ind != 0) printf("%s %u -%ls-  Error rc=%u \n",
                       (char *)"test_wcsncpy_s",(unsigned int)477,str1_15,
                       (unsigned int)rc); /* printf_va_1143 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1144 */
  wmemcpy_s(str1_15,(rsize_t)(128 * 4),L"i" "t" ,(rsize_t)3);
  wmemcpy_s(str2_15,(rsize_t)(128 * 4),L"q" "q" "w" "e" "q" "e" "q" "e" "q"
            "e" "q" ,(rsize_t)12);
  sz = wcsnlen_s((wchar_t const *)(str2_15),(rsize_t)(128 * 4));
  rc = wcsncpy_s(str2_15,(rsize_t)2,(wchar_t const *)(str1_15),
                 (rsize_t)(128 * 4));
  if (rc != 406) printf("%s %u   Error rc=%u \n",(char *)"test_wcsncpy_s",
                        (unsigned int)494,(unsigned int)rc); /* printf_va_1145 */
  if (str2_15[0] != 0L) printf("%s %u -%ls-  Error rc=%u \n",
                               (char *)"test_wcsncpy_s",(unsigned int)499,
                               str1_15,(unsigned int)rc); /* printf_va_1146 */
  __retres = 0;
  return __retres;
}

static wchar_t str1_16[128 * 4];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1147(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1148(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1149(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1150(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1151(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1152(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1153(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1154(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1155(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1156(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1157(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1158(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1159(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1160(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1161(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

int test_wcsnlen_s(void)
{
  int __retres;
  errno_t rc;
  rsize_t tmp;
  rsize_t tmp_0;
  rsize_t tmp_1;
  rsize_t tmp_2;
  rsize_t tmp_3;
  rsize_t tmp_4;
  rsize_t tmp_5;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wcsnlen_s:\n"); /* printf_va_1147 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1148 */
  tmp = wcsnlen_s((wchar_t const *)0,(rsize_t)(128 * 4));
  rc = (errno_t)tmp;
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                      (unsigned int)78,(unsigned int)rc); /* printf_va_1149 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1150 */
  tmp_0 = wcsnlen_s((wchar_t const *)(str1_16),
                    (rsize_t)((4UL << 10) + (unsigned long)1));
  rc = (errno_t)tmp_0;
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                      (unsigned int)88,(unsigned int)rc); /* printf_va_1151 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1152 */
  wmemcpy_s(str1_16,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  tmp_1 = wcsnlen_s((wchar_t const *)(str1_16),(rsize_t)41);
  rc = (errno_t)tmp_1;
  if (rc != 40) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                       (unsigned int)100,(unsigned int)rc); /* printf_va_1153 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1154 */
  wmemcpy_s(str1_16,(rsize_t)(128 * 4),L"a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a"
            "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" "a" ,
            (rsize_t)42);
  tmp_2 = wcsnlen_s((wchar_t const *)(str1_16),(rsize_t)20);
  rc = (errno_t)tmp_2;
  if (rc != 20) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                       (unsigned int)112,(unsigned int)rc); /* printf_va_1155 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1156 */
  wmemset_s(str1_16,0L,(rsize_t)42);
  tmp_3 = wcsnlen_s((wchar_t const *)(str1_16),(rsize_t)(128 * 4));
  rc = (errno_t)tmp_3;
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                      (unsigned int)124,(unsigned int)rc); /* printf_va_1157 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1158 */
  memset_s((void *)(str1_16),(rsize_t)'\000',(uint8_t)50);
  str1_16[0] = 65L;
  tmp_4 = wcsnlen_s((wchar_t const *)(str1_16),(rsize_t)(128 * 4));
  rc = (errno_t)tmp_4;
  if (rc != 1) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                      (unsigned int)138,(unsigned int)rc); /* printf_va_1159 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1160 */
  wmemcpy_s(str1_16,(rsize_t)(128 * 4),L"1" "2" ,(rsize_t)3);
  tmp_5 = wcsnlen_s((wchar_t const *)(str1_16),(rsize_t)(128 * 4));
  rc = (errno_t)tmp_5;
  if (rc != 2) printf("%s %u   Error rc=%u \n",(char *)"test_wcsnlen_s",
                      (unsigned int)150,(unsigned int)rc); /* printf_va_1161 */
  __retres = 0;
  return __retres;
}

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1162(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1163(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1164(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1165(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1166(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1167(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1168(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1169(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1170(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1171(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1172(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1173(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1174(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1175(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1176(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1177(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1178(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1179(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1180(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1181(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1182(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1183(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1184(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1185(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1186(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1187(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1188(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1189(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1190(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1191(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1192(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1193(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1194(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1195(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1196(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1197(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1198(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1199(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1200(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1201(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1202(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1203(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1204(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1205(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1),
            (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, *(param0 + (0 ..));
 */
int printf_va_1206(char const * restrict format, char *param0,
                   unsigned int param1, int param2, unsigned int param3);

int test_wmemcmp_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  int32_t ind;
  uint32_t i;
  wchar_t mem1_6[128];
  wchar_t mem2_4[128];
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wmemcmp_s:\n"); /* printf_va_1162 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1163 */
  rc = wmemcmp_s((wchar_t const *)0,(rsize_t)128,(wchar_t const *)(mem2_4),
                 (rsize_t)128,& ind);
  if (rc != 400) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)93,ind,
                        (unsigned int)rc); /* printf_va_1164 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1165 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,(wchar_t const *)0,
                 (rsize_t)128,& ind);
  if (rc != 400) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)103,ind,
                        (unsigned int)rc); /* printf_va_1166 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1167 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,(int *)0);
  if (rc != 400) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)113,ind,
                        (unsigned int)rc); /* printf_va_1168 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1169 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)0,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 401) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)123,ind,
                        (unsigned int)rc); /* printf_va_1170 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1171 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)0,& ind);
  if (rc != 401) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)133,ind,
                        (unsigned int)rc); /* printf_va_1172 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1173 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),
                 (rsize_t)((256UL << 20) + (unsigned long)1),
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 403) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)143,ind,
                        (unsigned int)rc); /* printf_va_1174 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1175 */
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),
                 (rsize_t)((256UL << 20) + (unsigned long)1),& ind);
  if (rc != 403) printf("%s %u  Ind=%d  Error rc=%u \n",
                        (char *)"test_wmemcmp_s",(unsigned int)153,ind,
                        (unsigned int)rc); /* printf_va_1176 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1177 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  len = (uint32_t)1;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),len,(wchar_t const *)(mem2_4),len,
                 & ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)167,ind,
                      (unsigned int)rc); /* printf_va_1178 */
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)172,ind,(unsigned int)rc); /* printf_va_1179 */
  ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
               len * (uint32_t)4);
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)178,ind,(unsigned int)rc); /* printf_va_1180 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1181 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  len = (uint32_t)2;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),len,(wchar_t const *)(mem2_4),len,
                 & ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)192,ind,
                      (unsigned int)rc); /* printf_va_1182 */
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)197,ind,(unsigned int)rc); /* printf_va_1183 */
  ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
               len * (uint32_t)4);
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)203,ind,(unsigned int)rc); /* printf_va_1184 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1185 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)216,ind,
                      (unsigned int)rc); /* printf_va_1186 */
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)221,ind,(unsigned int)rc); /* printf_va_1187 */
  ind = memcmp((void const *)(mem1_6),(void const *)(mem2_4),
               (size_t)(128 * 4));
  if (ind != 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)227,ind,(unsigned int)rc); /* printf_va_1188 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1189 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(128 - 10)) {
    mem2_4[i] = (wchar_t)5;
    i ++;
  }
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)242,ind,
                      (unsigned int)rc); /* printf_va_1190 */
  if (ind <= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)247,ind,(unsigned int)rc); /* printf_va_1191 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1192 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(128 - 10)) {
    mem2_4[i] = (wchar_t)5;
    i ++;
  }
  rc = wmemcmp_s((wchar_t const *)(mem2_4),(rsize_t)128,
                 (wchar_t const *)(mem1_6),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)263,ind,
                      (unsigned int)rc); /* printf_va_1193 */
  if (ind >= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)268,ind,(unsigned int)rc); /* printf_va_1194 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1195 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  mem2_4[1] += (wchar_t)1;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)283,ind,
                      (unsigned int)rc); /* printf_va_1196 */
  if (ind >= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)288,ind,(unsigned int)rc); /* printf_va_1197 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1198 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  mem2_4[1] -= (wchar_t)1;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)303,ind,
                      (unsigned int)rc); /* printf_va_1199 */
  if (ind <= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)308,ind,(unsigned int)rc); /* printf_va_1200 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1201 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  mem2_4[128 - 1] += (wchar_t)1;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)323,ind,
                      (unsigned int)rc); /* printf_va_1202 */
  if (ind >= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)328,ind,(unsigned int)rc); /* printf_va_1203 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1204 */
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem1_6[i] = (wchar_t)i;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)128) {
    mem2_4[i] = (wchar_t)i;
    i ++;
  }
  mem2_4[128 - 1] -= (wchar_t)1;
  rc = wmemcmp_s((wchar_t const *)(mem1_6),(rsize_t)128,
                 (wchar_t const *)(mem2_4),(rsize_t)128,& ind);
  if (rc != 0) printf("%s %u  Ind=%d  Error rc=%u \n",
                      (char *)"test_wmemcmp_s",(unsigned int)343,ind,
                      (unsigned int)rc); /* printf_va_1205 */
  if (ind <= 0) printf("%s %u  Ind=%d  rc=%u \n",(char *)"test_wmemcmp_s",
                       (unsigned int)348,ind,(unsigned int)rc); /* printf_va_1206 */
  __retres = 0;
  return __retres;
}

static wchar_t mem1_3[256 * 4 + 2];
static wchar_t mem2_2[256 * 4 + 2];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1207(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1208(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1209(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1210(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1211(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1212(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1213(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1214(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1215(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1216(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1217(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1218(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1219(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1220(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1221(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1222(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1223(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1224(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1225(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1226(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1227(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1228(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1229(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1230(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1231(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1232(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1233(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1234(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1235(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1236(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1237(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1238(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1239(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1240(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1241(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1242(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1243(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1244(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1245(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1246(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1247(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1248(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1249(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1250(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1251(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1252(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1253(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1254(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1255(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1256(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1257(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1258(char const * restrict format, int param0, int param1,
                   int param2, int param3);

int test_wmemcpy_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wmemcpy_s:\n"); /* printf_va_1207 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1208 */
  rc = wmemcpy_s((wchar_t *)0,(rsize_t)(256 * 4),(wchar_t const *)(mem2_2),
                 (rsize_t)(256 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)85,(unsigned int)rc); /* printf_va_1209 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1210 */
  rc = wmemcpy_s(mem1_3,(rsize_t)0,(wchar_t const *)(mem2_2),
                 (rsize_t)(256 * 4));
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)96,(unsigned int)rc); /* printf_va_1211 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1212 */
  rc = wmemcpy_s(mem1_3,(rsize_t)((256UL << 20) + (unsigned long)1),
                 (wchar_t const *)(mem2_2),(rsize_t)(256 * 4));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)106,(unsigned int)rc); /* printf_va_1213 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1214 */
  rc = wmemcpy_s(mem1_3,(rsize_t)(256 * 4),(wchar_t const *)0,
                 (rsize_t)(256 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)116,(unsigned int)rc); /* printf_va_1215 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1216 */
  rc = wmemcpy_s(mem1_3,(rsize_t)10,(wchar_t const *)(mem2_2),(rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)126,(unsigned int)rc); /* printf_va_1217 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1218 */
  rc = wmemcpy_s(mem1_3,(rsize_t)(256 * 4),(wchar_t const *)(mem2_2),
                 (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)136,(unsigned int)rc); /* printf_va_1219 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1220 */
  rc = wmemcpy_s(mem1_3,(rsize_t)(256 * 4),(wchar_t const *)(& mem1_3[20]),
                 (rsize_t)21);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)146,(unsigned int)rc); /* printf_va_1221 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1222 */
  rc = wmemcpy_s(& mem1_3[25],(rsize_t)(256 * 4),(wchar_t const *)(mem1_3),
                 (rsize_t)26);
  if (rc != 404) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)156,(unsigned int)rc); /* printf_va_1223 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1224 */
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    mem1_3[i] = (wchar_t)33;
    i ++;
  }
  mem1_3[10] = (wchar_t)40;
  i = (uint32_t)11;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)44;
    i ++;
  }
  rc = wmemcpy_s(mem1_3,(rsize_t)10,(wchar_t const *)(& mem1_3[10]),
                 (rsize_t)10);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                      (unsigned int)171,(unsigned int)rc); /* printf_va_1225 */
  else {
    if (mem1_3[0] != (wchar_t)40) 
      if (mem1_3[10] != (wchar_t)40) printf("%d - %d m1[0]=%d  m1[10]=%d should be 40  \n",
                                            176,(int)i,(int)mem1_3[0],
                                            (int)mem1_3[10]); /* printf_va_1226 */
    i = (uint32_t)1;
    while (i < (uint32_t)10) {
      if (mem1_3[i] != (wchar_t)44) printf("%d - %d m1=%d  should be 44  \n",
                                           181,(int)i,(int)mem1_3[i]); /* printf_va_1227 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1228 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 1)) {
    mem1_3[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4);
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(mem2_2),len + (rsize_t)1);
  if (rc == 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                      (unsigned int)197,(unsigned int)rc); /* printf_va_1229 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",204,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1230 */
      i ++;
    }
    if (mem1_3[i] != (wchar_t)33) printf("%d - %lu m1=%d  m2=%d  \n",210,
                                         (unsigned long)len,(int)mem1_3[len],
                                         (int)mem2_2[len]); /* printf_va_1231 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1232 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 2)) {
    mem1_3[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)((256 * 4) / 2);
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(mem2_2),(rsize_t)(256 * 4));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)226,(unsigned int)rc); /* printf_va_1233 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",233,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1234 */
      i ++;
    }
    if (mem1_3[len] != (wchar_t)33) printf("%d - %lu m1=%d  m2=%d  \n",239,
                                           (unsigned long)len,
                                           (int)mem1_3[len],(int)mem2_2[len]); /* printf_va_1235 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1236 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 2)) {
    mem1_3[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4);
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(mem2_2),(rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)254,(unsigned int)rc); /* printf_va_1237 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",262,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1238 */
      i ++;
    }
    if (mem1_3[len] != (wchar_t)33) printf("%d - %lu m1=%d  m2=%d  \n",268,
                                           (unsigned long)len,
                                           (int)mem1_3[len],(int)mem2_2[len]); /* printf_va_1239 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1240 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4);
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(mem2_2),
                 (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)284,(unsigned int)rc); /* printf_va_1241 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",291,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1242 */
      i ++;
    }
    if (mem1_3[len] == (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",297,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1243 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1244 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemcpy_s(mem1_3,(rsize_t)(256 * 4),(wchar_t const *)(mem1_3),
                 (rsize_t)(256 * 4));
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemcpy_s",
                      (unsigned int)312,(unsigned int)rc); /* printf_va_1245 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1246 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)55;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)65;
    i ++;
  }
  len = (rsize_t)100;
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(& mem1_3[10]),len);
  if (rc != 404) printf("%s %u  Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)327,(unsigned int)rc); /* printf_va_1247 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",333,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1248 */
      i ++;
    }
    if (mem1_3[len] == (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",339,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1249 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1250 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)55;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)65;
    i ++;
  }
  len = (rsize_t)100;
  rc = wmemcpy_s(& mem1_3[10],len,(wchar_t const *)(mem1_3),len);
  if (rc != 404) printf("%s %u  Error rc=%u \n",(char *)"test_wmemcpy_s",
                        (unsigned int)356,(unsigned int)rc); /* printf_va_1251 */
  else {
    i = (uint32_t)10;
    while (i < len + (rsize_t)10) {
      if (mem1_3[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",362,
                                          (int)i,(int)mem1_3[i],
                                          (int)mem2_2[i]); /* printf_va_1252 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1253 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)55;
    i ++;
  }
  len = (rsize_t)5;
  rc = wmemcpy_s(mem1_3,len,(wchar_t const *)(mem2_2),len);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemcpy_s",
                      (unsigned int)379,(unsigned int)rc); /* printf_va_1254 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_3[i] != (wchar_t)55) printf("%d - %d m1=%d\n",385,(int)i,
                                           (int)mem1_3[i]); /* printf_va_1255 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1256 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_3[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_2[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemcpy_s(mem1_3,(rsize_t)(256 * 4),(wchar_t const *)(mem2_2),
                 (rsize_t)((256 * 4) / 2));
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemcpy_s",
                      (unsigned int)401,(unsigned int)rc); /* printf_va_1257 */
  else {
    i = (uint32_t)0;
    while (i < (uint32_t)((256 * 4) / 2)) {
      if (mem1_3[i] != (wchar_t)55) printf("%d - %d m1=%d  m2=%d  \n",407,
                                           (int)i,(int)mem1_3[i],
                                           (int)mem2_2[i]); /* printf_va_1258 */
      i ++;
    }
  }
  __retres = 0;
  return __retres;
}

static wchar_t mem1_4[256 * 4 + 2];
static wchar_t mem2_3[256 * 4 + 2];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1259(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1260(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1261(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1262(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1263(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1264(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1265(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1266(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1267(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1268(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1269(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1270(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1271(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1272(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1273(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1274(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1275(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1276(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1277(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1278(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1279(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1280(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1281(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1282(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1283(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1284(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1285(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1286(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1287(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1288(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1289(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1290(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1291(char const * restrict format, int param0,
                   unsigned long param1, int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1292(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1293(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1294(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1295(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1296(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1297(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1298(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1299(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1300(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1301(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1302(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1303(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1304(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1305(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1306(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param3),
            (indirect: param2), (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param3, param2, param1, param0;
 */
int printf_va_1307(char const * restrict format, int param0, int param1,
                   int param2, int param3);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1308(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1309(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1310(char const * restrict format, int param0, int param1,
                   unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1311(char const * restrict format, int param0, int param1,
                   unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1312(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1313(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1314(char const * restrict format, int param0, int param1,
                   unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1315(char const * restrict format, int param0, int param1,
                   unsigned int param2);

int test_wmemmove_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t i;
  rsize_t len;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wmemmove_s:\n"); /* printf_va_1259 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1260 */
  rc = wmemmove_s((wchar_t *)0,(rsize_t)(256 * 4),(wchar_t const *)(mem2_3),
                  (rsize_t)(256 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)94,(unsigned int)rc); /* printf_va_1261 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1262 */
  rc = wmemmove_s(mem1_4,(rsize_t)0,(wchar_t const *)(mem2_3),
                  (rsize_t)(256 * 4));
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)105,(unsigned int)rc); /* printf_va_1263 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1264 */
  rc = wmemmove_s(mem1_4,(rsize_t)((256UL << 20) + (unsigned long)1),
                  (wchar_t const *)(mem2_3),(rsize_t)(256 * 4));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)115,(unsigned int)rc); /* printf_va_1265 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1266 */
  rc = wmemmove_s(mem1_4,(rsize_t)(256 * 4),(wchar_t const *)0,
                  (rsize_t)(256 * 4));
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)125,(unsigned int)rc); /* printf_va_1267 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1268 */
  rc = wmemmove_s(mem1_4,(rsize_t)10,(wchar_t const *)(mem2_3),(rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)135,(unsigned int)rc); /* printf_va_1269 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1270 */
  rc = wmemmove_s(mem1_4,(rsize_t)(256 * 4),(wchar_t const *)(mem2_3),
                  (rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)145,(unsigned int)rc); /* printf_va_1271 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1272 */
  rc = wmemmove_s(mem1_4,(rsize_t)(256 * 4),(wchar_t const *)(& mem1_4[20]),
                  (rsize_t)21);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)155,(unsigned int)rc); /* printf_va_1273 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1274 */
  rc = wmemmove_s(& mem1_4[25],(rsize_t)(256 * 4),(wchar_t const *)(mem1_4),
                  (rsize_t)26);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)165,(unsigned int)rc); /* printf_va_1275 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1276 */
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    mem1_4[i] = (wchar_t)33;
    i ++;
  }
  mem1_4[10] = (wchar_t)40;
  i = (uint32_t)11;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)44;
    i ++;
  }
  rc = wmemmove_s(mem1_4,(rsize_t)10,(wchar_t const *)(& mem1_4[10]),
                  (rsize_t)10);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)180,(unsigned int)rc); /* printf_va_1277 */
  else {
    if (mem1_4[0] != (wchar_t)40) 
      if (mem1_4[10] != (wchar_t)40) printf("%d - %d m1[0]=%d  m1[10]=%d should be 40  \n",
                                            185,(int)i,(int)mem1_4[0],
                                            (int)mem1_4[10]); /* printf_va_1278 */
    i = (uint32_t)1;
    while (i < (uint32_t)10) {
      if (mem1_4[i] != (wchar_t)44) printf("%d - %d m1=%d  should be 44  \n",
                                           190,(int)i,(int)mem1_4[i]); /* printf_va_1279 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1280 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 1)) {
    mem1_4[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4);
  rc = wmemmove_s(mem1_4,len,(wchar_t const *)(mem2_3),len + (rsize_t)1);
  if (rc == 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)206,(unsigned int)rc); /* printf_va_1281 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_4[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",213,
                                          (int)i,(int)mem1_4[i],
                                          (int)mem2_3[i]); /* printf_va_1282 */
      i ++;
    }
    if (mem1_4[i] != (wchar_t)33) printf("%d - %lu m1=%d  m2=%d  \n",219,
                                         (unsigned long)len,(int)mem1_4[len],
                                         (int)mem2_3[len]); /* printf_va_1283 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1284 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 2)) {
    mem1_4[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)((256 * 4) / 2);
  rc = wmemmove_s(mem1_4,len,(wchar_t const *)(mem2_3),(rsize_t)(256 * 4));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                        (unsigned int)235,(unsigned int)rc); /* printf_va_1285 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_4[i] != (wchar_t)0) printf("%d - %d m1=%d  m2=%d  \n",242,
                                          (int)i,(int)mem1_4[i],
                                          (int)mem2_3[i]); /* printf_va_1286 */
      i ++;
    }
    if (mem1_4[len] != (wchar_t)33) printf("%d - %lu m1=%d  m2=%d  \n",248,
                                           (unsigned long)len,
                                           (int)mem1_4[len],(int)mem2_3[len]); /* printf_va_1287 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1288 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 2)) {
    mem1_4[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4);
  rc = wmemmove_s(mem1_4,len,(wchar_t const *)(mem2_3),len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)263,(unsigned int)rc); /* printf_va_1289 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_4[i] != mem2_3[i]) printf("%d - %d m1=%d <> m2=%d  \n",271,
                                         (int)i,(int)mem1_4[i],
                                         (int)mem2_3[i]); /* printf_va_1290 */
      i ++;
    }
    if (mem1_4[len] != (wchar_t)33) 
      if (mem1_4[len + (rsize_t)1] != (wchar_t)33) printf("%d - %lu m1[len]=%d  m1[len+1]=%d  \n",
                                                          277,
                                                          (unsigned long)len,
                                                          (int)mem1_4[len],
                                                          (int)mem1_4[
                                                          len + (rsize_t)1]); /* printf_va_1291 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1292 */
  i = (uint32_t)0;
  while (i < (uint32_t)10) {
    mem1_4[i] = (wchar_t)33;
    i ++;
  }
  i = (uint32_t)10;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)44;
    i ++;
  }
  len = (rsize_t)(256 * 4 - 10);
  rc = wmemmove_s(mem1_4,len,(wchar_t const *)(& mem1_4[10]),len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)293,(unsigned int)rc); /* printf_va_1293 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_4[i] != (wchar_t)44) printf("%d - %d m1=%d  m2=%d  \n",300,
                                           (int)i,(int)mem1_4[i],
                                           (int)mem2_3[i]); /* printf_va_1294 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1295 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4 + 2)) {
    mem1_4[i] = (wchar_t)i;
    i ++;
  }
  len = (rsize_t)(256 * 4 - 10);
  rc = wmemmove_s(& mem1_4[10],len,(wchar_t const *)(mem1_4),len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)317,(unsigned int)rc); /* printf_va_1296 */
  else {
    i = (uint32_t)0;
    while (i < (uint32_t)10) {
      if ((unsigned long)mem1_4[i] != (unsigned long)i) printf("%d - %d m1=%d  m2=%d  \n",
                                                               324,(int)i,
                                                               (int)mem1_4[i],
                                                               (int)mem2_3[i]); /* printf_va_1297 */
      i ++;
    }
    i = (uint32_t)10;
    while (i < (uint32_t)(256 * 4)) {
      if ((unsigned long)mem1_4[i] != (unsigned long)(i - (uint32_t)10)) 
        printf("%d - %d m1=%d  should=%d  \n",330,(int)i,(int)mem1_4[i],
               (int)(i - (uint32_t)10)); /* printf_va_1298 */
      i ++;
    }
    if (mem1_4[256 * 4] != (wchar_t)(256 * 4)) 
      if (mem1_4[256 * 4 + 1] != (wchar_t)(256 * 4 + 1)) printf("%d - %d m1[LEN]=%d  mem1[LEN+1]=%d should be 1024 & 1025  \n",
                                                                336,(int)i,
                                                                (int)mem1_4[
                                                                256 * 4],
                                                                (int)mem1_4[
                                                                256 * 4 + 1]); /* printf_va_1299 */
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1300 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemmove_s(mem1_4,(rsize_t)(256 * 4),(wchar_t const *)(mem1_4),
                  (rsize_t)(256 * 4));
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)351,(unsigned int)rc); /* printf_va_1301 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1302 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)55;
    i ++;
  }
  len = (rsize_t)5;
  rc = wmemmove_s(mem1_4,len,(wchar_t const *)(mem2_3),len);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)366,(unsigned int)rc); /* printf_va_1303 */
  else {
    i = (uint32_t)0;
    while (i < len) {
      if (mem1_4[i] != (wchar_t)55) printf("%d - %d m1=%d\n",372,(int)i,
                                           (int)mem1_4[i]); /* printf_va_1304 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1305 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemmove_s(mem1_4,(rsize_t)(256 * 4),(wchar_t const *)(mem2_3),
                  (rsize_t)((256 * 4) / 2));
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)388,(unsigned int)rc); /* printf_va_1306 */
  else {
    i = (uint32_t)0;
    while (i < (uint32_t)((256 * 4) / 2)) {
      if (mem1_4[i] != (wchar_t)55) printf("%d - %d m1=%d  m2=%d  \n",394,
                                           (int)i,(int)mem1_4[i],
                                           (int)mem2_3[i]); /* printf_va_1307 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1308 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemmove_s((wchar_t *)((char *)(mem1_4) + 1),(rsize_t)(256 * 4),
                  (wchar_t const *)(mem2_3),(rsize_t)10);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)410,(unsigned int)rc); /* printf_va_1309 */
  else {
    if (mem1_4[0] != (wchar_t)0x00003723) printf("%d - %d first char memory incorrect m1=%04x  \n",
                                                 415,(int)i,
                                                 (unsigned int)mem1_4[i]); /* printf_va_1310 */
    i = (uint32_t)1;
    while (i < (uint32_t)10) {
      if (mem1_4[i] != (wchar_t)0x00003700) printf("%d - %d m1=%04x  \n",420,
                                                   (int)i,
                                                   (unsigned int)mem1_4[i]); /* printf_va_1311 */
      i ++;
    }
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1312 */
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem1_4[i] = (wchar_t)35;
    i ++;
  }
  i = (uint32_t)0;
  while (i < (uint32_t)(256 * 4)) {
    mem2_3[i] = (wchar_t)55;
    i ++;
  }
  rc = wmemmove_s((wchar_t *)((char *)(mem1_4) + 2),(rsize_t)(256 * 4),
                  (wchar_t const *)(mem2_3),(rsize_t)10);
  if (rc != 0) printf("%s %u  Error rc=%u \n",(char *)"test_wmemmove_s",
                      (unsigned int)436,(unsigned int)rc); /* printf_va_1313 */
  else {
    if (mem1_4[0] != (wchar_t)0x00370023) printf("%d - %d first char memory incorrect m1=%04x  \n",
                                                 441,(int)i,
                                                 (unsigned int)mem1_4[i]); /* printf_va_1314 */
    i = (uint32_t)1;
    while (i < (uint32_t)10) {
      if (mem1_4[i] != (wchar_t)0x00370000) printf("%d - %d m1=%04x  \n",446,
                                                   (int)i,
                                                   (unsigned int)mem1_4[i]); /* printf_va_1315 */
      i ++;
    }
  }
  __retres = 0;
  return __retres;
}

static wchar_t mem1_5[256];
/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..)));
 */
int printf_va_1316(char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1317(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1318(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1319(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1320(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1321(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1322(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1323(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1324(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_1325(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1326(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1327(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1328(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1329(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1330(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1331(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1332(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1333(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1334(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1335(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1336(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1337(char const * restrict format, int param0, int param1,
                   int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_1338(char const * restrict format, int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, *(param0 + (0 ..));
 */
int printf_va_1339(char const * restrict format, char *param0,
                   unsigned int param1, unsigned int param2);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param2),
            (indirect: param1), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param2, param1, param0;
 */
int printf_va_1340(char const * restrict format, int param0, int param1,
                   int param2);

int test_wmemset_s(void)
{
  int __retres;
  errno_t rc;
  uint32_t len;
  uint32_t i;
  wchar_t value;
  unsigned int testno = (unsigned int)0;
  printf("\nTesting wmemset_s:\n"); /* printf_va_1316 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1317 */
  value = (wchar_t)34;
  rc = wmemset_s((wchar_t *)0,value,(rsize_t)256);
  if (rc != 400) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                        (unsigned int)84,(unsigned int)rc); /* printf_va_1318 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1319 */
  value = (wchar_t)34;
  rc = wmemset_s(mem1_5,value,(rsize_t)0);
  if (rc != 401) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                        (unsigned int)95,(unsigned int)rc); /* printf_va_1320 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1321 */
  value = (wchar_t)34;
  rc = wmemset_s(mem1_5,value,(rsize_t)((256UL << 20) + (unsigned long)1));
  if (rc != 403) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                        (unsigned int)107,(unsigned int)rc); /* printf_va_1322 */
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1323 */
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_5[i] = (wchar_t)99;
    i ++;
  }
  len = (uint32_t)1;
  value = (wchar_t)34;
  rc = wmemset_s(mem1_5,value,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                      (unsigned int)122,(unsigned int)rc); /* printf_va_1324 */
  if (mem1_5[0] != value) printf("%d - m1[0]=%d \n",127,(int)mem1_5[0]); /* printf_va_1325 */
  i = (uint32_t)1;
  while (i < (uint32_t)256) {
    if (mem1_5[i] != (wchar_t)99) printf("%d - %d m1=%d \n",132,(int)i,
                                         (int)mem1_5[i]); /* printf_va_1326 */
    i ++;
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1327 */
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_5[i] = (wchar_t)99;
    i ++;
  }
  len = (uint32_t)2;
  value = (wchar_t)34;
  rc = wmemset_s(mem1_5,value,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                      (unsigned int)148,(unsigned int)rc); /* printf_va_1328 */
  if (mem1_5[0] != value) goto _LOR;
  else 
    if (mem1_5[1] != value) _LOR:
                            printf("%d - m1[0]=%d m1[1]=%d \n",153,
                                   (int)mem1_5[0],(int)mem1_5[1]); /* printf_va_1329 */
  i = (uint32_t)2;
  while (i < (uint32_t)256) {
    if (mem1_5[i] != (wchar_t)99) printf("%d - %d m1=%d \n",158,(int)i,
                                         (int)mem1_5[i]); /* printf_va_1330 */
    i ++;
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1331 */
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_5[i] = (wchar_t)99;
    i ++;
  }
  len = (uint32_t)12;
  value = (wchar_t)34;
  rc = wmemset_s(mem1_5,value,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                      (unsigned int)175,(unsigned int)rc); /* printf_va_1332 */
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_5[i] != value) printf("%d - %d m1=%d \n",181,(int)i,
                                   (int)mem1_5[i]); /* printf_va_1333 */
    i ++;
  }
  i = len;
  while (i < (uint32_t)256) {
    if (mem1_5[i] != (wchar_t)99) printf("%d - %d m1=%d \n",187,(int)i,
                                         (int)mem1_5[i]); /* printf_va_1334 */
    i ++;
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1335 */
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_5[i] = (wchar_t)99;
    i ++;
  }
  len = (uint32_t)31;
  value = (wchar_t)3;
  rc = wmemset_s(mem1_5,value,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                      (unsigned int)203,(unsigned int)rc); /* printf_va_1336 */
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_5[i] != value) printf("%d - %d m1=%d \n",209,(int)i,
                                   (int)mem1_5[i]); /* printf_va_1337 */
    i ++;
  }
  testno ++;
  printf("Test #%d:\n",(int)testno); /* printf_va_1338 */
  i = (uint32_t)0;
  while (i < (uint32_t)256) {
    mem1_5[i] = (wchar_t)99;
    i ++;
  }
  len = (uint32_t)133;
  value = 65L;
  rc = wmemset_s(mem1_5,value,len);
  if (rc != 0) printf("%s %u   Error rc=%u \n",(char *)"test_wmemset_s",
                      (unsigned int)225,(unsigned int)rc); /* printf_va_1339 */
  i = (uint32_t)0;
  while (i < len) {
    if (mem1_5[i] != value) printf("%d - %d m1=%d \n",231,(int)i,
                                   (int)mem1_5[i]); /* printf_va_1340 */
    i ++;
  }
  __retres = 0;
  return __retres;
}


