/* Generated by Frama-C */
#include "__fc_builtin.h"
#include "errno.h"
#include "math.h"
#include "stdarg.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "strings.h"
struct kgflags_string_array {
   char **_items ;
   int _count ;
};
typedef struct kgflags_string_array kgflags_string_array_t;
struct kgflags_int_array {
   char **_items ;
   int _count ;
};
typedef struct kgflags_int_array kgflags_int_array_t;
struct kgflags_double_array {
   char **_items ;
   int _count ;
};
typedef struct kgflags_double_array kgflags_double_array_t;
enum _kgflags_flag_kind {
    KGFLAGS_FLAG_KIND_NONE = 0,
    KGFLAGS_FLAG_KIND_STRING = 1,
    KGFLAGS_FLAG_KIND_BOOL = 2,
    KGFLAGS_FLAG_KIND_INT = 3,
    KGFLAGS_FLAG_KIND_DOUBLE = 4,
    KGFLAGS_FLAG_KIND_STRING_ARRAY = 5,
    KGFLAGS_FLAG_KIND_INT_ARRAY = 6,
    KGFLAGS_FLAG_KIND_DOUBLE_ARRAY = 7
};
typedef enum _kgflags_flag_kind _kgflags_flag_kind_t;
union __anonunion_default_value_1 {
   char const *string_value ;
   _Bool bool_value ;
   int int_value ;
   double double_value ;
};
union __anonunion_result_2 {
   char const **string_value ;
   _Bool *bool_value ;
   int *int_value ;
   double *double_value ;
   kgflags_string_array_t *string_array ;
   kgflags_int_array_t *int_array ;
   kgflags_double_array_t *double_array ;
};
struct _kgflags_flag {
   char const *name ;
   char const *description ;
   union __anonunion_default_value_1 default_value ;
   union __anonunion_result_2 result ;
   _Bool assigned ;
   _Bool error ;
   _Bool required ;
   _kgflags_flag_kind_t kind ;
};
typedef struct _kgflags_flag _kgflags_flag_t;
enum _kgflags_error_kind {
    KGFLAGS_ERROR_KIND_NONE = 0,
    KGFLAGS_ERROR_KIND_MISSING_VALUE = 1,
    KGFLAGS_ERROR_KIND_UNKNOWN_FLAG = 2,
    KGFLAGS_ERROR_KIND_UNASSIGNED_FLAG = 3,
    KGFLAGS_ERROR_KIND_INVALID_INT = 4,
    KGFLAGS_ERROR_KIND_INVALID_DOUBLE = 5,
    KGFLAGS_ERROR_KIND_TOO_MANY_FLAGS = 6,
    KGFLAGS_ERROR_KIND_TOO_MANY_NON_FLAG_ARGS = 7,
    KGFLAGS_ERROR_KIND_MULTIPLE_ASSIGNMENT = 8,
    KGFLAGS_ERROR_KIND_DUPLICATE_FLAG = 9,
    KGFLAGS_ERROR_KIND_PREFIX_NO = 10
};
typedef enum _kgflags_error_kind _kgflags_error_kind_t;
struct _kgflags_error {
   char const *flag_name ;
   char const *arg ;
   _kgflags_error_kind_t kind ;
};
typedef struct _kgflags_error _kgflags_error_t;
struct __anonstruct__kgflags_g_3 {
   int flags_count ;
   _kgflags_flag_t flags[256] ;
   int non_flag_count ;
   char const *non_flag_args[512] ;
   int errors_count ;
   _kgflags_error_t errors[512] ;
   char const *flag_prefix ;
   int arg_cursor ;
   int argc ;
   char **argv ;
   char const *custom_description ;
};
int main(int argc, char **argv);

int eva_main(void)
{
  char argv0[256];
  char argv1[256];
  char argv2[256];
  char argv3[256];
  char argv4[256];
  int tmp_0;
  int argc = Frama_C_interval(0,5);
  char *argv[6] = {argv0, argv1, argv2, argv3, argv4, (char *)0};
  {
    int i = 0;
    /*@ loop unroll 5; */
    while (i < 5) {
      Frama_C_make_unknown(argv[i],(size_t)255);
      *(argv[i] + 255) = (char)0;
      i ++;
    }
  }
  tmp_0 = main(argc,argv);
  return tmp_0;
}

void kgflags_string(char const *name, char const *default_value,
                    char const *description, _Bool required,
                    char const **out_res);

void kgflags_bool(char const *name, _Bool default_value,
                  char const *description, _Bool required, _Bool *out_res);

void kgflags_int(char const *name, int default_value,
                 char const *description, _Bool required, int *out_res);

void kgflags_double(char const *name, double default_value,
                    char const *description, _Bool required, double *out_res);

void kgflags_string_array(char const *name, char const *description,
                          _Bool required, kgflags_string_array_t *out_arr);

void kgflags_int_array(char const *name, char const *description,
                       _Bool required, kgflags_int_array_t *out_arr);

void kgflags_double_array(char const *name, char const *description,
                          _Bool required, kgflags_double_array_t *out_arr);

void kgflags_set_prefix(char const *prefix);

_Bool kgflags_parse(int argc, char **argv);

void kgflags_print_errors(void);

void kgflags_print_usage(void);

void kgflags_set_custom_description(char const *description);

int kgflags_string_array_get_count(kgflags_string_array_t const *arr);

char const *kgflags_string_array_get_item(kgflags_string_array_t const *arr,
                                          int at);

int kgflags_int_array_get_count(kgflags_int_array_t const *arr);

int kgflags_int_array_get_item(kgflags_int_array_t const *arr, int at);

int kgflags_double_array_get_count(kgflags_double_array_t const *arr);

double kgflags_double_array_get_item(kgflags_double_array_t const *arr,
                                     int at);

int kgflags_get_non_flag_args_count(void);

char const *kgflags_get_non_flag_arg(int at);

static _Bool _kgflags_is_flag(char const *arg);

static char const *_kgflags_get_flag_name(char const *arg);

static void _kgflags_add_flag(_kgflags_flag_t flag);

static _kgflags_flag_t *_kgflags_get_flag(char const *name,
                                          _Bool *out_prefix_no);

static int _kgflags_parse_int(char const *str, _Bool *out_ok);

static double _kgflags_parse_double(char const *str, _Bool *out_ok);

static void _kgflags_add_error(_kgflags_error_kind_t kind,
                               char const *flag_name, char const *arg);

static void _kgflags_assign_default_values(void);

static _Bool _kgflags_add_non_flag_arg(char const *arg);

static char const *_kgflags_consume_arg(void);

static char const *_kgflags_peek_arg(void);

static void _kgflags_parse_flag(_kgflags_flag_t *flag, _Bool prefix_no);

static struct __anonstruct__kgflags_g_3 _kgflags_g;
void kgflags_string(char const *name, char const *default_value,
                    char const *description, _Bool required,
                    char const **out_res)
{
  _kgflags_flag_t flag;
  *out_res = (char const *)0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_STRING;
  flag.name = name;
  flag.default_value.string_value = default_value;
  flag.description = description;
  flag.required = required;
  flag.result.string_value = out_res;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_bool(char const *name, _Bool default_value,
                  char const *description, _Bool required, _Bool *out_res)
{
  char *tmp;
  _kgflags_flag_t flag;
  *out_res = (_Bool)0;
  tmp = strstr(name,"no-");
  ;
  if ((void *)tmp == (void *)name) {
    _kgflags_add_error(KGFLAGS_ERROR_KIND_PREFIX_NO,name,(char const *)0);
    goto return_label;
  }
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_BOOL;
  flag.name = name;
  flag.default_value.bool_value = default_value;
  flag.description = description;
  flag.required = required;
  flag.result.bool_value = out_res;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return_label: return;
}

void kgflags_int(char const *name, int default_value,
                 char const *description, _Bool required, int *out_res)
{
  _kgflags_flag_t flag;
  *out_res = 0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_INT;
  flag.name = name;
  flag.default_value.int_value = default_value;
  flag.description = description;
  flag.required = required;
  flag.result.int_value = out_res;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_double(char const *name, double default_value,
                    char const *description, _Bool required, double *out_res)
{
  _kgflags_flag_t flag;
  *out_res = 0.0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_DOUBLE;
  flag.name = name;
  flag.default_value.double_value = default_value;
  flag.description = description;
  flag.required = required;
  flag.result.double_value = out_res;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_string_array(char const *name, char const *description,
                          _Bool required, kgflags_string_array_t *out_arr)
{
  _kgflags_flag_t flag;
  out_arr->_items = (char **)0;
  out_arr->_count = 0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_STRING_ARRAY;
  flag.name = name;
  flag.description = description;
  flag.required = required;
  flag.result.string_array = out_arr;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_int_array(char const *name, char const *description,
                       _Bool required, kgflags_int_array_t *out_arr)
{
  _kgflags_flag_t flag;
  out_arr->_items = (char **)0;
  out_arr->_count = 0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_INT_ARRAY;
  flag.name = name;
  flag.description = description;
  flag.required = required;
  flag.result.int_array = out_arr;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_double_array(char const *name, char const *description,
                          _Bool required, kgflags_double_array_t *out_arr)
{
  _kgflags_flag_t flag;
  out_arr->_items = (char **)0;
  out_arr->_count = 0;
  memset((void *)(& flag),0,sizeof(_kgflags_flag_t));
  flag.kind = KGFLAGS_FLAG_KIND_DOUBLE_ARRAY;
  flag.name = name;
  flag.description = description;
  flag.required = required;
  flag.result.double_array = out_arr;
  flag.assigned = (_Bool)0;
  _kgflags_add_flag(flag);
  return;
}

void kgflags_set_prefix(char const *prefix)
{
  _kgflags_g.flag_prefix = prefix;
  return;
}

_Bool kgflags_parse(int argc, char **argv)
{
  _Bool __retres;
  _kgflags_g.argc = argc;
  _kgflags_g.argv = argv;
  _kgflags_g.arg_cursor = 1;
  if (_kgflags_g.flag_prefix == (char const *)0) _kgflags_g.flag_prefix = "--";
  if (_kgflags_g.errors_count > 0) {
    __retres = (_Bool)0;
    goto return_label;
  }
  char const *arg = (char const *)0;
  while (1) {
    arg = _kgflags_consume_arg();
    if (! (arg != (char const *)0)) break;
    {
      _kgflags_flag_t *flag = (_kgflags_flag_t *)0;
      _Bool is_flag = _kgflags_is_flag(arg);
      _Bool prefix_no = (_Bool)0;
      if (is_flag) {
        char const *flag_name = _kgflags_get_flag_name(arg);
        flag = _kgflags_get_flag(flag_name,& prefix_no);
        if (flag == (_kgflags_flag_t *)0) {
          _kgflags_add_error(KGFLAGS_ERROR_KIND_UNKNOWN_FLAG,flag_name,
                             (char const *)0);
          continue;
        }
      }
      else {
        _kgflags_add_non_flag_arg(arg);
        continue;
      }
      if (flag->assigned) _kgflags_add_error(KGFLAGS_ERROR_KIND_MULTIPLE_ASSIGNMENT,
                                             flag->name,(char const *)0);
      _kgflags_parse_flag(flag,prefix_no);
    }
  }
  _kgflags_assign_default_values();
  {
    int i = 0;
    while (i < _kgflags_g.flags_count) {
      {
        _kgflags_flag_t *flag_0 = & _kgflags_g.flags[i];
        if (flag_0->required) 
          if (! flag_0->assigned) 
            if (! flag_0->error) _kgflags_add_error(KGFLAGS_ERROR_KIND_UNASSIGNED_FLAG,
                                                    flag_0->name,
                                                    (char const *)0);
      }
      i ++;
    }
  }
  if (_kgflags_g.errors_count > 0) {
    __retres = (_Bool)0;
    goto return_label;
  }
  __retres = (_Bool)1;
  return_label: return __retres;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_1(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_2(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_3(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_4(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_5(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1, char *param2);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fprintf_va_6(FILE * restrict stream, char const * restrict format);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fprintf_va_7(FILE * restrict stream, char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_8(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_9(FILE * restrict stream, char const * restrict format,
                 char *param0, char *param1);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_10(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1);

void kgflags_print_errors(void)
{
  int i = 0;
  while (i < _kgflags_g.errors_count) {
    {
      _kgflags_error_t *err = & _kgflags_g.errors[i];
      switch (err->kind) {
        case KGFLAGS_ERROR_KIND_MISSING_VALUE:
        {
          fprintf(__fc_stderr,"Missing value for flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_1 */
          break;
        }
        case KGFLAGS_ERROR_KIND_UNKNOWN_FLAG:
        {
          fprintf(__fc_stderr,"Unrecognized flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_2 */
          break;
        }
        case KGFLAGS_ERROR_KIND_UNASSIGNED_FLAG:
        {
          fprintf(__fc_stderr,"Unassigned required flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_3 */
          break;
        }
        case KGFLAGS_ERROR_KIND_INVALID_INT:
        {
          fprintf(__fc_stderr,
                  "Invalid value for flag: %s%s (got %s, expected integer)\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name,
                  (char *)err->arg); /* fprintf_va_4 */
          break;
        }
        case KGFLAGS_ERROR_KIND_INVALID_DOUBLE:
        {
          fprintf(__fc_stderr,
                  "Invalid value for flag: %s%s (got %s, expected number)\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name,
                  (char *)err->arg); /* fprintf_va_5 */
          break;
        }
        case KGFLAGS_ERROR_KIND_TOO_MANY_FLAGS:
        {
          fprintf(__fc_stderr,"Too many flags declared."); /* fprintf_va_6 */
          break;
        }
        case KGFLAGS_ERROR_KIND_TOO_MANY_NON_FLAG_ARGS:
        {
          fprintf(__fc_stderr,
                  "Too many non-flag arguments passed to program."); /* fprintf_va_7 */
          break;
        }
        case KGFLAGS_ERROR_KIND_MULTIPLE_ASSIGNMENT:
        {
          fprintf(__fc_stderr,"Multiple assignment of flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_8 */
          break;
        }
        case KGFLAGS_ERROR_KIND_DUPLICATE_FLAG:
        {
          fprintf(__fc_stderr,"Redeclaration of flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_9 */
          break;
        }
        case KGFLAGS_ERROR_KIND_PREFIX_NO:
        {
          fprintf(__fc_stderr,
                  "Used \"no-\" prefix when declaring boolean flag: %s%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)err->flag_name); /* fprintf_va_10 */
          break;
        }
        default: break;
      }
    }
    i ++;
  }
  return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_11(FILE * restrict stream, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_12(FILE * restrict stream, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fprintf_va_13(FILE * restrict stream, char const * restrict format);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_14(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_15(FILE * restrict stream, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(param3);
    requires valid_read_string(param4);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param4 + (0 ..))),
            (indirect: *(param3 + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param4 + (0 ..)),
            *(param3 + (0 ..)), *(param2 + (0 ..)), *(param1 + (0 ..)),
            *(param0 + (0 ..));
 */
int fprintf_va_16(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2, char *param3,
                  char *param4);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_17(FILE * restrict stream, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_18(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param0;
 */
int fprintf_va_19(FILE * restrict stream, char const * restrict format,
                  int param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_20(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), param0;
 */
int fprintf_va_21(FILE * restrict stream, char const * restrict format,
                  double param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_22(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_23(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(param1);
    requires valid_read_string(param2);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param2 + (0 ..))),
            (indirect: *(param1 + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param2 + (0 ..)),
            *(param1 + (0 ..)), *(param0 + (0 ..));
 */
int fprintf_va_24(FILE * restrict stream, char const * restrict format,
                  char *param0, char *param1, char *param2);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..))), *(param0 + (0 ..));
 */
int fprintf_va_25(FILE * restrict stream, char const * restrict format,
                  char *param0);

/*@ requires valid_read_string(format);
    assigns \result, stream->__fc_FILE_data;
    assigns \result
      \from (indirect: stream->__fc_FILE_id),
            (indirect: stream->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns stream->__fc_FILE_data
      \from (indirect: stream->__fc_FILE_id), stream->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int fprintf_va_26(FILE * restrict stream, char const * restrict format);

void kgflags_print_usage(void)
{
  if (_kgflags_g.custom_description == (char const *)0) fprintf(__fc_stderr,
                                                                "Usage of %s:\n",
                                                                *(_kgflags_g.argv + 0)); /* fprintf_va_11 */
  else fprintf(__fc_stderr,"%s\n",(char *)_kgflags_g.custom_description); /* fprintf_va_12 */
  fprintf(__fc_stderr,"Flags:\n"); /* fprintf_va_13 */
  {
    int i = 0;
    while (i < _kgflags_g.flags_count) {
      {
        _kgflags_flag_t *flag = & _kgflags_g.flags[i];
        switch (flag->kind) {
          char const *tmp;
          case KGFLAGS_FLAG_KIND_STRING:
          { /* sequence */
            if (flag->required) tmp = ")"; else tmp = ", optional)";
            ;
            ;
            ;
          }
          fprintf(__fc_stderr,"\t%s%s\t(string%s\n",
                  (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                  (char *)tmp); /* fprintf_va_14 */
          if (! flag->required) fprintf(__fc_stderr,"\t\tDefault: %s\n",
                                        (char *)flag->default_value.string_value); /* fprintf_va_15 */
          break;
          case KGFLAGS_FLAG_KIND_BOOL:
          {
            char const *tmp_0;
            if (flag->required) tmp_0 = ")"; else tmp_0 = ", optional)";
            ;
            ;
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s, %sno-%s\t(boolean%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_0); /* fprintf_va_16 */
            if (! flag->required) {
              char const *tmp_1;
              if (flag->default_value.bool_value) tmp_1 = "True";
              else tmp_1 = "False";
              ;
              fprintf(__fc_stderr,"\t\tDefault: %s\n",(char *)tmp_1); /* fprintf_va_17 */
            }
            break;
          }
          case KGFLAGS_FLAG_KIND_INT:
          {
            char const *tmp_2;
            if (flag->required) tmp_2 = ")"; else tmp_2 = ", optional)";
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s\t(integer%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_2); /* fprintf_va_18 */
            if (! flag->required) fprintf(__fc_stderr,"\t\tDefault: %d\n",
                                          flag->default_value.int_value); /* fprintf_va_19 */
            break;
          }
          case KGFLAGS_FLAG_KIND_DOUBLE:
          {
            char const *tmp_3;
            if (flag->required) tmp_3 = ")"; else tmp_3 = ", optional)";
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s\t(float%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_3); /* fprintf_va_20 */
            if (! flag->required) fprintf(__fc_stderr,"\t\tDefault: %1.4g\n",
                                          flag->default_value.double_value); /* fprintf_va_21 */
            break;
          }
          case KGFLAGS_FLAG_KIND_STRING_ARRAY:
          {
            char const *tmp_4;
            if (flag->required) tmp_4 = ")"; else tmp_4 = ", optional)";
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s\t(array of strings%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_4); /* fprintf_va_22 */
            break;
          }
          case KGFLAGS_FLAG_KIND_INT_ARRAY:
          {
            char const *tmp_5;
            if (flag->required) tmp_5 = ")"; else tmp_5 = ", optional)";
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s\t(array of integers%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_5); /* fprintf_va_23 */
            break;
          }
          case KGFLAGS_FLAG_KIND_DOUBLE_ARRAY:
          {
            char const *tmp_6;
            if (flag->required) tmp_6 = ")"; else tmp_6 = ", optional)";
            ;
            ;
            ;
            fprintf(__fc_stderr,"\t%s%s\t(array of floats%s\n",
                    (char *)_kgflags_g.flag_prefix,(char *)flag->name,
                    (char *)tmp_6); /* fprintf_va_24 */
            break;
          }
          default: break;
        }
        if (flag->description) fprintf(__fc_stderr,"\t\t%s\n",
                                       (char *)flag->description); /* fprintf_va_25 */
        fprintf(__fc_stderr,"\n"); /* fprintf_va_26 */
      }
      i ++;
    }
  }
  return;
}

void kgflags_set_custom_description(char const *description)
{
  _kgflags_g.custom_description = description;
  return;
}

int kgflags_string_array_get_count(kgflags_string_array_t const *arr)
{
  int __retres;
  __retres = arr->_count;
  return __retres;
}

char const *kgflags_string_array_get_item(kgflags_string_array_t const *arr,
                                          int at)
{
  char const *__retres;
  if (at < 0) goto _LOR;
  else 
    if (at >= arr->_count) {
      _LOR: {
              __retres = (char const *)0;
              goto return_label;
            }
    }
  __retres = (char const *)*(arr->_items + at);
  return_label: return __retres;
}

int kgflags_int_array_get_count(kgflags_int_array_t const *arr)
{
  int __retres;
  __retres = arr->_count;
  return __retres;
}

int kgflags_int_array_get_item(kgflags_int_array_t const *arr, int at)
{
  int __retres;
  if (at < 0) goto _LOR;
  else 
    if (at >= arr->_count) {
      _LOR: {
              __retres = 0;
              goto return_label;
            }
    }
  char const *str = (char const *)*(arr->_items + at);
  _Bool ok = (_Bool)0;
  int res = _kgflags_parse_int(str,& ok);
  if (! ok) {
    __retres = 0;
    goto return_label;
  }
  __retres = res;
  return_label: return __retres;
}

int kgflags_double_array_get_count(kgflags_double_array_t const *arr)
{
  int __retres;
  __retres = arr->_count;
  return __retres;
}

double kgflags_double_array_get_item(kgflags_double_array_t const *arr,
                                     int at)
{
  double __retres;
  if (at < 0) goto _LOR;
  else 
    if (at >= arr->_count) {
      _LOR: {
              __retres = 0.0;
              goto return_label;
            }
    }
  char const *str = (char const *)*(arr->_items + at);
  _Bool ok = (_Bool)0;
  double res = _kgflags_parse_double(str,& ok);
  if (! ok) {
    __retres = 0.0;
    goto return_label;
  }
  __retres = res;
  return_label: return __retres;
}

int kgflags_get_non_flag_args_count(void)
{
  int __retres;
  __retres = _kgflags_g.non_flag_count;
  return __retres;
}

char const *kgflags_get_non_flag_arg(int at)
{
  char const *__retres;
  if (at < 0) goto _LOR;
  else 
    if (at >= _kgflags_g.non_flag_count) {
      _LOR: {
              __retres = (char const *)0;
              goto return_label;
            }
    }
  __retres = _kgflags_g.non_flag_args[at];
  return_label: return __retres;
}

static _Bool _kgflags_is_flag(char const *arg)
{
  _Bool __retres;
  char const *tmp;
  tmp = _kgflags_get_flag_name(arg);
  __retres = (_Bool)(tmp != (char const *)0);
  return __retres;
}

static char const *_kgflags_get_flag_name(char const *arg)
{
  char const *__retres;
  size_t tmp_0;
  int tmp_1;
  unsigned long prefix_len = strlen(_kgflags_g.flag_prefix);
  tmp_0 = strlen(arg);
  ;
  if (tmp_0 < prefix_len) {
    __retres = (char const *)0;
    goto return_label;
  }
  tmp_1 = strncmp(arg,_kgflags_g.flag_prefix,prefix_len);
  if (tmp_1 != 0) {
    __retres = (char const *)0;
    goto return_label;
  }
  __retres = arg + prefix_len;
  return_label: return __retres;
}

static void _kgflags_add_flag(_kgflags_flag_t flag)
{
  _kgflags_flag_t *tmp;
  tmp = _kgflags_get_flag(flag.name,(_Bool *)0);
  if (tmp != (_kgflags_flag_t *)0) {
    _kgflags_add_error(KGFLAGS_ERROR_KIND_DUPLICATE_FLAG,flag.name,
                       (char const *)0);
    goto return_label;
  }
  if (_kgflags_g.flags_count >= 256) {
    _kgflags_add_error(KGFLAGS_ERROR_KIND_TOO_MANY_FLAGS,(char const *)0,
                       (char const *)0);
    goto return_label;
  }
  _kgflags_g.flags[_kgflags_g.flags_count] = flag;
  (_kgflags_g.flags_count) ++;
  return_label: return;
}

static _kgflags_flag_t *_kgflags_get_flag(char const *name,
                                          _Bool *out_prefix_no)
{
  _kgflags_flag_t *__retres;
  if (out_prefix_no) *out_prefix_no = (_Bool)0;
  {
    int i = 0;
    while (i < _kgflags_g.flags_count) {
      {
        int tmp;
        _kgflags_flag_t *flag = & _kgflags_g.flags[i];
        tmp = strcmp(name,flag->name);
        if (tmp == 0) {
          __retres = flag;
          goto return_label;
        }
        if (flag->kind == (unsigned int)KGFLAGS_FLAG_KIND_BOOL) {
          char *tmp_1;
          tmp_1 = strstr(name,"no-");
          ;
          if ((void *)tmp_1 == (void *)name) {
            int tmp_0;
            tmp_0 = strcmp(name + 3,flag->name);
            if (tmp_0 == 0) {
              if (out_prefix_no) *out_prefix_no = (_Bool)1;
              __retres = flag;
              goto return_label;
            }
          }
        }
      }
      i ++;
    }
  }
  __retres = (_kgflags_flag_t *)0;
  return_label: return __retres;
}

static int _kgflags_parse_int(char const *str, _Bool *out_ok)
{
  int __retres;
  *out_ok = (_Bool)0;
  char *end = (char *)0;
  long res_l = strtol(str,& end,10);
  if ((void *)end == (void *)str) goto _LOR;
  else 
    if ((int)*end != '\000') goto _LOR;
    else 
      if (res_l > (long)2147483647) goto _LOR;
      else 
        if (res_l < (long)(-2147483647 - 1)) goto _LOR;
        else 
          if (res_l == -9223372036854775807L - 1L) goto _LOR_0;
          else 
            if (res_l == 9223372036854775807L) {
              _LOR_0: ;
              if (34 == __fc_errno) {
                _LOR:
                {
                  *out_ok = (_Bool)0;
                  __retres = 0;
                  goto return_label;
                }
              }
            }
  *out_ok = (_Bool)1;
  __retres = (int)res_l;
  return_label: return __retres;
}

static double _kgflags_parse_double(char const *str, _Bool *out_ok)
{
  double __retres;
  *out_ok = (_Bool)0;
  char *end = (char *)0;
  double res = strtod(str,& end);
  if ((void *)end == (void *)str) goto _LOR;
  else 
    if ((int)*end != '\000') goto _LOR;
    else 
      if (res == - ((double)INFINITY)) goto _LOR_0;
      else 
        if (res == (double)INFINITY) {
          _LOR_0: ;
          if (34 == __fc_errno) {
            _LOR: {
                    *out_ok = (_Bool)0;
                    __retres = 0.0;
                    goto return_label;
                  }
          }
        }
  *out_ok = (_Bool)1;
  __retres = res;
  return_label: return __retres;
}

static void _kgflags_add_error(_kgflags_error_kind_t kind,
                               char const *flag_name, char const *arg)
{
  _kgflags_error_t err;
  err.kind = kind;
  err.flag_name = flag_name;
  err.arg = arg;
  if (_kgflags_g.errors_count >= 512) goto return_label;
  _kgflags_g.errors[_kgflags_g.errors_count] = err;
  (_kgflags_g.errors_count) ++;
  return_label: return;
}

static void _kgflags_assign_default_values(void)
{
  int i = 0;
  while (i < _kgflags_g.flags_count) {
    {
      _kgflags_flag_t *flag = & _kgflags_g.flags[i];
      if (flag->assigned) goto _LOR;
      else 
        if (flag->required) _LOR: goto __Cont;
      switch (flag->kind) {
        case KGFLAGS_FLAG_KIND_STRING:
        {
          *(flag->result.string_value) = flag->default_value.string_value;
          flag->assigned = (_Bool)1;
          break;
        }
        case KGFLAGS_FLAG_KIND_BOOL:
        {
          *(flag->result.bool_value) = flag->default_value.bool_value;
          flag->assigned = (_Bool)1;
          break;
        }
        case KGFLAGS_FLAG_KIND_INT:
        {
          *(flag->result.int_value) = flag->default_value.int_value;
          flag->assigned = (_Bool)1;
          break;
        }
        case KGFLAGS_FLAG_KIND_DOUBLE:
        {
          *(flag->result.double_value) = flag->default_value.double_value;
          flag->assigned = (_Bool)1;
          break;
        }
        default: break;
      }
    }
    __Cont: i ++;
  }
  return;
}

static _Bool _kgflags_add_non_flag_arg(char const *arg)
{
  _Bool __retres;
  if (_kgflags_g.non_flag_count >= 512) {
    _kgflags_add_error(KGFLAGS_ERROR_KIND_TOO_MANY_NON_FLAG_ARGS,
                       (char const *)0,(char const *)0);
    __retres = (_Bool)0;
    goto return_label;
  }
  _kgflags_g.non_flag_args[_kgflags_g.non_flag_count] = arg;
  (_kgflags_g.non_flag_count) ++;
  __retres = (_Bool)1;
  return_label: return __retres;
}

static char const *_kgflags_consume_arg(void)
{
  char const *__retres;
  if (_kgflags_g.arg_cursor >= _kgflags_g.argc) {
    __retres = (char const *)0;
    goto return_label;
  }
  char const *res = (char const *)*(_kgflags_g.argv + _kgflags_g.arg_cursor);
  (_kgflags_g.arg_cursor) ++;
  __retres = res;
  return_label: return __retres;
}

static char const *_kgflags_peek_arg(void)
{
  char const *__retres;
  if (_kgflags_g.arg_cursor >= _kgflags_g.argc) {
    __retres = (char const *)0;
    goto return_label;
  }
  __retres = (char const *)*(_kgflags_g.argv + _kgflags_g.arg_cursor);
  return_label: return __retres;
}

static void _kgflags_parse_flag(_kgflags_flag_t *flag, _Bool prefix_no)
{
  switch (flag->kind) {
    case KGFLAGS_FLAG_KIND_STRING:
    {
      char const *val = _kgflags_consume_arg();
      if (! val) {
        flag->error = (_Bool)1;
        _kgflags_add_error(KGFLAGS_ERROR_KIND_MISSING_VALUE,flag->name,
                           (char const *)0);
        goto return_label;
      }
      *(flag->result.string_value) = val;
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_BOOL:
    {
      *(flag->result.bool_value) = (_Bool)(! prefix_no);
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_INT:
    {
      char const *val_0 = _kgflags_consume_arg();
      if (! val_0) {
        flag->error = (_Bool)1;
        _kgflags_add_error(KGFLAGS_ERROR_KIND_MISSING_VALUE,flag->name,
                           (char const *)0);
        goto return_label;
      }
      _Bool ok = (_Bool)0;
      int int_val = _kgflags_parse_int(val_0,& ok);
      if (! ok) {
        flag->error = (_Bool)1;
        _kgflags_add_error(KGFLAGS_ERROR_KIND_INVALID_INT,flag->name,val_0);
        goto return_label;
      }
      *(flag->result.int_value) = int_val;
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_DOUBLE:
    {
      char const *val_1 = _kgflags_consume_arg();
      if (! val_1) {
        flag->error = (_Bool)1;
        _kgflags_add_error(KGFLAGS_ERROR_KIND_MISSING_VALUE,flag->name,
                           (char const *)0);
        goto return_label;
      }
      _Bool ok_0 = (_Bool)0;
      double double_val = _kgflags_parse_double(val_1,& ok_0);
      if (! ok_0) {
        flag->error = (_Bool)1;
        _kgflags_add_error(KGFLAGS_ERROR_KIND_INVALID_DOUBLE,flag->name,
                           val_1);
        goto return_label;
      }
      *(flag->result.double_value) = double_val;
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_STRING_ARRAY:
    {
      int initial_cursor = _kgflags_g.arg_cursor;
      int count = 0;
      while (1) {
        {
          char const *val_2 = _kgflags_peek_arg();
          if (val_2 == (char const *)0) goto _LOR;
          else {
            _Bool tmp_5;
            tmp_5 = _kgflags_is_flag(val_2);
            if (tmp_5) _LOR: break;
          }
          _kgflags_consume_arg();
          count ++;
        }
      }
      kgflags_string_array_t *arr = flag->result.string_array;
      arr->_items = _kgflags_g.argv + initial_cursor;
      arr->_count = count;
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_INT_ARRAY:
    {
      int initial_cursor_0 = _kgflags_g.arg_cursor;
      int count_0 = 0;
      _Bool all_args_ok = (_Bool)1;
      while (1) {
        {
          char const *val_3 = _kgflags_peek_arg();
          if (val_3 == (char const *)0) goto _LOR_0;
          else {
            _Bool tmp_7;
            tmp_7 = _kgflags_is_flag(val_3);
            if (tmp_7) _LOR_0: break;
          }
          _kgflags_consume_arg();
          _Bool ok_1 = (_Bool)0;
          _kgflags_parse_int(val_3,& ok_1);
          if (! ok_1) {
            flag->error = (_Bool)1;
            _kgflags_add_error(KGFLAGS_ERROR_KIND_INVALID_INT,flag->name,
                               val_3);
            all_args_ok = (_Bool)0;
          }
          count_0 ++;
        }
      }
      kgflags_int_array_t *arr_0 = flag->result.int_array;
      if (all_args_ok) {
        arr_0->_items = _kgflags_g.argv + initial_cursor_0;
        arr_0->_count = count_0;
      }
      flag->assigned = (_Bool)1;
      break;
    }
    case KGFLAGS_FLAG_KIND_DOUBLE_ARRAY:
    {
      int initial_cursor_1 = _kgflags_g.arg_cursor;
      int count_1 = 0;
      _Bool all_args_ok_0 = (_Bool)1;
      while (1) {
        {
          char const *val_4 = _kgflags_peek_arg();
          if (val_4 == (char const *)0) goto _LOR_1;
          else {
            _Bool tmp_9;
            tmp_9 = _kgflags_is_flag(val_4);
            if (tmp_9) _LOR_1: break;
          }
          _kgflags_consume_arg();
          _Bool ok_2 = (_Bool)0;
          _kgflags_parse_double(val_4,& ok_2);
          if (! ok_2) {
            flag->error = (_Bool)1;
            _kgflags_add_error(KGFLAGS_ERROR_KIND_INVALID_DOUBLE,flag->name,
                               val_4);
            all_args_ok_0 = (_Bool)0;
          }
          count_1 ++;
        }
      }
      kgflags_double_array_t *arr_1 = flag->result.double_array;
      if (all_args_ok_0) {
        arr_1->_items = _kgflags_g.argv + initial_cursor_1;
        arr_1->_count = count_1;
      }
      flag->assigned = (_Bool)1;
      break;
    }
    default: break;
  }
  return_label: return;
}

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_1(char const * restrict format, char *param0);

/*@ requires valid_read_string(param0);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param0 + (0 ..)));
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param0 + (0 ..));
 */
int printf_va_2(char const * restrict format, char *param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_3(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_4(char const * restrict format, double param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_5(char const * restrict format, int param0);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), param0;
 */
int printf_va_6(char const * restrict format, int param0, char *param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_7(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_8(char const * restrict format, int param0, int param1);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param0;
 */
int printf_va_9(char const * restrict format, int param0);

/*@ requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: param1),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            param1, param0;
 */
int printf_va_10(char const * restrict format, int param0, double param1);

/*@ requires valid_read_string(param1);
    requires valid_read_string(format);
    assigns \result, __fc_stdout->__fc_FILE_data;
    assigns \result
      \from (indirect: __fc_stdout->__fc_FILE_id),
            (indirect: __fc_stdout->__fc_FILE_data),
            (indirect: *(format + (0 ..))), (indirect: *(param1 + (0 ..))),
            (indirect: param0);
    assigns __fc_stdout->__fc_FILE_data
      \from (indirect: __fc_stdout->__fc_FILE_id),
            __fc_stdout->__fc_FILE_data, (indirect: *(format + (0 ..))),
            *(param1 + (0 ..)), param0;
 */
int printf_va_11(char const * restrict format, int param0, char *param1);

int main(int argc, char **argv)
{
  int __retres;
  kgflags_string_array_t string_arr;
  kgflags_int_array_t int_arr;
  kgflags_double_array_t double_arr;
  _Bool tmp;
  char const *tmp_0;
  int tmp_1;
  int tmp_4;
  int tmp_7;
  char const *string_val = (char const *)0;
  kgflags_string("string","lorem","String flag.",(_Bool)1,& string_val);
  _Bool bool_val = (_Bool)0;
  kgflags_bool("bool",(_Bool)0,"Boolean flag.",(_Bool)1,& bool_val);
  int int_val = 0;
  kgflags_int("int",0,"Integer flag.",(_Bool)1,& int_val);
  double double_val = (double)0;
  kgflags_double("double",0.0,"Double flag.",(_Bool)1,& double_val);
  kgflags_string_array("string-array","String array flag.",(_Bool)1,
                       & string_arr);
  kgflags_int_array("int-array","Int array flag.",(_Bool)1,& int_arr);
  kgflags_double_array("double-array","Double array flag.",(_Bool)1,
                       & double_arr);
  kgflags_set_custom_description("Usage of fullapi [-FLAGS]:");
  kgflags_set_prefix("-");
  tmp = kgflags_parse(argc,argv);
  if (! tmp) {
    kgflags_print_errors();
    kgflags_print_usage();
    __retres = 1;
    goto return_label;
  }
  printf("string_val: %s\n",(char *)string_val); /* printf_va_1 */
  if (bool_val) tmp_0 = "true"; else tmp_0 = "false";
  printf("bool_val: %s\n",(char *)tmp_0); /* printf_va_2 */
  printf("int_val: %d\n",int_val); /* printf_va_3 */
  printf("double_val: %f\n",double_val); /* printf_va_4 */
  tmp_1 = kgflags_string_array_get_count((kgflags_string_array_t const *)(& string_arr));
  printf("string-arr count: %d\n",tmp_1); /* printf_va_5 */
  {
    int i = 0;
    while (1) {
      int tmp_3;
      tmp_3 = kgflags_string_array_get_count((kgflags_string_array_t const *)(& string_arr));
      ;
      if (! (i < tmp_3)) break;
      {
        char const *tmp_2;
        tmp_2 = kgflags_string_array_get_item((kgflags_string_array_t const *)(& string_arr),
                                              i);
        ;
        printf("string-arr [%d]\n: %s",i,(char *)tmp_2); /* printf_va_6 */
      }
      i ++;
    }
  }
  tmp_4 = kgflags_int_array_get_count((kgflags_int_array_t const *)(& int_arr));
  printf("int-arr count: %d\n",tmp_4); /* printf_va_7 */
  {
    int i_0 = 0;
    while (1) {
      int tmp_6;
      tmp_6 = kgflags_int_array_get_count((kgflags_int_array_t const *)(& int_arr));
      ;
      if (! (i_0 < tmp_6)) break;
      {
        int tmp_5;
        tmp_5 = kgflags_int_array_get_item((kgflags_int_array_t const *)(& int_arr),
                                           i_0);
        ;
        printf("int-arr [%d]: %d\n",i_0,tmp_5); /* printf_va_8 */
      }
      i_0 ++;
    }
  }
  tmp_7 = kgflags_double_array_get_count((kgflags_double_array_t const *)(& double_arr));
  printf("double-arr count: %d\n",tmp_7); /* printf_va_9 */
  {
    int i_1 = 0;
    while (1) {
      int tmp_9;
      tmp_9 = kgflags_double_array_get_count((kgflags_double_array_t const *)(& double_arr));
      ;
      if (! (i_1 < tmp_9)) break;
      {
        double tmp_8;
        tmp_8 = kgflags_double_array_get_item((kgflags_double_array_t const *)(& double_arr),
                                              i_1);
        ;
        printf("double-arr [%d]: %1.4g\n",i_1,tmp_8); /* printf_va_10 */
      }
      i_1 ++;
    }
  }
  int non_flag_count = kgflags_get_non_flag_args_count();
  {
    int i_2 = 0;
    while (i_2 < non_flag_count) {
      {
        char const *tmp_11;
        tmp_11 = kgflags_get_non_flag_arg(i_2);
        ;
        printf("Non-flag arguments [%d] = %s\n",i_2,(char *)tmp_11); /* printf_va_11 */
      }
      i_2 ++;
    }
  }
  __retres = 0;
  return_label: return __retres;
}


